
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004d08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00004d08  00004d9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005e  00800180  00800180  00004ebc  2**0
                  ALLOC
  3 .stab         00003834  00000000  00000000  00004ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013f9  00000000  00000000  000086f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00009c89  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00009e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000c286  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000d60c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e7e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000e9a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000ec9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f608  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 94 07 	jmp	0xf28	; 0xf28 <__vector_1>
       8:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <__vector_2>
       c:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__vector_3>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__fixsfsi+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e8 e0       	ldi	r30, 0x08	; 8
     162:	fd e4       	ldi	r31, 0x4D	; 77
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a0 38       	cpi	r26, 0x80	; 128
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a0 e8       	ldi	r26, 0x80	; 128
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	ae 3d       	cpi	r26, 0xDE	; 222
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 56 22 	call	0x44ac	; 0x44ac <main>
     184:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 86 22 	jmp	0x450c	; 0x450c <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	af e6       	ldi	r26, 0x6F	; 111
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 a2 22 	jmp	0x4544	; 0x4544 <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 92 22 	jmp	0x4524	; 0x4524 <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 ae 22 	jmp	0x455c	; 0x455c <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 92 22 	jmp	0x4524	; 0x4524 <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 ae 22 	jmp	0x455c	; 0x455c <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 86 22 	jmp	0x450c	; 0x450c <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	8f e6       	ldi	r24, 0x6F	; 111
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 a2 22 	jmp	0x4544	; 0x4544 <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 8e 22 	jmp	0x451c	; 0x451c <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__stack+0x11>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__stack+0x17>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__stack+0x11>
     794:	6f e6       	ldi	r22, 0x6F	; 111
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__stack+0x17>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__stack+0x17>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__stack+0x9>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__stack+0x9>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 aa 22 	jmp	0x4554	; 0x4554 <__epilogue_restores__+0x10>

00000884 <__gtsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 92 22 	jmp	0x4524	; 0x4524 <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__gtsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__gtsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__gtsf2+0x58>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 ae 22 	jmp	0x455c	; 0x455c <__epilogue_restores__+0x18>

000008e4 <__gesf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 92 22 	jmp	0x4524	; 0x4524 <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gesf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gesf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gesf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 ae 22 	jmp	0x455c	; 0x455c <__epilogue_restores__+0x18>

00000944 <__ltsf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 92 22 	jmp	0x4524	; 0x4524 <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__ltsf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__ltsf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__ltsf2+0x58>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 ae 22 	jmp	0x455c	; 0x455c <__epilogue_restores__+0x18>

000009a4 <__fixsfsi>:
     9a4:	ac e0       	ldi	r26, 0x0C	; 12
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 96 22 	jmp	0x452c	; 0x452c <__prologue_saves__+0x20>
     9b0:	69 83       	std	Y+1, r22	; 0x01
     9b2:	7a 83       	std	Y+2, r23	; 0x02
     9b4:	8b 83       	std	Y+3, r24	; 0x03
     9b6:	9c 83       	std	Y+4, r25	; 0x04
     9b8:	ce 01       	movw	r24, r28
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	be 01       	movw	r22, r28
     9be:	6b 5f       	subi	r22, 0xFB	; 251
     9c0:	7f 4f       	sbci	r23, 0xFF	; 255
     9c2:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     9c6:	8d 81       	ldd	r24, Y+5	; 0x05
     9c8:	82 30       	cpi	r24, 0x02	; 2
     9ca:	61 f1       	breq	.+88     	; 0xa24 <__fixsfsi+0x80>
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	50 f1       	brcs	.+84     	; 0xa24 <__fixsfsi+0x80>
     9d0:	84 30       	cpi	r24, 0x04	; 4
     9d2:	21 f4       	brne	.+8      	; 0x9dc <__fixsfsi+0x38>
     9d4:	8e 81       	ldd	r24, Y+6	; 0x06
     9d6:	88 23       	and	r24, r24
     9d8:	51 f1       	breq	.+84     	; 0xa2e <__fixsfsi+0x8a>
     9da:	2e c0       	rjmp	.+92     	; 0xa38 <__fixsfsi+0x94>
     9dc:	2f 81       	ldd	r18, Y+7	; 0x07
     9de:	38 85       	ldd	r19, Y+8	; 0x08
     9e0:	37 fd       	sbrc	r19, 7
     9e2:	20 c0       	rjmp	.+64     	; 0xa24 <__fixsfsi+0x80>
     9e4:	6e 81       	ldd	r22, Y+6	; 0x06
     9e6:	2f 31       	cpi	r18, 0x1F	; 31
     9e8:	31 05       	cpc	r19, r1
     9ea:	1c f0       	brlt	.+6      	; 0x9f2 <__fixsfsi+0x4e>
     9ec:	66 23       	and	r22, r22
     9ee:	f9 f0       	breq	.+62     	; 0xa2e <__fixsfsi+0x8a>
     9f0:	23 c0       	rjmp	.+70     	; 0xa38 <__fixsfsi+0x94>
     9f2:	8e e1       	ldi	r24, 0x1E	; 30
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	82 1b       	sub	r24, r18
     9f8:	93 0b       	sbc	r25, r19
     9fa:	29 85       	ldd	r18, Y+9	; 0x09
     9fc:	3a 85       	ldd	r19, Y+10	; 0x0a
     9fe:	4b 85       	ldd	r20, Y+11	; 0x0b
     a00:	5c 85       	ldd	r21, Y+12	; 0x0c
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__fixsfsi+0x68>
     a04:	56 95       	lsr	r21
     a06:	47 95       	ror	r20
     a08:	37 95       	ror	r19
     a0a:	27 95       	ror	r18
     a0c:	8a 95       	dec	r24
     a0e:	d2 f7       	brpl	.-12     	; 0xa04 <__fixsfsi+0x60>
     a10:	66 23       	and	r22, r22
     a12:	b1 f0       	breq	.+44     	; 0xa40 <__fixsfsi+0x9c>
     a14:	50 95       	com	r21
     a16:	40 95       	com	r20
     a18:	30 95       	com	r19
     a1a:	21 95       	neg	r18
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	4f 4f       	sbci	r20, 0xFF	; 255
     a20:	5f 4f       	sbci	r21, 0xFF	; 255
     a22:	0e c0       	rjmp	.+28     	; 0xa40 <__fixsfsi+0x9c>
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	09 c0       	rjmp	.+18     	; 0xa40 <__fixsfsi+0x9c>
     a2e:	2f ef       	ldi	r18, 0xFF	; 255
     a30:	3f ef       	ldi	r19, 0xFF	; 255
     a32:	4f ef       	ldi	r20, 0xFF	; 255
     a34:	5f e7       	ldi	r21, 0x7F	; 127
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <__fixsfsi+0x9c>
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	50 e8       	ldi	r21, 0x80	; 128
     a40:	b9 01       	movw	r22, r18
     a42:	ca 01       	movw	r24, r20
     a44:	2c 96       	adiw	r28, 0x0c	; 12
     a46:	e2 e0       	ldi	r30, 0x02	; 2
     a48:	0c 94 b2 22 	jmp	0x4564	; 0x4564 <__epilogue_restores__+0x20>

00000a4c <__floatunsisf>:
     a4c:	a8 e0       	ldi	r26, 0x08	; 8
     a4e:	b0 e0       	ldi	r27, 0x00	; 0
     a50:	ec e2       	ldi	r30, 0x2C	; 44
     a52:	f5 e0       	ldi	r31, 0x05	; 5
     a54:	0c 94 8e 22 	jmp	0x451c	; 0x451c <__prologue_saves__+0x10>
     a58:	7b 01       	movw	r14, r22
     a5a:	8c 01       	movw	r16, r24
     a5c:	61 15       	cp	r22, r1
     a5e:	71 05       	cpc	r23, r1
     a60:	81 05       	cpc	r24, r1
     a62:	91 05       	cpc	r25, r1
     a64:	19 f4       	brne	.+6      	; 0xa6c <__floatunsisf+0x20>
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	89 83       	std	Y+1, r24	; 0x01
     a6a:	60 c0       	rjmp	.+192    	; 0xb2c <__floatunsisf+0xe0>
     a6c:	83 e0       	ldi	r24, 0x03	; 3
     a6e:	89 83       	std	Y+1, r24	; 0x01
     a70:	8e e1       	ldi	r24, 0x1E	; 30
     a72:	c8 2e       	mov	r12, r24
     a74:	d1 2c       	mov	r13, r1
     a76:	dc 82       	std	Y+4, r13	; 0x04
     a78:	cb 82       	std	Y+3, r12	; 0x03
     a7a:	ed 82       	std	Y+5, r14	; 0x05
     a7c:	fe 82       	std	Y+6, r15	; 0x06
     a7e:	0f 83       	std	Y+7, r16	; 0x07
     a80:	18 87       	std	Y+8, r17	; 0x08
     a82:	c8 01       	movw	r24, r16
     a84:	b7 01       	movw	r22, r14
     a86:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__clzsi2>
     a8a:	fc 01       	movw	r30, r24
     a8c:	31 97       	sbiw	r30, 0x01	; 1
     a8e:	f7 ff       	sbrs	r31, 7
     a90:	3b c0       	rjmp	.+118    	; 0xb08 <__floatunsisf+0xbc>
     a92:	22 27       	eor	r18, r18
     a94:	33 27       	eor	r19, r19
     a96:	2e 1b       	sub	r18, r30
     a98:	3f 0b       	sbc	r19, r31
     a9a:	57 01       	movw	r10, r14
     a9c:	68 01       	movw	r12, r16
     a9e:	02 2e       	mov	r0, r18
     aa0:	04 c0       	rjmp	.+8      	; 0xaaa <__floatunsisf+0x5e>
     aa2:	d6 94       	lsr	r13
     aa4:	c7 94       	ror	r12
     aa6:	b7 94       	ror	r11
     aa8:	a7 94       	ror	r10
     aaa:	0a 94       	dec	r0
     aac:	d2 f7       	brpl	.-12     	; 0xaa2 <__floatunsisf+0x56>
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	50 e0       	ldi	r21, 0x00	; 0
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	a0 e0       	ldi	r26, 0x00	; 0
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__floatunsisf+0x7c>
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	aa 1f       	adc	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	2a 95       	dec	r18
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__floatunsisf+0x74>
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	a1 09       	sbc	r26, r1
     ad0:	b1 09       	sbc	r27, r1
     ad2:	8e 21       	and	r24, r14
     ad4:	9f 21       	and	r25, r15
     ad6:	a0 23       	and	r26, r16
     ad8:	b1 23       	and	r27, r17
     ada:	00 97       	sbiw	r24, 0x00	; 0
     adc:	a1 05       	cpc	r26, r1
     ade:	b1 05       	cpc	r27, r1
     ae0:	21 f0       	breq	.+8      	; 0xaea <__floatunsisf+0x9e>
     ae2:	41 e0       	ldi	r20, 0x01	; 1
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	4a 29       	or	r20, r10
     aec:	5b 29       	or	r21, r11
     aee:	6c 29       	or	r22, r12
     af0:	7d 29       	or	r23, r13
     af2:	4d 83       	std	Y+5, r20	; 0x05
     af4:	5e 83       	std	Y+6, r21	; 0x06
     af6:	6f 83       	std	Y+7, r22	; 0x07
     af8:	78 87       	std	Y+8, r23	; 0x08
     afa:	8e e1       	ldi	r24, 0x1E	; 30
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	8e 1b       	sub	r24, r30
     b00:	9f 0b       	sbc	r25, r31
     b02:	9c 83       	std	Y+4, r25	; 0x04
     b04:	8b 83       	std	Y+3, r24	; 0x03
     b06:	12 c0       	rjmp	.+36     	; 0xb2c <__floatunsisf+0xe0>
     b08:	30 97       	sbiw	r30, 0x00	; 0
     b0a:	81 f0       	breq	.+32     	; 0xb2c <__floatunsisf+0xe0>
     b0c:	0e 2e       	mov	r0, r30
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__floatunsisf+0xcc>
     b10:	ee 0c       	add	r14, r14
     b12:	ff 1c       	adc	r15, r15
     b14:	00 1f       	adc	r16, r16
     b16:	11 1f       	adc	r17, r17
     b18:	0a 94       	dec	r0
     b1a:	d2 f7       	brpl	.-12     	; 0xb10 <__floatunsisf+0xc4>
     b1c:	ed 82       	std	Y+5, r14	; 0x05
     b1e:	fe 82       	std	Y+6, r15	; 0x06
     b20:	0f 83       	std	Y+7, r16	; 0x07
     b22:	18 87       	std	Y+8, r17	; 0x08
     b24:	ce 1a       	sub	r12, r30
     b26:	df 0a       	sbc	r13, r31
     b28:	dc 82       	std	Y+4, r13	; 0x04
     b2a:	cb 82       	std	Y+3, r12	; 0x03
     b2c:	1a 82       	std	Y+2, r1	; 0x02
     b2e:	ce 01       	movw	r24, r28
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     b36:	28 96       	adiw	r28, 0x08	; 8
     b38:	ea e0       	ldi	r30, 0x0A	; 10
     b3a:	0c 94 aa 22 	jmp	0x4554	; 0x4554 <__epilogue_restores__+0x10>

00000b3e <__clzsi2>:
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	7b 01       	movw	r14, r22
     b48:	8c 01       	movw	r16, r24
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	e8 16       	cp	r14, r24
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	f8 06       	cpc	r15, r24
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	08 07       	cpc	r16, r24
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	18 07       	cpc	r17, r24
     b5a:	88 f4       	brcc	.+34     	; 0xb7e <__clzsi2+0x40>
     b5c:	8f ef       	ldi	r24, 0xFF	; 255
     b5e:	e8 16       	cp	r14, r24
     b60:	f1 04       	cpc	r15, r1
     b62:	01 05       	cpc	r16, r1
     b64:	11 05       	cpc	r17, r1
     b66:	31 f0       	breq	.+12     	; 0xb74 <__clzsi2+0x36>
     b68:	28 f0       	brcs	.+10     	; 0xb74 <__clzsi2+0x36>
     b6a:	88 e0       	ldi	r24, 0x08	; 8
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	a0 e0       	ldi	r26, 0x00	; 0
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	17 c0       	rjmp	.+46     	; 0xba2 <__clzsi2+0x64>
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	a0 e0       	ldi	r26, 0x00	; 0
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	12 c0       	rjmp	.+36     	; 0xba2 <__clzsi2+0x64>
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	e8 16       	cp	r14, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	f8 06       	cpc	r15, r24
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	08 07       	cpc	r16, r24
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	18 07       	cpc	r17, r24
     b8e:	28 f0       	brcs	.+10     	; 0xb9a <__clzsi2+0x5c>
     b90:	88 e1       	ldi	r24, 0x18	; 24
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	a0 e0       	ldi	r26, 0x00	; 0
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__clzsi2+0x64>
     b9a:	80 e1       	ldi	r24, 0x10	; 16
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	a0 e0       	ldi	r26, 0x00	; 0
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	20 e2       	ldi	r18, 0x20	; 32
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	28 1b       	sub	r18, r24
     bac:	39 0b       	sbc	r19, r25
     bae:	4a 0b       	sbc	r20, r26
     bb0:	5b 0b       	sbc	r21, r27
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <__clzsi2+0x7e>
     bb4:	16 95       	lsr	r17
     bb6:	07 95       	ror	r16
     bb8:	f7 94       	ror	r15
     bba:	e7 94       	ror	r14
     bbc:	8a 95       	dec	r24
     bbe:	d2 f7       	brpl	.-12     	; 0xbb4 <__clzsi2+0x76>
     bc0:	f7 01       	movw	r30, r14
     bc2:	e9 58       	subi	r30, 0x89	; 137
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	80 81       	ld	r24, Z
     bc8:	28 1b       	sub	r18, r24
     bca:	31 09       	sbc	r19, r1
     bcc:	41 09       	sbc	r20, r1
     bce:	51 09       	sbc	r21, r1
     bd0:	c9 01       	movw	r24, r18
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	ff 90       	pop	r15
     bd8:	ef 90       	pop	r14
     bda:	08 95       	ret

00000bdc <__pack_f>:
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	fc 01       	movw	r30, r24
     be8:	e4 80       	ldd	r14, Z+4	; 0x04
     bea:	f5 80       	ldd	r15, Z+5	; 0x05
     bec:	06 81       	ldd	r16, Z+6	; 0x06
     bee:	17 81       	ldd	r17, Z+7	; 0x07
     bf0:	d1 80       	ldd	r13, Z+1	; 0x01
     bf2:	80 81       	ld	r24, Z
     bf4:	82 30       	cpi	r24, 0x02	; 2
     bf6:	48 f4       	brcc	.+18     	; 0xc0a <__pack_f+0x2e>
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e1       	ldi	r26, 0x10	; 16
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e8 2a       	or	r14, r24
     c02:	f9 2a       	or	r15, r25
     c04:	0a 2b       	or	r16, r26
     c06:	1b 2b       	or	r17, r27
     c08:	a5 c0       	rjmp	.+330    	; 0xd54 <__pack_f+0x178>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	09 f4       	brne	.+2      	; 0xc10 <__pack_f+0x34>
     c0e:	9f c0       	rjmp	.+318    	; 0xd4e <__pack_f+0x172>
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	21 f4       	brne	.+8      	; 0xc1c <__pack_f+0x40>
     c14:	ee 24       	eor	r14, r14
     c16:	ff 24       	eor	r15, r15
     c18:	87 01       	movw	r16, r14
     c1a:	05 c0       	rjmp	.+10     	; 0xc26 <__pack_f+0x4a>
     c1c:	e1 14       	cp	r14, r1
     c1e:	f1 04       	cpc	r15, r1
     c20:	01 05       	cpc	r16, r1
     c22:	11 05       	cpc	r17, r1
     c24:	19 f4       	brne	.+6      	; 0xc2c <__pack_f+0x50>
     c26:	e0 e0       	ldi	r30, 0x00	; 0
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	96 c0       	rjmp	.+300    	; 0xd58 <__pack_f+0x17c>
     c2c:	62 81       	ldd	r22, Z+2	; 0x02
     c2e:	73 81       	ldd	r23, Z+3	; 0x03
     c30:	9f ef       	ldi	r25, 0xFF	; 255
     c32:	62 38       	cpi	r22, 0x82	; 130
     c34:	79 07       	cpc	r23, r25
     c36:	0c f0       	brlt	.+2      	; 0xc3a <__pack_f+0x5e>
     c38:	5b c0       	rjmp	.+182    	; 0xcf0 <__pack_f+0x114>
     c3a:	22 e8       	ldi	r18, 0x82	; 130
     c3c:	3f ef       	ldi	r19, 0xFF	; 255
     c3e:	26 1b       	sub	r18, r22
     c40:	37 0b       	sbc	r19, r23
     c42:	2a 31       	cpi	r18, 0x1A	; 26
     c44:	31 05       	cpc	r19, r1
     c46:	2c f0       	brlt	.+10     	; 0xc52 <__pack_f+0x76>
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	2a c0       	rjmp	.+84     	; 0xca6 <__pack_f+0xca>
     c52:	b8 01       	movw	r22, r16
     c54:	a7 01       	movw	r20, r14
     c56:	02 2e       	mov	r0, r18
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <__pack_f+0x86>
     c5a:	76 95       	lsr	r23
     c5c:	67 95       	ror	r22
     c5e:	57 95       	ror	r21
     c60:	47 95       	ror	r20
     c62:	0a 94       	dec	r0
     c64:	d2 f7       	brpl	.-12     	; 0xc5a <__pack_f+0x7e>
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	a0 e0       	ldi	r26, 0x00	; 0
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <__pack_f+0x9c>
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	aa 1f       	adc	r26, r26
     c76:	bb 1f       	adc	r27, r27
     c78:	2a 95       	dec	r18
     c7a:	d2 f7       	brpl	.-12     	; 0xc70 <__pack_f+0x94>
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	a1 09       	sbc	r26, r1
     c80:	b1 09       	sbc	r27, r1
     c82:	8e 21       	and	r24, r14
     c84:	9f 21       	and	r25, r15
     c86:	a0 23       	and	r26, r16
     c88:	b1 23       	and	r27, r17
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	a1 05       	cpc	r26, r1
     c8e:	b1 05       	cpc	r27, r1
     c90:	21 f0       	breq	.+8      	; 0xc9a <__pack_f+0xbe>
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	a0 e0       	ldi	r26, 0x00	; 0
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	9a 01       	movw	r18, r20
     c9c:	ab 01       	movw	r20, r22
     c9e:	28 2b       	or	r18, r24
     ca0:	39 2b       	or	r19, r25
     ca2:	4a 2b       	or	r20, r26
     ca4:	5b 2b       	or	r21, r27
     ca6:	da 01       	movw	r26, r20
     ca8:	c9 01       	movw	r24, r18
     caa:	8f 77       	andi	r24, 0x7F	; 127
     cac:	90 70       	andi	r25, 0x00	; 0
     cae:	a0 70       	andi	r26, 0x00	; 0
     cb0:	b0 70       	andi	r27, 0x00	; 0
     cb2:	80 34       	cpi	r24, 0x40	; 64
     cb4:	91 05       	cpc	r25, r1
     cb6:	a1 05       	cpc	r26, r1
     cb8:	b1 05       	cpc	r27, r1
     cba:	39 f4       	brne	.+14     	; 0xcca <__pack_f+0xee>
     cbc:	27 ff       	sbrs	r18, 7
     cbe:	09 c0       	rjmp	.+18     	; 0xcd2 <__pack_f+0xf6>
     cc0:	20 5c       	subi	r18, 0xC0	; 192
     cc2:	3f 4f       	sbci	r19, 0xFF	; 255
     cc4:	4f 4f       	sbci	r20, 0xFF	; 255
     cc6:	5f 4f       	sbci	r21, 0xFF	; 255
     cc8:	04 c0       	rjmp	.+8      	; 0xcd2 <__pack_f+0xf6>
     cca:	21 5c       	subi	r18, 0xC1	; 193
     ccc:	3f 4f       	sbci	r19, 0xFF	; 255
     cce:	4f 4f       	sbci	r20, 0xFF	; 255
     cd0:	5f 4f       	sbci	r21, 0xFF	; 255
     cd2:	e0 e0       	ldi	r30, 0x00	; 0
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	a0 e0       	ldi	r26, 0x00	; 0
     cda:	3a 07       	cpc	r19, r26
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	4a 07       	cpc	r20, r26
     ce0:	a0 e4       	ldi	r26, 0x40	; 64
     ce2:	5a 07       	cpc	r21, r26
     ce4:	10 f0       	brcs	.+4      	; 0xcea <__pack_f+0x10e>
     ce6:	e1 e0       	ldi	r30, 0x01	; 1
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	79 01       	movw	r14, r18
     cec:	8a 01       	movw	r16, r20
     cee:	27 c0       	rjmp	.+78     	; 0xd3e <__pack_f+0x162>
     cf0:	60 38       	cpi	r22, 0x80	; 128
     cf2:	71 05       	cpc	r23, r1
     cf4:	64 f5       	brge	.+88     	; 0xd4e <__pack_f+0x172>
     cf6:	fb 01       	movw	r30, r22
     cf8:	e1 58       	subi	r30, 0x81	; 129
     cfa:	ff 4f       	sbci	r31, 0xFF	; 255
     cfc:	d8 01       	movw	r26, r16
     cfe:	c7 01       	movw	r24, r14
     d00:	8f 77       	andi	r24, 0x7F	; 127
     d02:	90 70       	andi	r25, 0x00	; 0
     d04:	a0 70       	andi	r26, 0x00	; 0
     d06:	b0 70       	andi	r27, 0x00	; 0
     d08:	80 34       	cpi	r24, 0x40	; 64
     d0a:	91 05       	cpc	r25, r1
     d0c:	a1 05       	cpc	r26, r1
     d0e:	b1 05       	cpc	r27, r1
     d10:	39 f4       	brne	.+14     	; 0xd20 <__pack_f+0x144>
     d12:	e7 fe       	sbrs	r14, 7
     d14:	0d c0       	rjmp	.+26     	; 0xd30 <__pack_f+0x154>
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	a0 e0       	ldi	r26, 0x00	; 0
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	04 c0       	rjmp	.+8      	; 0xd28 <__pack_f+0x14c>
     d20:	8f e3       	ldi	r24, 0x3F	; 63
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	a0 e0       	ldi	r26, 0x00	; 0
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e8 0e       	add	r14, r24
     d2a:	f9 1e       	adc	r15, r25
     d2c:	0a 1f       	adc	r16, r26
     d2e:	1b 1f       	adc	r17, r27
     d30:	17 ff       	sbrs	r17, 7
     d32:	05 c0       	rjmp	.+10     	; 0xd3e <__pack_f+0x162>
     d34:	16 95       	lsr	r17
     d36:	07 95       	ror	r16
     d38:	f7 94       	ror	r15
     d3a:	e7 94       	ror	r14
     d3c:	31 96       	adiw	r30, 0x01	; 1
     d3e:	87 e0       	ldi	r24, 0x07	; 7
     d40:	16 95       	lsr	r17
     d42:	07 95       	ror	r16
     d44:	f7 94       	ror	r15
     d46:	e7 94       	ror	r14
     d48:	8a 95       	dec	r24
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__pack_f+0x164>
     d4c:	05 c0       	rjmp	.+10     	; 0xd58 <__pack_f+0x17c>
     d4e:	ee 24       	eor	r14, r14
     d50:	ff 24       	eor	r15, r15
     d52:	87 01       	movw	r16, r14
     d54:	ef ef       	ldi	r30, 0xFF	; 255
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	6e 2f       	mov	r22, r30
     d5a:	67 95       	ror	r22
     d5c:	66 27       	eor	r22, r22
     d5e:	67 95       	ror	r22
     d60:	90 2f       	mov	r25, r16
     d62:	9f 77       	andi	r25, 0x7F	; 127
     d64:	d7 94       	ror	r13
     d66:	dd 24       	eor	r13, r13
     d68:	d7 94       	ror	r13
     d6a:	8e 2f       	mov	r24, r30
     d6c:	86 95       	lsr	r24
     d6e:	49 2f       	mov	r20, r25
     d70:	46 2b       	or	r20, r22
     d72:	58 2f       	mov	r21, r24
     d74:	5d 29       	or	r21, r13
     d76:	b7 01       	movw	r22, r14
     d78:	ca 01       	movw	r24, r20
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
     d82:	df 90       	pop	r13
     d84:	08 95       	ret

00000d86 <__unpack_f>:
     d86:	fc 01       	movw	r30, r24
     d88:	db 01       	movw	r26, r22
     d8a:	40 81       	ld	r20, Z
     d8c:	51 81       	ldd	r21, Z+1	; 0x01
     d8e:	22 81       	ldd	r18, Z+2	; 0x02
     d90:	62 2f       	mov	r22, r18
     d92:	6f 77       	andi	r22, 0x7F	; 127
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	22 1f       	adc	r18, r18
     d98:	22 27       	eor	r18, r18
     d9a:	22 1f       	adc	r18, r18
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
     d9e:	89 2f       	mov	r24, r25
     da0:	88 0f       	add	r24, r24
     da2:	82 2b       	or	r24, r18
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	99 1f       	adc	r25, r25
     daa:	99 27       	eor	r25, r25
     dac:	99 1f       	adc	r25, r25
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	9c 93       	st	X, r25
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	21 15       	cp	r18, r1
     db6:	31 05       	cpc	r19, r1
     db8:	a9 f5       	brne	.+106    	; 0xe24 <__unpack_f+0x9e>
     dba:	41 15       	cp	r20, r1
     dbc:	51 05       	cpc	r21, r1
     dbe:	61 05       	cpc	r22, r1
     dc0:	71 05       	cpc	r23, r1
     dc2:	11 f4       	brne	.+4      	; 0xdc8 <__unpack_f+0x42>
     dc4:	82 e0       	ldi	r24, 0x02	; 2
     dc6:	37 c0       	rjmp	.+110    	; 0xe36 <__unpack_f+0xb0>
     dc8:	82 e8       	ldi	r24, 0x82	; 130
     dca:	9f ef       	ldi	r25, 0xFF	; 255
     dcc:	13 96       	adiw	r26, 0x03	; 3
     dce:	9c 93       	st	X, r25
     dd0:	8e 93       	st	-X, r24
     dd2:	12 97       	sbiw	r26, 0x02	; 2
     dd4:	9a 01       	movw	r18, r20
     dd6:	ab 01       	movw	r20, r22
     dd8:	67 e0       	ldi	r22, 0x07	; 7
     dda:	22 0f       	add	r18, r18
     ddc:	33 1f       	adc	r19, r19
     dde:	44 1f       	adc	r20, r20
     de0:	55 1f       	adc	r21, r21
     de2:	6a 95       	dec	r22
     de4:	d1 f7       	brne	.-12     	; 0xdda <__unpack_f+0x54>
     de6:	83 e0       	ldi	r24, 0x03	; 3
     de8:	8c 93       	st	X, r24
     dea:	0d c0       	rjmp	.+26     	; 0xe06 <__unpack_f+0x80>
     dec:	22 0f       	add	r18, r18
     dee:	33 1f       	adc	r19, r19
     df0:	44 1f       	adc	r20, r20
     df2:	55 1f       	adc	r21, r21
     df4:	12 96       	adiw	r26, 0x02	; 2
     df6:	8d 91       	ld	r24, X+
     df8:	9c 91       	ld	r25, X
     dfa:	13 97       	sbiw	r26, 0x03	; 3
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	13 96       	adiw	r26, 0x03	; 3
     e00:	9c 93       	st	X, r25
     e02:	8e 93       	st	-X, r24
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	20 30       	cpi	r18, 0x00	; 0
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	38 07       	cpc	r19, r24
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	48 07       	cpc	r20, r24
     e10:	80 e4       	ldi	r24, 0x40	; 64
     e12:	58 07       	cpc	r21, r24
     e14:	58 f3       	brcs	.-42     	; 0xdec <__unpack_f+0x66>
     e16:	14 96       	adiw	r26, 0x04	; 4
     e18:	2d 93       	st	X+, r18
     e1a:	3d 93       	st	X+, r19
     e1c:	4d 93       	st	X+, r20
     e1e:	5c 93       	st	X, r21
     e20:	17 97       	sbiw	r26, 0x07	; 7
     e22:	08 95       	ret
     e24:	2f 3f       	cpi	r18, 0xFF	; 255
     e26:	31 05       	cpc	r19, r1
     e28:	79 f4       	brne	.+30     	; 0xe48 <__unpack_f+0xc2>
     e2a:	41 15       	cp	r20, r1
     e2c:	51 05       	cpc	r21, r1
     e2e:	61 05       	cpc	r22, r1
     e30:	71 05       	cpc	r23, r1
     e32:	19 f4       	brne	.+6      	; 0xe3a <__unpack_f+0xb4>
     e34:	84 e0       	ldi	r24, 0x04	; 4
     e36:	8c 93       	st	X, r24
     e38:	08 95       	ret
     e3a:	64 ff       	sbrs	r22, 4
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <__unpack_f+0xbe>
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	8c 93       	st	X, r24
     e42:	12 c0       	rjmp	.+36     	; 0xe68 <__unpack_f+0xe2>
     e44:	1c 92       	st	X, r1
     e46:	10 c0       	rjmp	.+32     	; 0xe68 <__unpack_f+0xe2>
     e48:	2f 57       	subi	r18, 0x7F	; 127
     e4a:	30 40       	sbci	r19, 0x00	; 0
     e4c:	13 96       	adiw	r26, 0x03	; 3
     e4e:	3c 93       	st	X, r19
     e50:	2e 93       	st	-X, r18
     e52:	12 97       	sbiw	r26, 0x02	; 2
     e54:	83 e0       	ldi	r24, 0x03	; 3
     e56:	8c 93       	st	X, r24
     e58:	87 e0       	ldi	r24, 0x07	; 7
     e5a:	44 0f       	add	r20, r20
     e5c:	55 1f       	adc	r21, r21
     e5e:	66 1f       	adc	r22, r22
     e60:	77 1f       	adc	r23, r23
     e62:	8a 95       	dec	r24
     e64:	d1 f7       	brne	.-12     	; 0xe5a <__unpack_f+0xd4>
     e66:	70 64       	ori	r23, 0x40	; 64
     e68:	14 96       	adiw	r26, 0x04	; 4
     e6a:	4d 93       	st	X+, r20
     e6c:	5d 93       	st	X+, r21
     e6e:	6d 93       	st	X+, r22
     e70:	7c 93       	st	X, r23
     e72:	17 97       	sbiw	r26, 0x07	; 7
     e74:	08 95       	ret

00000e76 <__fpcmp_parts_f>:
     e76:	1f 93       	push	r17
     e78:	dc 01       	movw	r26, r24
     e7a:	fb 01       	movw	r30, r22
     e7c:	9c 91       	ld	r25, X
     e7e:	92 30       	cpi	r25, 0x02	; 2
     e80:	08 f4       	brcc	.+2      	; 0xe84 <__fpcmp_parts_f+0xe>
     e82:	47 c0       	rjmp	.+142    	; 0xf12 <__fpcmp_parts_f+0x9c>
     e84:	80 81       	ld	r24, Z
     e86:	82 30       	cpi	r24, 0x02	; 2
     e88:	08 f4       	brcc	.+2      	; 0xe8c <__fpcmp_parts_f+0x16>
     e8a:	43 c0       	rjmp	.+134    	; 0xf12 <__fpcmp_parts_f+0x9c>
     e8c:	94 30       	cpi	r25, 0x04	; 4
     e8e:	51 f4       	brne	.+20     	; 0xea4 <__fpcmp_parts_f+0x2e>
     e90:	11 96       	adiw	r26, 0x01	; 1
     e92:	1c 91       	ld	r17, X
     e94:	84 30       	cpi	r24, 0x04	; 4
     e96:	99 f5       	brne	.+102    	; 0xefe <__fpcmp_parts_f+0x88>
     e98:	81 81       	ldd	r24, Z+1	; 0x01
     e9a:	68 2f       	mov	r22, r24
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	61 1b       	sub	r22, r17
     ea0:	71 09       	sbc	r23, r1
     ea2:	3f c0       	rjmp	.+126    	; 0xf22 <__fpcmp_parts_f+0xac>
     ea4:	84 30       	cpi	r24, 0x04	; 4
     ea6:	21 f0       	breq	.+8      	; 0xeb0 <__fpcmp_parts_f+0x3a>
     ea8:	92 30       	cpi	r25, 0x02	; 2
     eaa:	31 f4       	brne	.+12     	; 0xeb8 <__fpcmp_parts_f+0x42>
     eac:	82 30       	cpi	r24, 0x02	; 2
     eae:	b9 f1       	breq	.+110    	; 0xf1e <__fpcmp_parts_f+0xa8>
     eb0:	81 81       	ldd	r24, Z+1	; 0x01
     eb2:	88 23       	and	r24, r24
     eb4:	89 f1       	breq	.+98     	; 0xf18 <__fpcmp_parts_f+0xa2>
     eb6:	2d c0       	rjmp	.+90     	; 0xf12 <__fpcmp_parts_f+0x9c>
     eb8:	11 96       	adiw	r26, 0x01	; 1
     eba:	1c 91       	ld	r17, X
     ebc:	11 97       	sbiw	r26, 0x01	; 1
     ebe:	82 30       	cpi	r24, 0x02	; 2
     ec0:	f1 f0       	breq	.+60     	; 0xefe <__fpcmp_parts_f+0x88>
     ec2:	81 81       	ldd	r24, Z+1	; 0x01
     ec4:	18 17       	cp	r17, r24
     ec6:	d9 f4       	brne	.+54     	; 0xefe <__fpcmp_parts_f+0x88>
     ec8:	12 96       	adiw	r26, 0x02	; 2
     eca:	2d 91       	ld	r18, X+
     ecc:	3c 91       	ld	r19, X
     ece:	13 97       	sbiw	r26, 0x03	; 3
     ed0:	82 81       	ldd	r24, Z+2	; 0x02
     ed2:	93 81       	ldd	r25, Z+3	; 0x03
     ed4:	82 17       	cp	r24, r18
     ed6:	93 07       	cpc	r25, r19
     ed8:	94 f0       	brlt	.+36     	; 0xefe <__fpcmp_parts_f+0x88>
     eda:	28 17       	cp	r18, r24
     edc:	39 07       	cpc	r19, r25
     ede:	bc f0       	brlt	.+46     	; 0xf0e <__fpcmp_parts_f+0x98>
     ee0:	14 96       	adiw	r26, 0x04	; 4
     ee2:	8d 91       	ld	r24, X+
     ee4:	9d 91       	ld	r25, X+
     ee6:	0d 90       	ld	r0, X+
     ee8:	bc 91       	ld	r27, X
     eea:	a0 2d       	mov	r26, r0
     eec:	24 81       	ldd	r18, Z+4	; 0x04
     eee:	35 81       	ldd	r19, Z+5	; 0x05
     ef0:	46 81       	ldd	r20, Z+6	; 0x06
     ef2:	57 81       	ldd	r21, Z+7	; 0x07
     ef4:	28 17       	cp	r18, r24
     ef6:	39 07       	cpc	r19, r25
     ef8:	4a 07       	cpc	r20, r26
     efa:	5b 07       	cpc	r21, r27
     efc:	18 f4       	brcc	.+6      	; 0xf04 <__fpcmp_parts_f+0x8e>
     efe:	11 23       	and	r17, r17
     f00:	41 f0       	breq	.+16     	; 0xf12 <__fpcmp_parts_f+0x9c>
     f02:	0a c0       	rjmp	.+20     	; 0xf18 <__fpcmp_parts_f+0xa2>
     f04:	82 17       	cp	r24, r18
     f06:	93 07       	cpc	r25, r19
     f08:	a4 07       	cpc	r26, r20
     f0a:	b5 07       	cpc	r27, r21
     f0c:	40 f4       	brcc	.+16     	; 0xf1e <__fpcmp_parts_f+0xa8>
     f0e:	11 23       	and	r17, r17
     f10:	19 f0       	breq	.+6      	; 0xf18 <__fpcmp_parts_f+0xa2>
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	05 c0       	rjmp	.+10     	; 0xf22 <__fpcmp_parts_f+0xac>
     f18:	6f ef       	ldi	r22, 0xFF	; 255
     f1a:	7f ef       	ldi	r23, 0xFF	; 255
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <__fpcmp_parts_f+0xac>
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	cb 01       	movw	r24, r22
     f24:	1f 91       	pop	r17
     f26:	08 95       	ret

00000f28 <__vector_1>:
/*
 * External Interrupts ISR
 */

ISR(INT0_vect)
{
     f28:	1f 92       	push	r1
     f2a:	0f 92       	push	r0
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	0f 92       	push	r0
     f30:	11 24       	eor	r1, r1
     f32:	2f 93       	push	r18
     f34:	3f 93       	push	r19
     f36:	4f 93       	push	r20
     f38:	5f 93       	push	r21
     f3a:	6f 93       	push	r22
     f3c:	7f 93       	push	r23
     f3e:	8f 93       	push	r24
     f40:	9f 93       	push	r25
     f42:	af 93       	push	r26
     f44:	bf 93       	push	r27
     f46:	ef 93       	push	r30
     f48:	ff 93       	push	r31
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
     f52:	80 91 80 01 	lds	r24, 0x0180
     f56:	90 91 81 01 	lds	r25, 0x0181
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	29 f0       	breq	.+10     	; 0xf68 <__vector_1+0x40>
	{
		(*g_callBackPtr0)();
     f5e:	e0 91 80 01 	lds	r30, 0x0180
     f62:	f0 91 81 01 	lds	r31, 0x0181
     f66:	09 95       	icall
	}

}
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	ff 91       	pop	r31
     f6e:	ef 91       	pop	r30
     f70:	bf 91       	pop	r27
     f72:	af 91       	pop	r26
     f74:	9f 91       	pop	r25
     f76:	8f 91       	pop	r24
     f78:	7f 91       	pop	r23
     f7a:	6f 91       	pop	r22
     f7c:	5f 91       	pop	r21
     f7e:	4f 91       	pop	r20
     f80:	3f 91       	pop	r19
     f82:	2f 91       	pop	r18
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti

00000f8e <__vector_2>:

ISR(INT1_vect)
{
     f8e:	1f 92       	push	r1
     f90:	0f 92       	push	r0
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	0f 92       	push	r0
     f96:	11 24       	eor	r1, r1
     f98:	2f 93       	push	r18
     f9a:	3f 93       	push	r19
     f9c:	4f 93       	push	r20
     f9e:	5f 93       	push	r21
     fa0:	6f 93       	push	r22
     fa2:	7f 93       	push	r23
     fa4:	8f 93       	push	r24
     fa6:	9f 93       	push	r25
     fa8:	af 93       	push	r26
     faa:	bf 93       	push	r27
     fac:	ef 93       	push	r30
     fae:	ff 93       	push	r31
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
     fb8:	80 91 82 01 	lds	r24, 0x0182
     fbc:	90 91 83 01 	lds	r25, 0x0183
     fc0:	00 97       	sbiw	r24, 0x00	; 0
     fc2:	29 f0       	breq	.+10     	; 0xfce <__vector_2+0x40>
	{
		(*g_callBackPtr1)();
     fc4:	e0 91 82 01 	lds	r30, 0x0182
     fc8:	f0 91 83 01 	lds	r31, 0x0183
     fcc:	09 95       	icall
	}

}
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	ff 91       	pop	r31
     fd4:	ef 91       	pop	r30
     fd6:	bf 91       	pop	r27
     fd8:	af 91       	pop	r26
     fda:	9f 91       	pop	r25
     fdc:	8f 91       	pop	r24
     fde:	7f 91       	pop	r23
     fe0:	6f 91       	pop	r22
     fe2:	5f 91       	pop	r21
     fe4:	4f 91       	pop	r20
     fe6:	3f 91       	pop	r19
     fe8:	2f 91       	pop	r18
     fea:	0f 90       	pop	r0
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	0f 90       	pop	r0
     ff0:	1f 90       	pop	r1
     ff2:	18 95       	reti

00000ff4 <__vector_3>:

ISR(INT2_vect)
{
     ff4:	1f 92       	push	r1
     ff6:	0f 92       	push	r0
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	0f 92       	push	r0
     ffc:	11 24       	eor	r1, r1
     ffe:	2f 93       	push	r18
    1000:	3f 93       	push	r19
    1002:	4f 93       	push	r20
    1004:	5f 93       	push	r21
    1006:	6f 93       	push	r22
    1008:	7f 93       	push	r23
    100a:	8f 93       	push	r24
    100c:	9f 93       	push	r25
    100e:	af 93       	push	r26
    1010:	bf 93       	push	r27
    1012:	ef 93       	push	r30
    1014:	ff 93       	push	r31
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    101e:	80 91 84 01 	lds	r24, 0x0184
    1022:	90 91 85 01 	lds	r25, 0x0185
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	29 f0       	breq	.+10     	; 0x1034 <__vector_3+0x40>
	{
		(*g_callBackPtr2)();
    102a:	e0 91 84 01 	lds	r30, 0x0184
    102e:	f0 91 85 01 	lds	r31, 0x0185
    1032:	09 95       	icall
	}

}
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	ff 91       	pop	r31
    103a:	ef 91       	pop	r30
    103c:	bf 91       	pop	r27
    103e:	af 91       	pop	r26
    1040:	9f 91       	pop	r25
    1042:	8f 91       	pop	r24
    1044:	7f 91       	pop	r23
    1046:	6f 91       	pop	r22
    1048:	5f 91       	pop	r21
    104a:	4f 91       	pop	r20
    104c:	3f 91       	pop	r19
    104e:	2f 91       	pop	r18
    1050:	0f 90       	pop	r0
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	0f 90       	pop	r0
    1056:	1f 90       	pop	r1
    1058:	18 95       	reti

0000105a <Ex_INT_init>:

void Ex_INT_init(const Ex_INT_ConfigType *Config_Ptr)
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	28 97       	sbiw	r28, 0x08	; 8
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	f8 94       	cli
    1068:	de bf       	out	0x3e, r29	; 62
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	cd bf       	out	0x3d, r28	; 61
    106e:	9a 83       	std	Y+2, r25	; 0x02
    1070:	89 83       	std	Y+1, r24	; 0x01

	switch (Config_Ptr->INT)
    1072:	e9 81       	ldd	r30, Y+1	; 0x01
    1074:	fa 81       	ldd	r31, Y+2	; 0x02
    1076:	80 81       	ld	r24, Z
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	38 87       	std	Y+8, r19	; 0x08
    107e:	2f 83       	std	Y+7, r18	; 0x07
    1080:	8f 81       	ldd	r24, Y+7	; 0x07
    1082:	98 85       	ldd	r25, Y+8	; 0x08
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	91 05       	cpc	r25, r1
    1088:	09 f4       	brne	.+2      	; 0x108c <Ex_INT_init+0x32>
    108a:	84 c0       	rjmp	.+264    	; 0x1194 <Ex_INT_init+0x13a>
    108c:	2f 81       	ldd	r18, Y+7	; 0x07
    108e:	38 85       	ldd	r19, Y+8	; 0x08
    1090:	22 30       	cpi	r18, 0x02	; 2
    1092:	31 05       	cpc	r19, r1
    1094:	09 f4       	brne	.+2      	; 0x1098 <Ex_INT_init+0x3e>
    1096:	f7 c0       	rjmp	.+494    	; 0x1286 <Ex_INT_init+0x22c>
    1098:	8f 81       	ldd	r24, Y+7	; 0x07
    109a:	98 85       	ldd	r25, Y+8	; 0x08
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	09 f0       	breq	.+2      	; 0x10a2 <Ex_INT_init+0x48>
    10a0:	0e c1       	rjmp	.+540    	; 0x12be <Ex_INT_init+0x264>

		/*
		 * Setup Pin direction
		 * Enable External Interrupt 0
		 */
		GPIO_setupPinDirection(EX_INT0_PORT_ID, EX_INT0_PORT_ID, PIN_INPUT);
    10a2:	83 e0       	ldi	r24, 0x03	; 3
    10a4:	63 e0       	ldi	r22, 0x03	; 3
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
		SET_BIT(GICR,INT0);
    10ac:	ab e5       	ldi	r26, 0x5B	; 91
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	eb e5       	ldi	r30, 0x5B	; 91
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	80 64       	ori	r24, 0x40	; 64
    10b8:	8c 93       	st	X, r24


		/*
		 * Select Pin state (Flow or Full up)
		 */
		if((Config_Ptr->PIN)==PULLUP_EX_INT_PIN)
    10ba:	e9 81       	ldd	r30, Y+1	; 0x01
    10bc:	fa 81       	ldd	r31, Y+2	; 0x02
    10be:	82 81       	ldd	r24, Z+2	; 0x02
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	31 f4       	brne	.+12     	; 0x10d0 <Ex_INT_init+0x76>
		{
			GPIO_writePin(EX_INT0_PORT_ID, EX_INT0_PORT_ID, LOGIC_HIGH);
    10c4:	83 e0       	ldi	r24, 0x03	; 3
    10c6:	63 e0       	ldi	r22, 0x03	; 3
    10c8:	41 e0       	ldi	r20, 0x01	; 1
    10ca:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    10ce:	05 c0       	rjmp	.+10     	; 0x10da <Ex_INT_init+0x80>
		}
		else
		{
			GPIO_writePin(EX_INT0_PORT_ID, EX_INT0_PORT_ID, LOGIC_LOW);
    10d0:	83 e0       	ldi	r24, 0x03	; 3
    10d2:	63 e0       	ldi	r22, 0x03	; 3
    10d4:	40 e0       	ldi	r20, 0x00	; 0
    10d6:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
		}


		switch (Config_Ptr->option)
    10da:	e9 81       	ldd	r30, Y+1	; 0x01
    10dc:	fa 81       	ldd	r31, Y+2	; 0x02
    10de:	81 81       	ldd	r24, Z+1	; 0x01
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	3e 83       	std	Y+6, r19	; 0x06
    10e6:	2d 83       	std	Y+5, r18	; 0x05
    10e8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ea:	9e 81       	ldd	r25, Y+6	; 0x06
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	91 05       	cpc	r25, r1
    10f0:	21 f1       	breq	.+72     	; 0x113a <Ex_INT_init+0xe0>
    10f2:	2d 81       	ldd	r18, Y+5	; 0x05
    10f4:	3e 81       	ldd	r19, Y+6	; 0x06
    10f6:	22 30       	cpi	r18, 0x02	; 2
    10f8:	31 05       	cpc	r19, r1
    10fa:	2c f4       	brge	.+10     	; 0x1106 <Ex_INT_init+0xac>
    10fc:	8d 81       	ldd	r24, Y+5	; 0x05
    10fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	61 f0       	breq	.+24     	; 0x111c <Ex_INT_init+0xc2>
    1104:	dc c0       	rjmp	.+440    	; 0x12be <Ex_INT_init+0x264>
    1106:	2d 81       	ldd	r18, Y+5	; 0x05
    1108:	3e 81       	ldd	r19, Y+6	; 0x06
    110a:	22 30       	cpi	r18, 0x02	; 2
    110c:	31 05       	cpc	r19, r1
    110e:	21 f1       	breq	.+72     	; 0x1158 <Ex_INT_init+0xfe>
    1110:	8d 81       	ldd	r24, Y+5	; 0x05
    1112:	9e 81       	ldd	r25, Y+6	; 0x06
    1114:	83 30       	cpi	r24, 0x03	; 3
    1116:	91 05       	cpc	r25, r1
    1118:	71 f1       	breq	.+92     	; 0x1176 <Ex_INT_init+0x11c>
    111a:	d1 c0       	rjmp	.+418    	; 0x12be <Ex_INT_init+0x264>
		{
		case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC00);
    111c:	a5 e5       	ldi	r26, 0x55	; 85
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e5 e5       	ldi	r30, 0x55	; 85
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	8e 7f       	andi	r24, 0xFE	; 254
    1128:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC01);
    112a:	a5 e5       	ldi	r26, 0x55	; 85
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e5 e5       	ldi	r30, 0x55	; 85
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	8d 7f       	andi	r24, 0xFD	; 253
    1136:	8c 93       	st	X, r24
    1138:	c2 c0       	rjmp	.+388    	; 0x12be <Ex_INT_init+0x264>
			break;

		case ANY_LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC00);
    113a:	a5 e5       	ldi	r26, 0x55	; 85
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e5 e5       	ldi	r30, 0x55	; 85
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	81 60       	ori	r24, 0x01	; 1
    1146:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC01);
    1148:	a5 e5       	ldi	r26, 0x55	; 85
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e5 e5       	ldi	r30, 0x55	; 85
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	8d 7f       	andi	r24, 0xFD	; 253
    1154:	8c 93       	st	X, r24
    1156:	b3 c0       	rjmp	.+358    	; 0x12be <Ex_INT_init+0x264>
			break;
		case FALLING_EDGE:
			SET_BIT(MCUCR,ISC01);
    1158:	a5 e5       	ldi	r26, 0x55	; 85
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e5 e5       	ldi	r30, 0x55	; 85
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	82 60       	ori	r24, 0x02	; 2
    1164:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC00);
    1166:	a5 e5       	ldi	r26, 0x55	; 85
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e5 e5       	ldi	r30, 0x55	; 85
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	8e 7f       	andi	r24, 0xFE	; 254
    1172:	8c 93       	st	X, r24
    1174:	a4 c0       	rjmp	.+328    	; 0x12be <Ex_INT_init+0x264>
			break;
		case RAISING_EDGE:
			SET_BIT(MCUCR,ISC01);
    1176:	a5 e5       	ldi	r26, 0x55	; 85
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e5 e5       	ldi	r30, 0x55	; 85
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	82 60       	ori	r24, 0x02	; 2
    1182:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC00);
    1184:	a5 e5       	ldi	r26, 0x55	; 85
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e5 e5       	ldi	r30, 0x55	; 85
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	81 60       	ori	r24, 0x01	; 1
    1190:	8c 93       	st	X, r24
    1192:	95 c0       	rjmp	.+298    	; 0x12be <Ex_INT_init+0x264>
		case EX_INT1:
			/*
			 * Setup Pin direction
			 * Enable External Interrupt 1
			 */
			GPIO_setupPinDirection(EX_INT1_PORT_ID, EX_INT1_PORT_ID, PIN_INPUT);
    1194:	83 e0       	ldi	r24, 0x03	; 3
    1196:	63 e0       	ldi	r22, 0x03	; 3
    1198:	40 e0       	ldi	r20, 0x00	; 0
    119a:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
			SET_BIT(GICR,INT1);
    119e:	ab e5       	ldi	r26, 0x5B	; 91
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	eb e5       	ldi	r30, 0x5B	; 91
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	80 68       	ori	r24, 0x80	; 128
    11aa:	8c 93       	st	X, r24


			/*
			 * Select Pin state (Flow or Full up)
			 */
			if((Config_Ptr->PIN)==PULLUP_EX_INT_PIN)
    11ac:	e9 81       	ldd	r30, Y+1	; 0x01
    11ae:	fa 81       	ldd	r31, Y+2	; 0x02
    11b0:	82 81       	ldd	r24, Z+2	; 0x02
    11b2:	81 30       	cpi	r24, 0x01	; 1
    11b4:	31 f4       	brne	.+12     	; 0x11c2 <Ex_INT_init+0x168>
			{
				GPIO_writePin(EX_INT1_PORT_ID, EX_INT1_PORT_ID, LOGIC_HIGH);
    11b6:	83 e0       	ldi	r24, 0x03	; 3
    11b8:	63 e0       	ldi	r22, 0x03	; 3
    11ba:	41 e0       	ldi	r20, 0x01	; 1
    11bc:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    11c0:	05 c0       	rjmp	.+10     	; 0x11cc <Ex_INT_init+0x172>
			}
			else
			{
				GPIO_writePin(EX_INT1_PORT_ID, EX_INT1_PORT_ID, LOGIC_LOW);
    11c2:	83 e0       	ldi	r24, 0x03	; 3
    11c4:	63 e0       	ldi	r22, 0x03	; 3
    11c6:	40 e0       	ldi	r20, 0x00	; 0
    11c8:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
			}

			switch (Config_Ptr->option)
    11cc:	e9 81       	ldd	r30, Y+1	; 0x01
    11ce:	fa 81       	ldd	r31, Y+2	; 0x02
    11d0:	81 81       	ldd	r24, Z+1	; 0x01
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	3c 83       	std	Y+4, r19	; 0x04
    11d8:	2b 83       	std	Y+3, r18	; 0x03
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	9c 81       	ldd	r25, Y+4	; 0x04
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	91 05       	cpc	r25, r1
    11e2:	21 f1       	breq	.+72     	; 0x122c <Ex_INT_init+0x1d2>
    11e4:	2b 81       	ldd	r18, Y+3	; 0x03
    11e6:	3c 81       	ldd	r19, Y+4	; 0x04
    11e8:	22 30       	cpi	r18, 0x02	; 2
    11ea:	31 05       	cpc	r19, r1
    11ec:	2c f4       	brge	.+10     	; 0x11f8 <Ex_INT_init+0x19e>
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	9c 81       	ldd	r25, Y+4	; 0x04
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	61 f0       	breq	.+24     	; 0x120e <Ex_INT_init+0x1b4>
    11f6:	63 c0       	rjmp	.+198    	; 0x12be <Ex_INT_init+0x264>
    11f8:	2b 81       	ldd	r18, Y+3	; 0x03
    11fa:	3c 81       	ldd	r19, Y+4	; 0x04
    11fc:	22 30       	cpi	r18, 0x02	; 2
    11fe:	31 05       	cpc	r19, r1
    1200:	21 f1       	breq	.+72     	; 0x124a <Ex_INT_init+0x1f0>
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	9c 81       	ldd	r25, Y+4	; 0x04
    1206:	83 30       	cpi	r24, 0x03	; 3
    1208:	91 05       	cpc	r25, r1
    120a:	71 f1       	breq	.+92     	; 0x1268 <Ex_INT_init+0x20e>
    120c:	58 c0       	rjmp	.+176    	; 0x12be <Ex_INT_init+0x264>
			{
			case LOW_LEVEL:
				CLEAR_BIT(MCUCR,ISC10);
    120e:	a5 e5       	ldi	r26, 0x55	; 85
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e5 e5       	ldi	r30, 0x55	; 85
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	8b 7f       	andi	r24, 0xFB	; 251
    121a:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR,ISC11);
    121c:	a5 e5       	ldi	r26, 0x55	; 85
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e5 e5       	ldi	r30, 0x55	; 85
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	87 7f       	andi	r24, 0xF7	; 247
    1228:	8c 93       	st	X, r24
    122a:	49 c0       	rjmp	.+146    	; 0x12be <Ex_INT_init+0x264>
				break;

			case ANY_LOGICAL_CHANGE:
				SET_BIT(MCUCR,ISC10);
    122c:	a5 e5       	ldi	r26, 0x55	; 85
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e5 e5       	ldi	r30, 0x55	; 85
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	84 60       	ori	r24, 0x04	; 4
    1238:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR,ISC11);
    123a:	a5 e5       	ldi	r26, 0x55	; 85
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e5 e5       	ldi	r30, 0x55	; 85
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	87 7f       	andi	r24, 0xF7	; 247
    1246:	8c 93       	st	X, r24
    1248:	3a c0       	rjmp	.+116    	; 0x12be <Ex_INT_init+0x264>
				break;
			case FALLING_EDGE:
				SET_BIT(MCUCR,ISC11);
    124a:	a5 e5       	ldi	r26, 0x55	; 85
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e5 e5       	ldi	r30, 0x55	; 85
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	88 60       	ori	r24, 0x08	; 8
    1256:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR,ISC10);
    1258:	a5 e5       	ldi	r26, 0x55	; 85
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e5 e5       	ldi	r30, 0x55	; 85
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	8b 7f       	andi	r24, 0xFB	; 251
    1264:	8c 93       	st	X, r24
    1266:	2b c0       	rjmp	.+86     	; 0x12be <Ex_INT_init+0x264>
				break;
			case RAISING_EDGE:
				SET_BIT(MCUCR,ISC10);
    1268:	a5 e5       	ldi	r26, 0x55	; 85
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e5 e5       	ldi	r30, 0x55	; 85
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	84 60       	ori	r24, 0x04	; 4
    1274:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    1276:	a5 e5       	ldi	r26, 0x55	; 85
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e5 e5       	ldi	r30, 0x55	; 85
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	88 60       	ori	r24, 0x08	; 8
    1282:	8c 93       	st	X, r24
    1284:	1c c0       	rjmp	.+56     	; 0x12be <Ex_INT_init+0x264>

				/*
				 * Setup Pin direction
				 * Enable External Interrupt 2
				 */
				GPIO_setupPinDirection(EX_INT2_PORT_ID, EX_INT2_PORT_ID, PIN_INPUT);
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	61 e0       	ldi	r22, 0x01	; 1
    128a:	40 e0       	ldi	r20, 0x00	; 0
    128c:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
				SET_BIT(GICR,INT2);
    1290:	ab e5       	ldi	r26, 0x5B	; 91
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	eb e5       	ldi	r30, 0x5B	; 91
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	80 62       	ori	r24, 0x20	; 32
    129c:	8c 93       	st	X, r24


				/*
				 * Select Pin state (Flow or Full up)
				 */
				if((Config_Ptr->PIN)==PULLUP_EX_INT_PIN)
    129e:	e9 81       	ldd	r30, Y+1	; 0x01
    12a0:	fa 81       	ldd	r31, Y+2	; 0x02
    12a2:	82 81       	ldd	r24, Z+2	; 0x02
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	31 f4       	brne	.+12     	; 0x12b4 <Ex_INT_init+0x25a>
				{
					GPIO_writePin(EX_INT2_PORT_ID, EX_INT2_PORT_ID, LOGIC_HIGH);
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	61 e0       	ldi	r22, 0x01	; 1
    12ac:	41 e0       	ldi	r20, 0x01	; 1
    12ae:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    12b2:	05 c0       	rjmp	.+10     	; 0x12be <Ex_INT_init+0x264>
				}
				else
				{
					GPIO_writePin(EX_INT2_PORT_ID, EX_INT2_PORT_ID, LOGIC_LOW);
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	61 e0       	ldi	r22, 0x01	; 1
    12b8:	40 e0       	ldi	r20, 0x00	; 0
    12ba:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
				case RAISING_EDGE:
					SET_BIT(MCUCSR,ISC2);
					break;
				}
	}
}
    12be:	28 96       	adiw	r28, 0x08	; 8
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	cd bf       	out	0x3d, r28	; 61
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	08 95       	ret

000012d0 <INT0_setCallBack>:

/*
 * External Interrupts call back functions
 */
void INT0_setCallBack(void(*a_ptr)(void))
{
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <INT0_setCallBack+0x6>
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	9a 83       	std	Y+2, r25	; 0x02
    12dc:	89 83       	std	Y+1, r24	; 0x01

	g_callBackPtr0=a_ptr;
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	9a 81       	ldd	r25, Y+2	; 0x02
    12e2:	90 93 81 01 	sts	0x0181, r25
    12e6:	80 93 80 01 	sts	0x0180, r24
}
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <INT1_setCallBack>:


void INT1_setCallBack(void(*a_ptr)(void))
{
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <INT1_setCallBack+0x6>
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	9a 83       	std	Y+2, r25	; 0x02
    1300:	89 83       	std	Y+1, r24	; 0x01

	g_callBackPtr1=a_ptr;
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	9a 81       	ldd	r25, Y+2	; 0x02
    1306:	90 93 83 01 	sts	0x0183, r25
    130a:	80 93 82 01 	sts	0x0182, r24
}
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <INT2_setCallBack>:


void INT2_setCallBack(void(*a_ptr)(void))
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	00 d0       	rcall	.+0      	; 0x131e <INT2_setCallBack+0x6>
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	9a 83       	std	Y+2, r25	; 0x02
    1324:	89 83       	std	Y+1, r24	; 0x01

	g_callBackPtr2=a_ptr;
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	9a 81       	ldd	r25, Y+2	; 0x02
    132a:	90 93 85 01 	sts	0x0185, r25
    132e:	80 93 84 01 	sts	0x0184, r24
}
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	00 d0       	rcall	.+0      	; 0x1342 <GPIO_setupPinDirection+0x6>
    1342:	00 d0       	rcall	.+0      	; 0x1344 <GPIO_setupPinDirection+0x8>
    1344:	0f 92       	push	r0
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    134a:	89 83       	std	Y+1, r24	; 0x01
    134c:	6a 83       	std	Y+2, r22	; 0x02
    134e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	88 30       	cpi	r24, 0x08	; 8
    1354:	08 f0       	brcs	.+2      	; 0x1358 <GPIO_setupPinDirection+0x1c>
    1356:	d5 c0       	rjmp	.+426    	; 0x1502 <GPIO_setupPinDirection+0x1c6>
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	84 30       	cpi	r24, 0x04	; 4
    135c:	08 f0       	brcs	.+2      	; 0x1360 <GPIO_setupPinDirection+0x24>
    135e:	d1 c0       	rjmp	.+418    	; 0x1502 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	3d 83       	std	Y+5, r19	; 0x05
    1368:	2c 83       	std	Y+4, r18	; 0x04
    136a:	8c 81       	ldd	r24, Y+4	; 0x04
    136c:	9d 81       	ldd	r25, Y+5	; 0x05
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	91 05       	cpc	r25, r1
    1372:	09 f4       	brne	.+2      	; 0x1376 <GPIO_setupPinDirection+0x3a>
    1374:	43 c0       	rjmp	.+134    	; 0x13fc <GPIO_setupPinDirection+0xc0>
    1376:	2c 81       	ldd	r18, Y+4	; 0x04
    1378:	3d 81       	ldd	r19, Y+5	; 0x05
    137a:	22 30       	cpi	r18, 0x02	; 2
    137c:	31 05       	cpc	r19, r1
    137e:	2c f4       	brge	.+10     	; 0x138a <GPIO_setupPinDirection+0x4e>
    1380:	8c 81       	ldd	r24, Y+4	; 0x04
    1382:	9d 81       	ldd	r25, Y+5	; 0x05
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	71 f0       	breq	.+28     	; 0x13a4 <GPIO_setupPinDirection+0x68>
    1388:	bc c0       	rjmp	.+376    	; 0x1502 <GPIO_setupPinDirection+0x1c6>
    138a:	2c 81       	ldd	r18, Y+4	; 0x04
    138c:	3d 81       	ldd	r19, Y+5	; 0x05
    138e:	22 30       	cpi	r18, 0x02	; 2
    1390:	31 05       	cpc	r19, r1
    1392:	09 f4       	brne	.+2      	; 0x1396 <GPIO_setupPinDirection+0x5a>
    1394:	5f c0       	rjmp	.+190    	; 0x1454 <GPIO_setupPinDirection+0x118>
    1396:	8c 81       	ldd	r24, Y+4	; 0x04
    1398:	9d 81       	ldd	r25, Y+5	; 0x05
    139a:	83 30       	cpi	r24, 0x03	; 3
    139c:	91 05       	cpc	r25, r1
    139e:	09 f4       	brne	.+2      	; 0x13a2 <GPIO_setupPinDirection+0x66>
    13a0:	85 c0       	rjmp	.+266    	; 0x14ac <GPIO_setupPinDirection+0x170>
    13a2:	af c0       	rjmp	.+350    	; 0x1502 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	81 30       	cpi	r24, 0x01	; 1
    13a8:	a1 f4       	brne	.+40     	; 0x13d2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    13aa:	aa e3       	ldi	r26, 0x3A	; 58
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	ea e3       	ldi	r30, 0x3A	; 58
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	48 2f       	mov	r20, r24
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	02 2e       	mov	r0, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <GPIO_setupPinDirection+0x8c>
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	0a 94       	dec	r0
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <GPIO_setupPinDirection+0x88>
    13cc:	84 2b       	or	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	98 c0       	rjmp	.+304    	; 0x1502 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    13d2:	aa e3       	ldi	r26, 0x3A	; 58
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	ea e3       	ldi	r30, 0x3A	; 58
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <GPIO_setupPinDirection+0xb4>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <GPIO_setupPinDirection+0xb0>
    13f4:	80 95       	com	r24
    13f6:	84 23       	and	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	83 c0       	rjmp	.+262    	; 0x1502 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	81 30       	cpi	r24, 0x01	; 1
    1400:	a1 f4       	brne	.+40     	; 0x142a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1402:	a7 e3       	ldi	r26, 0x37	; 55
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e7 e3       	ldi	r30, 0x37	; 55
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	48 2f       	mov	r20, r24
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <GPIO_setupPinDirection+0xe4>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <GPIO_setupPinDirection+0xe0>
    1424:	84 2b       	or	r24, r20
    1426:	8c 93       	st	X, r24
    1428:	6c c0       	rjmp	.+216    	; 0x1502 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    142a:	a7 e3       	ldi	r26, 0x37	; 55
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e7 e3       	ldi	r30, 0x37	; 55
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	48 2f       	mov	r20, r24
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	02 2e       	mov	r0, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <GPIO_setupPinDirection+0x10c>
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	0a 94       	dec	r0
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <GPIO_setupPinDirection+0x108>
    144c:	80 95       	com	r24
    144e:	84 23       	and	r24, r20
    1450:	8c 93       	st	X, r24
    1452:	57 c0       	rjmp	.+174    	; 0x1502 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	81 30       	cpi	r24, 0x01	; 1
    1458:	a1 f4       	brne	.+40     	; 0x1482 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    145a:	a4 e3       	ldi	r26, 0x34	; 52
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e4 e3       	ldi	r30, 0x34	; 52
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	48 2f       	mov	r20, r24
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	02 2e       	mov	r0, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <GPIO_setupPinDirection+0x13c>
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	0a 94       	dec	r0
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <GPIO_setupPinDirection+0x138>
    147c:	84 2b       	or	r24, r20
    147e:	8c 93       	st	X, r24
    1480:	40 c0       	rjmp	.+128    	; 0x1502 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1482:	a4 e3       	ldi	r26, 0x34	; 52
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e4 e3       	ldi	r30, 0x34	; 52
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	48 2f       	mov	r20, r24
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 2e       	mov	r0, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <GPIO_setupPinDirection+0x164>
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	0a 94       	dec	r0
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <GPIO_setupPinDirection+0x160>
    14a4:	80 95       	com	r24
    14a6:	84 23       	and	r24, r20
    14a8:	8c 93       	st	X, r24
    14aa:	2b c0       	rjmp	.+86     	; 0x1502 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	81 30       	cpi	r24, 0x01	; 1
    14b0:	a1 f4       	brne	.+40     	; 0x14da <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    14b2:	a1 e3       	ldi	r26, 0x31	; 49
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e1 e3       	ldi	r30, 0x31	; 49
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	48 2f       	mov	r20, r24
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	02 2e       	mov	r0, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <GPIO_setupPinDirection+0x194>
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	0a 94       	dec	r0
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <GPIO_setupPinDirection+0x190>
    14d4:	84 2b       	or	r24, r20
    14d6:	8c 93       	st	X, r24
    14d8:	14 c0       	rjmp	.+40     	; 0x1502 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    14da:	a1 e3       	ldi	r26, 0x31	; 49
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e1 e3       	ldi	r30, 0x31	; 49
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	48 2f       	mov	r20, r24
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	02 2e       	mov	r0, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <GPIO_setupPinDirection+0x1bc>
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	0a 94       	dec	r0
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <GPIO_setupPinDirection+0x1b8>
    14fc:	80 95       	com	r24
    14fe:	84 23       	and	r24, r20
    1500:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	00 d0       	rcall	.+0      	; 0x1518 <GPIO_writePin+0x6>
    1518:	00 d0       	rcall	.+0      	; 0x151a <GPIO_writePin+0x8>
    151a:	0f 92       	push	r0
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	89 83       	std	Y+1, r24	; 0x01
    1522:	6a 83       	std	Y+2, r22	; 0x02
    1524:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	88 30       	cpi	r24, 0x08	; 8
    152a:	08 f0       	brcs	.+2      	; 0x152e <GPIO_writePin+0x1c>
    152c:	d5 c0       	rjmp	.+426    	; 0x16d8 <GPIO_writePin+0x1c6>
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	84 30       	cpi	r24, 0x04	; 4
    1532:	08 f0       	brcs	.+2      	; 0x1536 <GPIO_writePin+0x24>
    1534:	d1 c0       	rjmp	.+418    	; 0x16d8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	3d 83       	std	Y+5, r19	; 0x05
    153e:	2c 83       	std	Y+4, r18	; 0x04
    1540:	8c 81       	ldd	r24, Y+4	; 0x04
    1542:	9d 81       	ldd	r25, Y+5	; 0x05
    1544:	81 30       	cpi	r24, 0x01	; 1
    1546:	91 05       	cpc	r25, r1
    1548:	09 f4       	brne	.+2      	; 0x154c <GPIO_writePin+0x3a>
    154a:	43 c0       	rjmp	.+134    	; 0x15d2 <GPIO_writePin+0xc0>
    154c:	2c 81       	ldd	r18, Y+4	; 0x04
    154e:	3d 81       	ldd	r19, Y+5	; 0x05
    1550:	22 30       	cpi	r18, 0x02	; 2
    1552:	31 05       	cpc	r19, r1
    1554:	2c f4       	brge	.+10     	; 0x1560 <GPIO_writePin+0x4e>
    1556:	8c 81       	ldd	r24, Y+4	; 0x04
    1558:	9d 81       	ldd	r25, Y+5	; 0x05
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	71 f0       	breq	.+28     	; 0x157a <GPIO_writePin+0x68>
    155e:	bc c0       	rjmp	.+376    	; 0x16d8 <GPIO_writePin+0x1c6>
    1560:	2c 81       	ldd	r18, Y+4	; 0x04
    1562:	3d 81       	ldd	r19, Y+5	; 0x05
    1564:	22 30       	cpi	r18, 0x02	; 2
    1566:	31 05       	cpc	r19, r1
    1568:	09 f4       	brne	.+2      	; 0x156c <GPIO_writePin+0x5a>
    156a:	5f c0       	rjmp	.+190    	; 0x162a <GPIO_writePin+0x118>
    156c:	8c 81       	ldd	r24, Y+4	; 0x04
    156e:	9d 81       	ldd	r25, Y+5	; 0x05
    1570:	83 30       	cpi	r24, 0x03	; 3
    1572:	91 05       	cpc	r25, r1
    1574:	09 f4       	brne	.+2      	; 0x1578 <GPIO_writePin+0x66>
    1576:	85 c0       	rjmp	.+266    	; 0x1682 <GPIO_writePin+0x170>
    1578:	af c0       	rjmp	.+350    	; 0x16d8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	81 30       	cpi	r24, 0x01	; 1
    157e:	a1 f4       	brne	.+40     	; 0x15a8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1580:	ab e3       	ldi	r26, 0x3B	; 59
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	eb e3       	ldi	r30, 0x3B	; 59
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	48 2f       	mov	r20, r24
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	02 2e       	mov	r0, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <GPIO_writePin+0x8c>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	0a 94       	dec	r0
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <GPIO_writePin+0x88>
    15a2:	84 2b       	or	r24, r20
    15a4:	8c 93       	st	X, r24
    15a6:	98 c0       	rjmp	.+304    	; 0x16d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    15a8:	ab e3       	ldi	r26, 0x3B	; 59
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	eb e3       	ldi	r30, 0x3B	; 59
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <GPIO_writePin+0xb4>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <GPIO_writePin+0xb0>
    15ca:	80 95       	com	r24
    15cc:	84 23       	and	r24, r20
    15ce:	8c 93       	st	X, r24
    15d0:	83 c0       	rjmp	.+262    	; 0x16d8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	a1 f4       	brne	.+40     	; 0x1600 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    15d8:	a8 e3       	ldi	r26, 0x38	; 56
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e8 e3       	ldi	r30, 0x38	; 56
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	48 2f       	mov	r20, r24
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	02 2e       	mov	r0, r18
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <GPIO_writePin+0xe4>
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	0a 94       	dec	r0
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <GPIO_writePin+0xe0>
    15fa:	84 2b       	or	r24, r20
    15fc:	8c 93       	st	X, r24
    15fe:	6c c0       	rjmp	.+216    	; 0x16d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1600:	a8 e3       	ldi	r26, 0x38	; 56
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e8 e3       	ldi	r30, 0x38	; 56
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	48 2f       	mov	r20, r24
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	02 2e       	mov	r0, r18
    1618:	02 c0       	rjmp	.+4      	; 0x161e <GPIO_writePin+0x10c>
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	0a 94       	dec	r0
    1620:	e2 f7       	brpl	.-8      	; 0x161a <GPIO_writePin+0x108>
    1622:	80 95       	com	r24
    1624:	84 23       	and	r24, r20
    1626:	8c 93       	st	X, r24
    1628:	57 c0       	rjmp	.+174    	; 0x16d8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	81 30       	cpi	r24, 0x01	; 1
    162e:	a1 f4       	brne	.+40     	; 0x1658 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1630:	a5 e3       	ldi	r26, 0x35	; 53
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e5 e3       	ldi	r30, 0x35	; 53
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	48 2f       	mov	r20, r24
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	02 2e       	mov	r0, r18
    1648:	02 c0       	rjmp	.+4      	; 0x164e <GPIO_writePin+0x13c>
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	0a 94       	dec	r0
    1650:	e2 f7       	brpl	.-8      	; 0x164a <GPIO_writePin+0x138>
    1652:	84 2b       	or	r24, r20
    1654:	8c 93       	st	X, r24
    1656:	40 c0       	rjmp	.+128    	; 0x16d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1658:	a5 e3       	ldi	r26, 0x35	; 53
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e5 e3       	ldi	r30, 0x35	; 53
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	48 2f       	mov	r20, r24
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	02 2e       	mov	r0, r18
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <GPIO_writePin+0x164>
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	0a 94       	dec	r0
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <GPIO_writePin+0x160>
    167a:	80 95       	com	r24
    167c:	84 23       	and	r24, r20
    167e:	8c 93       	st	X, r24
    1680:	2b c0       	rjmp	.+86     	; 0x16d8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	81 30       	cpi	r24, 0x01	; 1
    1686:	a1 f4       	brne	.+40     	; 0x16b0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1688:	a2 e3       	ldi	r26, 0x32	; 50
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e2 e3       	ldi	r30, 0x32	; 50
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 2e       	mov	r0, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <GPIO_writePin+0x194>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <GPIO_writePin+0x190>
    16aa:	84 2b       	or	r24, r20
    16ac:	8c 93       	st	X, r24
    16ae:	14 c0       	rjmp	.+40     	; 0x16d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    16b0:	a2 e3       	ldi	r26, 0x32	; 50
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e2 e3       	ldi	r30, 0x32	; 50
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	48 2f       	mov	r20, r24
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	02 2e       	mov	r0, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <GPIO_writePin+0x1bc>
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	0a 94       	dec	r0
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <GPIO_writePin+0x1b8>
    16d2:	80 95       	com	r24
    16d4:	84 23       	and	r24, r20
    16d6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <GPIO_readPin+0x6>
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <GPIO_readPin+0x8>
    16f0:	0f 92       	push	r0
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	8a 83       	std	Y+2, r24	; 0x02
    16f8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    16fa:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	88 30       	cpi	r24, 0x08	; 8
    1700:	08 f0       	brcs	.+2      	; 0x1704 <GPIO_readPin+0x1c>
    1702:	84 c0       	rjmp	.+264    	; 0x180c <GPIO_readPin+0x124>
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	84 30       	cpi	r24, 0x04	; 4
    1708:	08 f0       	brcs	.+2      	; 0x170c <GPIO_readPin+0x24>
    170a:	80 c0       	rjmp	.+256    	; 0x180c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	3d 83       	std	Y+5, r19	; 0x05
    1714:	2c 83       	std	Y+4, r18	; 0x04
    1716:	4c 81       	ldd	r20, Y+4	; 0x04
    1718:	5d 81       	ldd	r21, Y+5	; 0x05
    171a:	41 30       	cpi	r20, 0x01	; 1
    171c:	51 05       	cpc	r21, r1
    171e:	79 f1       	breq	.+94     	; 0x177e <GPIO_readPin+0x96>
    1720:	8c 81       	ldd	r24, Y+4	; 0x04
    1722:	9d 81       	ldd	r25, Y+5	; 0x05
    1724:	82 30       	cpi	r24, 0x02	; 2
    1726:	91 05       	cpc	r25, r1
    1728:	34 f4       	brge	.+12     	; 0x1736 <GPIO_readPin+0x4e>
    172a:	2c 81       	ldd	r18, Y+4	; 0x04
    172c:	3d 81       	ldd	r19, Y+5	; 0x05
    172e:	21 15       	cp	r18, r1
    1730:	31 05       	cpc	r19, r1
    1732:	69 f0       	breq	.+26     	; 0x174e <GPIO_readPin+0x66>
    1734:	6b c0       	rjmp	.+214    	; 0x180c <GPIO_readPin+0x124>
    1736:	4c 81       	ldd	r20, Y+4	; 0x04
    1738:	5d 81       	ldd	r21, Y+5	; 0x05
    173a:	42 30       	cpi	r20, 0x02	; 2
    173c:	51 05       	cpc	r21, r1
    173e:	b9 f1       	breq	.+110    	; 0x17ae <GPIO_readPin+0xc6>
    1740:	8c 81       	ldd	r24, Y+4	; 0x04
    1742:	9d 81       	ldd	r25, Y+5	; 0x05
    1744:	83 30       	cpi	r24, 0x03	; 3
    1746:	91 05       	cpc	r25, r1
    1748:	09 f4       	brne	.+2      	; 0x174c <GPIO_readPin+0x64>
    174a:	49 c0       	rjmp	.+146    	; 0x17de <GPIO_readPin+0xf6>
    174c:	5f c0       	rjmp	.+190    	; 0x180c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    174e:	e9 e3       	ldi	r30, 0x39	; 57
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	88 2f       	mov	r24, r24
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	a9 01       	movw	r20, r18
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <GPIO_readPin+0x7e>
    1762:	55 95       	asr	r21
    1764:	47 95       	ror	r20
    1766:	8a 95       	dec	r24
    1768:	e2 f7       	brpl	.-8      	; 0x1762 <GPIO_readPin+0x7a>
    176a:	ca 01       	movw	r24, r20
    176c:	81 70       	andi	r24, 0x01	; 1
    176e:	90 70       	andi	r25, 0x00	; 0
    1770:	88 23       	and	r24, r24
    1772:	19 f0       	breq	.+6      	; 0x177a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	89 83       	std	Y+1, r24	; 0x01
    1778:	49 c0       	rjmp	.+146    	; 0x180c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    177a:	19 82       	std	Y+1, r1	; 0x01
    177c:	47 c0       	rjmp	.+142    	; 0x180c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    177e:	e6 e3       	ldi	r30, 0x36	; 54
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	a9 01       	movw	r20, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <GPIO_readPin+0xae>
    1792:	55 95       	asr	r21
    1794:	47 95       	ror	r20
    1796:	8a 95       	dec	r24
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <GPIO_readPin+0xaa>
    179a:	ca 01       	movw	r24, r20
    179c:	81 70       	andi	r24, 0x01	; 1
    179e:	90 70       	andi	r25, 0x00	; 0
    17a0:	88 23       	and	r24, r24
    17a2:	19 f0       	breq	.+6      	; 0x17aa <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	31 c0       	rjmp	.+98     	; 0x180c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17aa:	19 82       	std	Y+1, r1	; 0x01
    17ac:	2f c0       	rjmp	.+94     	; 0x180c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    17ae:	e3 e3       	ldi	r30, 0x33	; 51
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	88 2f       	mov	r24, r24
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	a9 01       	movw	r20, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <GPIO_readPin+0xde>
    17c2:	55 95       	asr	r21
    17c4:	47 95       	ror	r20
    17c6:	8a 95       	dec	r24
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <GPIO_readPin+0xda>
    17ca:	ca 01       	movw	r24, r20
    17cc:	81 70       	andi	r24, 0x01	; 1
    17ce:	90 70       	andi	r25, 0x00	; 0
    17d0:	88 23       	and	r24, r24
    17d2:	19 f0       	breq	.+6      	; 0x17da <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	89 83       	std	Y+1, r24	; 0x01
    17d8:	19 c0       	rjmp	.+50     	; 0x180c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17da:	19 82       	std	Y+1, r1	; 0x01
    17dc:	17 c0       	rjmp	.+46     	; 0x180c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    17de:	e0 e3       	ldi	r30, 0x30	; 48
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	88 2f       	mov	r24, r24
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	a9 01       	movw	r20, r18
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <GPIO_readPin+0x10e>
    17f2:	55 95       	asr	r21
    17f4:	47 95       	ror	r20
    17f6:	8a 95       	dec	r24
    17f8:	e2 f7       	brpl	.-8      	; 0x17f2 <GPIO_readPin+0x10a>
    17fa:	ca 01       	movw	r24, r20
    17fc:	81 70       	andi	r24, 0x01	; 1
    17fe:	90 70       	andi	r25, 0x00	; 0
    1800:	88 23       	and	r24, r24
    1802:	19 f0       	breq	.+6      	; 0x180a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	89 83       	std	Y+1, r24	; 0x01
    1808:	01 c0       	rjmp	.+2      	; 0x180c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    180a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    180c:	89 81       	ldd	r24, Y+1	; 0x01
}
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	08 95       	ret

0000181e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	00 d0       	rcall	.+0      	; 0x1824 <GPIO_setupPortDirection+0x6>
    1824:	00 d0       	rcall	.+0      	; 0x1826 <GPIO_setupPortDirection+0x8>
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	89 83       	std	Y+1, r24	; 0x01
    182c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	84 30       	cpi	r24, 0x04	; 4
    1832:	90 f5       	brcc	.+100    	; 0x1898 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	3c 83       	std	Y+4, r19	; 0x04
    183c:	2b 83       	std	Y+3, r18	; 0x03
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	9c 81       	ldd	r25, Y+4	; 0x04
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	91 05       	cpc	r25, r1
    1846:	d1 f0       	breq	.+52     	; 0x187c <GPIO_setupPortDirection+0x5e>
    1848:	2b 81       	ldd	r18, Y+3	; 0x03
    184a:	3c 81       	ldd	r19, Y+4	; 0x04
    184c:	22 30       	cpi	r18, 0x02	; 2
    184e:	31 05       	cpc	r19, r1
    1850:	2c f4       	brge	.+10     	; 0x185c <GPIO_setupPortDirection+0x3e>
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	9c 81       	ldd	r25, Y+4	; 0x04
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	61 f0       	breq	.+24     	; 0x1872 <GPIO_setupPortDirection+0x54>
    185a:	1e c0       	rjmp	.+60     	; 0x1898 <GPIO_setupPortDirection+0x7a>
    185c:	2b 81       	ldd	r18, Y+3	; 0x03
    185e:	3c 81       	ldd	r19, Y+4	; 0x04
    1860:	22 30       	cpi	r18, 0x02	; 2
    1862:	31 05       	cpc	r19, r1
    1864:	81 f0       	breq	.+32     	; 0x1886 <GPIO_setupPortDirection+0x68>
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	9c 81       	ldd	r25, Y+4	; 0x04
    186a:	83 30       	cpi	r24, 0x03	; 3
    186c:	91 05       	cpc	r25, r1
    186e:	81 f0       	breq	.+32     	; 0x1890 <GPIO_setupPortDirection+0x72>
    1870:	13 c0       	rjmp	.+38     	; 0x1898 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1872:	ea e3       	ldi	r30, 0x3A	; 58
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	80 83       	st	Z, r24
    187a:	0e c0       	rjmp	.+28     	; 0x1898 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    187c:	e7 e3       	ldi	r30, 0x37	; 55
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	80 83       	st	Z, r24
    1884:	09 c0       	rjmp	.+18     	; 0x1898 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1886:	e4 e3       	ldi	r30, 0x34	; 52
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	80 83       	st	Z, r24
    188e:	04 c0       	rjmp	.+8      	; 0x1898 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1890:	e1 e3       	ldi	r30, 0x31	; 49
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	80 83       	st	Z, r24
			break;
		}
	}
}
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <GPIO_writePort+0x6>
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <GPIO_writePort+0x8>
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	84 30       	cpi	r24, 0x04	; 4
    18ba:	90 f5       	brcc	.+100    	; 0x1920 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	3c 83       	std	Y+4, r19	; 0x04
    18c4:	2b 83       	std	Y+3, r18	; 0x03
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ca:	81 30       	cpi	r24, 0x01	; 1
    18cc:	91 05       	cpc	r25, r1
    18ce:	d1 f0       	breq	.+52     	; 0x1904 <GPIO_writePort+0x5e>
    18d0:	2b 81       	ldd	r18, Y+3	; 0x03
    18d2:	3c 81       	ldd	r19, Y+4	; 0x04
    18d4:	22 30       	cpi	r18, 0x02	; 2
    18d6:	31 05       	cpc	r19, r1
    18d8:	2c f4       	brge	.+10     	; 0x18e4 <GPIO_writePort+0x3e>
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	9c 81       	ldd	r25, Y+4	; 0x04
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	61 f0       	breq	.+24     	; 0x18fa <GPIO_writePort+0x54>
    18e2:	1e c0       	rjmp	.+60     	; 0x1920 <GPIO_writePort+0x7a>
    18e4:	2b 81       	ldd	r18, Y+3	; 0x03
    18e6:	3c 81       	ldd	r19, Y+4	; 0x04
    18e8:	22 30       	cpi	r18, 0x02	; 2
    18ea:	31 05       	cpc	r19, r1
    18ec:	81 f0       	breq	.+32     	; 0x190e <GPIO_writePort+0x68>
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	9c 81       	ldd	r25, Y+4	; 0x04
    18f2:	83 30       	cpi	r24, 0x03	; 3
    18f4:	91 05       	cpc	r25, r1
    18f6:	81 f0       	breq	.+32     	; 0x1918 <GPIO_writePort+0x72>
    18f8:	13 c0       	rjmp	.+38     	; 0x1920 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    18fa:	eb e3       	ldi	r30, 0x3B	; 59
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	80 83       	st	Z, r24
    1902:	0e c0       	rjmp	.+28     	; 0x1920 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1904:	e8 e3       	ldi	r30, 0x38	; 56
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	80 83       	st	Z, r24
    190c:	09 c0       	rjmp	.+18     	; 0x1920 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    190e:	e5 e3       	ldi	r30, 0x35	; 53
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	80 83       	st	Z, r24
    1916:	04 c0       	rjmp	.+8      	; 0x1920 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1918:	e2 e3       	ldi	r30, 0x32	; 50
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	08 95       	ret

0000192e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	00 d0       	rcall	.+0      	; 0x1934 <GPIO_readPort+0x6>
    1934:	00 d0       	rcall	.+0      	; 0x1936 <GPIO_readPort+0x8>
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    193c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	84 30       	cpi	r24, 0x04	; 4
    1942:	90 f5       	brcc	.+100    	; 0x19a8 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	3c 83       	std	Y+4, r19	; 0x04
    194c:	2b 83       	std	Y+3, r18	; 0x03
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	9c 81       	ldd	r25, Y+4	; 0x04
    1952:	81 30       	cpi	r24, 0x01	; 1
    1954:	91 05       	cpc	r25, r1
    1956:	d1 f0       	breq	.+52     	; 0x198c <GPIO_readPort+0x5e>
    1958:	2b 81       	ldd	r18, Y+3	; 0x03
    195a:	3c 81       	ldd	r19, Y+4	; 0x04
    195c:	22 30       	cpi	r18, 0x02	; 2
    195e:	31 05       	cpc	r19, r1
    1960:	2c f4       	brge	.+10     	; 0x196c <GPIO_readPort+0x3e>
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	00 97       	sbiw	r24, 0x00	; 0
    1968:	61 f0       	breq	.+24     	; 0x1982 <GPIO_readPort+0x54>
    196a:	1e c0       	rjmp	.+60     	; 0x19a8 <GPIO_readPort+0x7a>
    196c:	2b 81       	ldd	r18, Y+3	; 0x03
    196e:	3c 81       	ldd	r19, Y+4	; 0x04
    1970:	22 30       	cpi	r18, 0x02	; 2
    1972:	31 05       	cpc	r19, r1
    1974:	81 f0       	breq	.+32     	; 0x1996 <GPIO_readPort+0x68>
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	9c 81       	ldd	r25, Y+4	; 0x04
    197a:	83 30       	cpi	r24, 0x03	; 3
    197c:	91 05       	cpc	r25, r1
    197e:	81 f0       	breq	.+32     	; 0x19a0 <GPIO_readPort+0x72>
    1980:	13 c0       	rjmp	.+38     	; 0x19a8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1982:	e9 e3       	ldi	r30, 0x39	; 57
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	89 83       	std	Y+1, r24	; 0x01
    198a:	0e c0       	rjmp	.+28     	; 0x19a8 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    198c:	e6 e3       	ldi	r30, 0x36	; 54
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	89 83       	std	Y+1, r24	; 0x01
    1994:	09 c0       	rjmp	.+18     	; 0x19a8 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1996:	e3 e3       	ldi	r30, 0x33	; 51
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	89 83       	std	Y+1, r24	; 0x01
    199e:	04 c0       	rjmp	.+8      	; 0x19a8 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    19a0:	e0 e3       	ldi	r30, 0x30	; 48
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <start>:
 * Description :
 * Initialize the LCD:
 * Start Application with displaying welcome and wait to  enter c
 */
void start(void)
{
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	66 97       	sbiw	r28, 0x16	; 22
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	cd bf       	out	0x3d, r28	; 61
	Ex_INT_ConfigType Config_Ptr =
	{
			EX_INT0,FALLING_EDGE,NORMAL_EX_INT_PIN
	};
    19cc:	ce 01       	movw	r24, r28
    19ce:	0f 96       	adiw	r24, 0x0f	; 15
    19d0:	9b 8b       	std	Y+19, r25	; 0x13
    19d2:	8a 8b       	std	Y+18, r24	; 0x12
    19d4:	ec e7       	ldi	r30, 0x7C	; 124
    19d6:	f1 e0       	ldi	r31, 0x01	; 1
    19d8:	fd 8b       	std	Y+21, r31	; 0x15
    19da:	ec 8b       	std	Y+20, r30	; 0x14
    19dc:	f3 e0       	ldi	r31, 0x03	; 3
    19de:	fe 8b       	std	Y+22, r31	; 0x16
    19e0:	ec 89       	ldd	r30, Y+20	; 0x14
    19e2:	fd 89       	ldd	r31, Y+21	; 0x15
    19e4:	00 80       	ld	r0, Z
    19e6:	8c 89       	ldd	r24, Y+20	; 0x14
    19e8:	9d 89       	ldd	r25, Y+21	; 0x15
    19ea:	01 96       	adiw	r24, 0x01	; 1
    19ec:	9d 8b       	std	Y+21, r25	; 0x15
    19ee:	8c 8b       	std	Y+20, r24	; 0x14
    19f0:	ea 89       	ldd	r30, Y+18	; 0x12
    19f2:	fb 89       	ldd	r31, Y+19	; 0x13
    19f4:	00 82       	st	Z, r0
    19f6:	8a 89       	ldd	r24, Y+18	; 0x12
    19f8:	9b 89       	ldd	r25, Y+19	; 0x13
    19fa:	01 96       	adiw	r24, 0x01	; 1
    19fc:	9b 8b       	std	Y+19, r25	; 0x13
    19fe:	8a 8b       	std	Y+18, r24	; 0x12
    1a00:	9e 89       	ldd	r25, Y+22	; 0x16
    1a02:	91 50       	subi	r25, 0x01	; 1
    1a04:	9e 8b       	std	Y+22, r25	; 0x16
    1a06:	ee 89       	ldd	r30, Y+22	; 0x16
    1a08:	ee 23       	and	r30, r30
    1a0a:	51 f7       	brne	.-44     	; 0x19e0 <start+0x28>
	Ex_INT_init(&Config_Ptr);
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	0f 96       	adiw	r24, 0x0f	; 15
    1a10:	0e 94 2d 08 	call	0x105a	; 0x105a <Ex_INT_init>
	INT0_setCallBack(Random);
    1a14:	84 e1       	ldi	r24, 0x14	; 20
    1a16:	96 e1       	ldi	r25, 0x16	; 22
    1a18:	0e 94 68 09 	call	0x12d0	; 0x12d0 <INT0_setCallBack>
	sei()
    1a1c:	af e5       	ldi	r26, 0x5F	; 95
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	ef e5       	ldi	r30, 0x5F	; 95
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	80 68       	ori	r24, 0x80	; 128
    1a28:	8c 93       	st	X, r24

	LCD_init();
    1a2a:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <LCD_init>
	LCD_displayStringRowColumn(0,4,"Hello Sir");
    1a2e:	20 e6       	ldi	r18, 0x60	; 96
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	64 e0       	ldi	r22, 0x04	; 4
    1a36:	a9 01       	movw	r20, r18
    1a38:	0e 94 e2 21 	call	0x43c4	; 0x43c4 <LCD_displayStringRowColumn>
    1a3c:	76 c0       	rjmp	.+236    	; 0x1b2a <start+0x172>
	while(key != 'c')
	{
		key=KEYPAD_getPressedKey();
    1a3e:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <KEYPAD_getPressedKey>
    1a42:	80 93 86 01 	sts	0x0186, r24
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	a8 e4       	ldi	r26, 0x48	; 72
    1a4c:	b3 e4       	ldi	r27, 0x43	; 67
    1a4e:	8b 87       	std	Y+11, r24	; 0x0b
    1a50:	9c 87       	std	Y+12, r25	; 0x0c
    1a52:	ad 87       	std	Y+13, r26	; 0x0d
    1a54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	4a e7       	ldi	r20, 0x7A	; 122
    1a64:	55 e4       	ldi	r21, 0x45	; 69
    1a66:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	8f 83       	std	Y+7, r24	; 0x07
    1a70:	98 87       	std	Y+8, r25	; 0x08
    1a72:	a9 87       	std	Y+9, r26	; 0x09
    1a74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a76:	6f 81       	ldd	r22, Y+7	; 0x07
    1a78:	78 85       	ldd	r23, Y+8	; 0x08
    1a7a:	89 85       	ldd	r24, Y+9	; 0x09
    1a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e8       	ldi	r20, 0x80	; 128
    1a84:	5f e3       	ldi	r21, 0x3F	; 63
    1a86:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1a8a:	88 23       	and	r24, r24
    1a8c:	2c f4       	brge	.+10     	; 0x1a98 <start+0xe0>
		__ticks = 1;
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	9e 83       	std	Y+6, r25	; 0x06
    1a94:	8d 83       	std	Y+5, r24	; 0x05
    1a96:	3f c0       	rjmp	.+126    	; 0x1b16 <start+0x15e>
	else if (__tmp > 65535)
    1a98:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9a:	78 85       	ldd	r23, Y+8	; 0x08
    1a9c:	89 85       	ldd	r24, Y+9	; 0x09
    1a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	3f ef       	ldi	r19, 0xFF	; 255
    1aa4:	4f e7       	ldi	r20, 0x7F	; 127
    1aa6:	57 e4       	ldi	r21, 0x47	; 71
    1aa8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1aac:	18 16       	cp	r1, r24
    1aae:	4c f5       	brge	.+82     	; 0x1b02 <start+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e2       	ldi	r20, 0x20	; 32
    1abe:	51 e4       	ldi	r21, 0x41	; 65
    1ac0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	bc 01       	movw	r22, r24
    1aca:	cd 01       	movw	r24, r26
    1acc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	9e 83       	std	Y+6, r25	; 0x06
    1ad6:	8d 83       	std	Y+5, r24	; 0x05
    1ad8:	0f c0       	rjmp	.+30     	; 0x1af8 <start+0x140>
    1ada:	80 e9       	ldi	r24, 0x90	; 144
    1adc:	91 e0       	ldi	r25, 0x01	; 1
    1ade:	9c 83       	std	Y+4, r25	; 0x04
    1ae0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	f1 f7       	brne	.-4      	; 0x1ae6 <start+0x12e>
    1aea:	9c 83       	std	Y+4, r25	; 0x04
    1aec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aee:	8d 81       	ldd	r24, Y+5	; 0x05
    1af0:	9e 81       	ldd	r25, Y+6	; 0x06
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	9e 83       	std	Y+6, r25	; 0x06
    1af6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af8:	8d 81       	ldd	r24, Y+5	; 0x05
    1afa:	9e 81       	ldd	r25, Y+6	; 0x06
    1afc:	00 97       	sbiw	r24, 0x00	; 0
    1afe:	69 f7       	brne	.-38     	; 0x1ada <start+0x122>
    1b00:	14 c0       	rjmp	.+40     	; 0x1b2a <start+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b02:	6f 81       	ldd	r22, Y+7	; 0x07
    1b04:	78 85       	ldd	r23, Y+8	; 0x08
    1b06:	89 85       	ldd	r24, Y+9	; 0x09
    1b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	9e 83       	std	Y+6, r25	; 0x06
    1b14:	8d 83       	std	Y+5, r24	; 0x05
    1b16:	8d 81       	ldd	r24, Y+5	; 0x05
    1b18:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1a:	9a 83       	std	Y+2, r25	; 0x02
    1b1c:	89 83       	std	Y+1, r24	; 0x01
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	9a 81       	ldd	r25, Y+2	; 0x02
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	f1 f7       	brne	.-4      	; 0x1b22 <start+0x16a>
    1b26:	9a 83       	std	Y+2, r25	; 0x02
    1b28:	89 83       	std	Y+1, r24	; 0x01
	INT0_setCallBack(Random);
	sei()

	LCD_init();
	LCD_displayStringRowColumn(0,4,"Hello Sir");
	while(key != 'c')
    1b2a:	80 91 86 01 	lds	r24, 0x0186
    1b2e:	83 36       	cpi	r24, 0x63	; 99
    1b30:	09 f0       	breq	.+2      	; 0x1b34 <start+0x17c>
    1b32:	85 cf       	rjmp	.-246    	; 0x1a3e <start+0x86>
	{
		key=KEYPAD_getPressedKey();
		_delay_ms(200);
	}
	LCD_clearScreen();
    1b34:	0e 94 4c 22 	call	0x4498	; 0x4498 <LCD_clearScreen>
}
    1b38:	66 96       	adiw	r28, 0x16	; 22
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	f8 94       	cli
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	cd bf       	out	0x3d, r28	; 61
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <First_NUM>:
/*
 * Description :
 * Get the first number and operation of calculation
 */
void First_NUM(void)
{
    1b4a:	0f 93       	push	r16
    1b4c:	1f 93       	push	r17
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	6d 97       	sbiw	r28, 0x1d	; 29
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
	uint8 temp = 0;
    1b62:	1d 8e       	std	Y+29, r1	; 0x1d
	num1_counter=0;//start from digit 1
    1b64:	10 92 87 01 	sts	0x0187, r1
	while(1)
	{

		key=KEYPAD_getPressedKey();
    1b68:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <KEYPAD_getPressedKey>
    1b6c:	80 93 86 01 	sts	0x0186, r24
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	a8 e4       	ldi	r26, 0x48	; 72
    1b76:	b3 e4       	ldi	r27, 0x43	; 67
    1b78:	89 8f       	std	Y+25, r24	; 0x19
    1b7a:	9a 8f       	std	Y+26, r25	; 0x1a
    1b7c:	ab 8f       	std	Y+27, r26	; 0x1b
    1b7e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b80:	69 8d       	ldd	r22, Y+25	; 0x19
    1b82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	4a e7       	ldi	r20, 0x7A	; 122
    1b8e:	55 e4       	ldi	r21, 0x45	; 69
    1b90:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	8d 8b       	std	Y+21, r24	; 0x15
    1b9a:	9e 8b       	std	Y+22, r25	; 0x16
    1b9c:	af 8b       	std	Y+23, r26	; 0x17
    1b9e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ba0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	40 e8       	ldi	r20, 0x80	; 128
    1bae:	5f e3       	ldi	r21, 0x3F	; 63
    1bb0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1bb4:	88 23       	and	r24, r24
    1bb6:	2c f4       	brge	.+10     	; 0x1bc2 <First_NUM+0x78>
		__ticks = 1;
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	9c 8b       	std	Y+20, r25	; 0x14
    1bbe:	8b 8b       	std	Y+19, r24	; 0x13
    1bc0:	3f c0       	rjmp	.+126    	; 0x1c40 <First_NUM+0xf6>
	else if (__tmp > 65535)
    1bc2:	6d 89       	ldd	r22, Y+21	; 0x15
    1bc4:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	3f ef       	ldi	r19, 0xFF	; 255
    1bce:	4f e7       	ldi	r20, 0x7F	; 127
    1bd0:	57 e4       	ldi	r21, 0x47	; 71
    1bd2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1bd6:	18 16       	cp	r1, r24
    1bd8:	4c f5       	brge	.+82     	; 0x1c2c <First_NUM+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bda:	69 8d       	ldd	r22, Y+25	; 0x19
    1bdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1be0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	40 e2       	ldi	r20, 0x20	; 32
    1be8:	51 e4       	ldi	r21, 0x41	; 65
    1bea:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	bc 01       	movw	r22, r24
    1bf4:	cd 01       	movw	r24, r26
    1bf6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	9c 8b       	std	Y+20, r25	; 0x14
    1c00:	8b 8b       	std	Y+19, r24	; 0x13
    1c02:	0f c0       	rjmp	.+30     	; 0x1c22 <First_NUM+0xd8>
    1c04:	80 e9       	ldi	r24, 0x90	; 144
    1c06:	91 e0       	ldi	r25, 0x01	; 1
    1c08:	9a 8b       	std	Y+18, r25	; 0x12
    1c0a:	89 8b       	std	Y+17, r24	; 0x11
    1c0c:	89 89       	ldd	r24, Y+17	; 0x11
    1c0e:	9a 89       	ldd	r25, Y+18	; 0x12
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	f1 f7       	brne	.-4      	; 0x1c10 <First_NUM+0xc6>
    1c14:	9a 8b       	std	Y+18, r25	; 0x12
    1c16:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c18:	8b 89       	ldd	r24, Y+19	; 0x13
    1c1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	9c 8b       	std	Y+20, r25	; 0x14
    1c20:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c22:	8b 89       	ldd	r24, Y+19	; 0x13
    1c24:	9c 89       	ldd	r25, Y+20	; 0x14
    1c26:	00 97       	sbiw	r24, 0x00	; 0
    1c28:	69 f7       	brne	.-38     	; 0x1c04 <First_NUM+0xba>
    1c2a:	14 c0       	rjmp	.+40     	; 0x1c54 <First_NUM+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c30:	8f 89       	ldd	r24, Y+23	; 0x17
    1c32:	98 8d       	ldd	r25, Y+24	; 0x18
    1c34:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	9c 8b       	std	Y+20, r25	; 0x14
    1c3e:	8b 8b       	std	Y+19, r24	; 0x13
    1c40:	8b 89       	ldd	r24, Y+19	; 0x13
    1c42:	9c 89       	ldd	r25, Y+20	; 0x14
    1c44:	98 8b       	std	Y+16, r25	; 0x10
    1c46:	8f 87       	std	Y+15, r24	; 0x0f
    1c48:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c4a:	98 89       	ldd	r25, Y+16	; 0x10
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <First_NUM+0x102>
    1c50:	98 8b       	std	Y+16, r25	; 0x10
    1c52:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);

		if(random_num == 0)
    1c54:	80 91 7b 01 	lds	r24, 0x017B
    1c58:	88 23       	and	r24, r24
    1c5a:	61 f4       	brne	.+24     	; 0x1c74 <First_NUM+0x12a>
		{
			random_num = 1;
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	80 93 7b 01 	sts	0x017B, r24

			key = rand() % 10;
    1c62:	0e 94 2f 23 	call	0x465e	; 0x465e <rand>
    1c66:	2a e0       	ldi	r18, 0x0A	; 10
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	b9 01       	movw	r22, r18
    1c6c:	0e 94 5f 22 	call	0x44be	; 0x44be <__divmodhi4>
    1c70:	80 93 86 01 	sts	0x0186, r24
		}

		if( key == '/' )
    1c74:	80 91 86 01 	lds	r24, 0x0186
    1c78:	8f 32       	cpi	r24, 0x2F	; 47
    1c7a:	09 f0       	breq	.+2      	; 0x1c7e <First_NUM+0x134>
    1c7c:	75 c0       	rjmp	.+234    	; 0x1d68 <First_NUM+0x21e>
		{
			temp=KEYPAD_getPressedKey();
    1c7e:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <KEYPAD_getPressedKey>
    1c82:	8d 8f       	std	Y+29, r24	; 0x1d
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	a8 e4       	ldi	r26, 0x48	; 72
    1c8a:	b3 e4       	ldi	r27, 0x43	; 67
    1c8c:	8b 87       	std	Y+11, r24	; 0x0b
    1c8e:	9c 87       	std	Y+12, r25	; 0x0c
    1c90:	ad 87       	std	Y+13, r26	; 0x0d
    1c92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	4a e7       	ldi	r20, 0x7A	; 122
    1ca2:	55 e4       	ldi	r21, 0x45	; 69
    1ca4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	8f 83       	std	Y+7, r24	; 0x07
    1cae:	98 87       	std	Y+8, r25	; 0x08
    1cb0:	a9 87       	std	Y+9, r26	; 0x09
    1cb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb6:	78 85       	ldd	r23, Y+8	; 0x08
    1cb8:	89 85       	ldd	r24, Y+9	; 0x09
    1cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	40 e8       	ldi	r20, 0x80	; 128
    1cc2:	5f e3       	ldi	r21, 0x3F	; 63
    1cc4:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1cc8:	88 23       	and	r24, r24
    1cca:	2c f4       	brge	.+10     	; 0x1cd6 <First_NUM+0x18c>
		__ticks = 1;
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	9e 83       	std	Y+6, r25	; 0x06
    1cd2:	8d 83       	std	Y+5, r24	; 0x05
    1cd4:	3f c0       	rjmp	.+126    	; 0x1d54 <First_NUM+0x20a>
	else if (__tmp > 65535)
    1cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd8:	78 85       	ldd	r23, Y+8	; 0x08
    1cda:	89 85       	ldd	r24, Y+9	; 0x09
    1cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	3f ef       	ldi	r19, 0xFF	; 255
    1ce2:	4f e7       	ldi	r20, 0x7F	; 127
    1ce4:	57 e4       	ldi	r21, 0x47	; 71
    1ce6:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1cea:	18 16       	cp	r1, r24
    1cec:	4c f5       	brge	.+82     	; 0x1d40 <First_NUM+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e2       	ldi	r20, 0x20	; 32
    1cfc:	51 e4       	ldi	r21, 0x41	; 65
    1cfe:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	bc 01       	movw	r22, r24
    1d08:	cd 01       	movw	r24, r26
    1d0a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	9e 83       	std	Y+6, r25	; 0x06
    1d14:	8d 83       	std	Y+5, r24	; 0x05
    1d16:	0f c0       	rjmp	.+30     	; 0x1d36 <First_NUM+0x1ec>
    1d18:	80 e9       	ldi	r24, 0x90	; 144
    1d1a:	91 e0       	ldi	r25, 0x01	; 1
    1d1c:	9c 83       	std	Y+4, r25	; 0x04
    1d1e:	8b 83       	std	Y+3, r24	; 0x03
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	9c 81       	ldd	r25, Y+4	; 0x04
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <First_NUM+0x1da>
    1d28:	9c 83       	std	Y+4, r25	; 0x04
    1d2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	9e 83       	std	Y+6, r25	; 0x06
    1d34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d36:	8d 81       	ldd	r24, Y+5	; 0x05
    1d38:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3a:	00 97       	sbiw	r24, 0x00	; 0
    1d3c:	69 f7       	brne	.-38     	; 0x1d18 <First_NUM+0x1ce>
    1d3e:	14 c0       	rjmp	.+40     	; 0x1d68 <First_NUM+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d40:	6f 81       	ldd	r22, Y+7	; 0x07
    1d42:	78 85       	ldd	r23, Y+8	; 0x08
    1d44:	89 85       	ldd	r24, Y+9	; 0x09
    1d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d48:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	9e 83       	std	Y+6, r25	; 0x06
    1d52:	8d 83       	std	Y+5, r24	; 0x05
    1d54:	8d 81       	ldd	r24, Y+5	; 0x05
    1d56:	9e 81       	ldd	r25, Y+6	; 0x06
    1d58:	9a 83       	std	Y+2, r25	; 0x02
    1d5a:	89 83       	std	Y+1, r24	; 0x01
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <First_NUM+0x216>
    1d64:	9a 83       	std	Y+2, r25	; 0x02
    1d66:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(200);
		}

		if(temp == '/' )
    1d68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d6a:	8f 32       	cpi	r24, 0x2F	; 47
    1d6c:	19 f4       	brne	.+6      	; 0x1d74 <First_NUM+0x22a>
		{
			key = 'R';
    1d6e:	82 e5       	ldi	r24, 0x52	; 82
    1d70:	80 93 86 01 	sts	0x0186, r24
		}

		/*
		 * Break loop when user complete entering first number and operation
		 */
		if(key == '+' || key == '-' || key == '/' || key == '*')
    1d74:	80 91 86 01 	lds	r24, 0x0186
    1d78:	8b 32       	cpi	r24, 0x2B	; 43
    1d7a:	61 f0       	breq	.+24     	; 0x1d94 <First_NUM+0x24a>
    1d7c:	80 91 86 01 	lds	r24, 0x0186
    1d80:	8d 32       	cpi	r24, 0x2D	; 45
    1d82:	41 f0       	breq	.+16     	; 0x1d94 <First_NUM+0x24a>
    1d84:	80 91 86 01 	lds	r24, 0x0186
    1d88:	8f 32       	cpi	r24, 0x2F	; 47
    1d8a:	21 f0       	breq	.+8      	; 0x1d94 <First_NUM+0x24a>
    1d8c:	80 91 86 01 	lds	r24, 0x0186
    1d90:	8a 32       	cpi	r24, 0x2A	; 42
    1d92:	49 f4       	brne	.+18     	; 0x1da6 <First_NUM+0x25c>
		{
			opration=key;
    1d94:	80 91 86 01 	lds	r24, 0x0186
    1d98:	80 93 89 01 	sts	0x0189, r24
			LCD_displayCharacter(opration);
    1d9c:	80 91 89 01 	lds	r24, 0x0189
    1da0:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <LCD_displayCharacter>
    1da4:	35 c0       	rjmp	.+106    	; 0x1e10 <First_NUM+0x2c6>
			break;
		}

		if( key == 'R')
    1da6:	80 91 86 01 	lds	r24, 0x0186
    1daa:	82 35       	cpi	r24, 0x52	; 82
    1dac:	49 f4       	brne	.+18     	; 0x1dc0 <First_NUM+0x276>
		{
			opration=key;
    1dae:	80 91 86 01 	lds	r24, 0x0186
    1db2:	80 93 89 01 	sts	0x0189, r24
			LCD_displayString("Root");
    1db6:	8a e6       	ldi	r24, 0x6A	; 106
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	0e 94 77 21 	call	0x42ee	; 0x42ee <LCD_displayString>
    1dbe:	28 c0       	rjmp	.+80     	; 0x1e10 <First_NUM+0x2c6>
		}

		/*
		 * Store all digits of first number and display number on LCD
		 */
		number1[num1_counter]=key;
    1dc0:	80 91 87 01 	lds	r24, 0x0187
    1dc4:	08 2f       	mov	r16, r24
    1dc6:	10 e0       	ldi	r17, 0x00	; 0
    1dc8:	80 91 86 01 	lds	r24, 0x0186
    1dcc:	88 2f       	mov	r24, r24
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	a0 e0       	ldi	r26, 0x00	; 0
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	bc 01       	movw	r22, r24
    1dd6:	cd 01       	movw	r24, r26
    1dd8:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    1ddc:	9b 01       	movw	r18, r22
    1dde:	ac 01       	movw	r20, r24
    1de0:	c8 01       	movw	r24, r16
    1de2:	88 0f       	add	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	fc 01       	movw	r30, r24
    1dec:	e6 57       	subi	r30, 0x76	; 118
    1dee:	fe 4f       	sbci	r31, 0xFE	; 254
    1df0:	20 83       	st	Z, r18
    1df2:	31 83       	std	Z+1, r19	; 0x01
    1df4:	42 83       	std	Z+2, r20	; 0x02
    1df6:	53 83       	std	Z+3, r21	; 0x03
		num1_counter++;
    1df8:	80 91 87 01 	lds	r24, 0x0187
    1dfc:	8f 5f       	subi	r24, 0xFF	; 255
    1dfe:	80 93 87 01 	sts	0x0187, r24
		LCD_intgerToString(key);
    1e02:	80 91 86 01 	lds	r24, 0x0186
    1e06:	88 2f       	mov	r24, r24
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_intgerToString>
    1e0e:	ac ce       	rjmp	.-680    	; 0x1b68 <First_NUM+0x1e>
	}
}
    1e10:	6d 96       	adiw	r28, 0x1d	; 29
    1e12:	0f b6       	in	r0, 0x3f	; 63
    1e14:	f8 94       	cli
    1e16:	de bf       	out	0x3e, r29	; 62
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	cd bf       	out	0x3d, r28	; 61
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	1f 91       	pop	r17
    1e22:	0f 91       	pop	r16
    1e24:	08 95       	ret

00001e26 <Second_NUM>:
/*
 * Description :
 * Get the first number and operation of calculation
 */
void Second_NUM(void)
{
    1e26:	0f 93       	push	r16
    1e28:	1f 93       	push	r17
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	2e 97       	sbiw	r28, 0x0e	; 14
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
	num2_counter=0;
    1e3e:	10 92 88 01 	sts	0x0188, r1
	while(1)
	{
		key=KEYPAD_getPressedKey();
    1e42:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <KEYPAD_getPressedKey>
    1e46:	80 93 86 01 	sts	0x0186, r24
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	a8 e4       	ldi	r26, 0x48	; 72
    1e50:	b3 e4       	ldi	r27, 0x43	; 67
    1e52:	8b 87       	std	Y+11, r24	; 0x0b
    1e54:	9c 87       	std	Y+12, r25	; 0x0c
    1e56:	ad 87       	std	Y+13, r26	; 0x0d
    1e58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	4a e7       	ldi	r20, 0x7A	; 122
    1e68:	55 e4       	ldi	r21, 0x45	; 69
    1e6a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	8f 83       	std	Y+7, r24	; 0x07
    1e74:	98 87       	std	Y+8, r25	; 0x08
    1e76:	a9 87       	std	Y+9, r26	; 0x09
    1e78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7c:	78 85       	ldd	r23, Y+8	; 0x08
    1e7e:	89 85       	ldd	r24, Y+9	; 0x09
    1e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	40 e8       	ldi	r20, 0x80	; 128
    1e88:	5f e3       	ldi	r21, 0x3F	; 63
    1e8a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1e8e:	88 23       	and	r24, r24
    1e90:	2c f4       	brge	.+10     	; 0x1e9c <Second_NUM+0x76>
		__ticks = 1;
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	9e 83       	std	Y+6, r25	; 0x06
    1e98:	8d 83       	std	Y+5, r24	; 0x05
    1e9a:	3f c0       	rjmp	.+126    	; 0x1f1a <Second_NUM+0xf4>
	else if (__tmp > 65535)
    1e9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ea0:	89 85       	ldd	r24, Y+9	; 0x09
    1ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	3f ef       	ldi	r19, 0xFF	; 255
    1ea8:	4f e7       	ldi	r20, 0x7F	; 127
    1eaa:	57 e4       	ldi	r21, 0x47	; 71
    1eac:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1eb0:	18 16       	cp	r1, r24
    1eb2:	4c f5       	brge	.+82     	; 0x1f06 <Second_NUM+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 e2       	ldi	r20, 0x20	; 32
    1ec2:	51 e4       	ldi	r21, 0x41	; 65
    1ec4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	bc 01       	movw	r22, r24
    1ece:	cd 01       	movw	r24, r26
    1ed0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	9e 83       	std	Y+6, r25	; 0x06
    1eda:	8d 83       	std	Y+5, r24	; 0x05
    1edc:	0f c0       	rjmp	.+30     	; 0x1efc <Second_NUM+0xd6>
    1ede:	80 e9       	ldi	r24, 0x90	; 144
    1ee0:	91 e0       	ldi	r25, 0x01	; 1
    1ee2:	9c 83       	std	Y+4, r25	; 0x04
    1ee4:	8b 83       	std	Y+3, r24	; 0x03
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	f1 f7       	brne	.-4      	; 0x1eea <Second_NUM+0xc4>
    1eee:	9c 83       	std	Y+4, r25	; 0x04
    1ef0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	9e 83       	std	Y+6, r25	; 0x06
    1efa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efc:	8d 81       	ldd	r24, Y+5	; 0x05
    1efe:	9e 81       	ldd	r25, Y+6	; 0x06
    1f00:	00 97       	sbiw	r24, 0x00	; 0
    1f02:	69 f7       	brne	.-38     	; 0x1ede <Second_NUM+0xb8>
    1f04:	14 c0       	rjmp	.+40     	; 0x1f2e <Second_NUM+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f06:	6f 81       	ldd	r22, Y+7	; 0x07
    1f08:	78 85       	ldd	r23, Y+8	; 0x08
    1f0a:	89 85       	ldd	r24, Y+9	; 0x09
    1f0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	9e 83       	std	Y+6, r25	; 0x06
    1f18:	8d 83       	std	Y+5, r24	; 0x05
    1f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1e:	9a 83       	std	Y+2, r25	; 0x02
    1f20:	89 83       	std	Y+1, r24	; 0x01
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	9a 81       	ldd	r25, Y+2	; 0x02
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	f1 f7       	brne	.-4      	; 0x1f26 <Second_NUM+0x100>
    1f2a:	9a 83       	std	Y+2, r25	; 0x02
    1f2c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);

		if(random_num == 0)
    1f2e:	80 91 7b 01 	lds	r24, 0x017B
    1f32:	88 23       	and	r24, r24
    1f34:	61 f4       	brne	.+24     	; 0x1f4e <Second_NUM+0x128>
		{
			random_num = 1;
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	80 93 7b 01 	sts	0x017B, r24

			key = rand() % 10;
    1f3c:	0e 94 2f 23 	call	0x465e	; 0x465e <rand>
    1f40:	2a e0       	ldi	r18, 0x0A	; 10
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	b9 01       	movw	r22, r18
    1f46:	0e 94 5f 22 	call	0x44be	; 0x44be <__divmodhi4>
    1f4a:	80 93 86 01 	sts	0x0186, r24


		/*
		 * Break loop when user complete entering second number
		 */
		if(key == '=')
    1f4e:	80 91 86 01 	lds	r24, 0x0186
    1f52:	8d 33       	cpi	r24, 0x3D	; 61
    1f54:	79 f4       	brne	.+30     	; 0x1f74 <Second_NUM+0x14e>
		{
			LCD_displayCharacter(key);
    1f56:	80 91 86 01 	lds	r24, 0x0186
    1f5a:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <LCD_displayCharacter>
		 */
		number2[num2_counter]=key;
		num2_counter++;
		LCD_intgerToString(key);
	}
}
    1f5e:	2e 96       	adiw	r28, 0x0e	; 14
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	1f 91       	pop	r17
    1f70:	0f 91       	pop	r16
    1f72:	08 95       	ret


		/*
		 * Store all digits of second number and display number on LCD
		 */
		number2[num2_counter]=key;
    1f74:	80 91 88 01 	lds	r24, 0x0188
    1f78:	08 2f       	mov	r16, r24
    1f7a:	10 e0       	ldi	r17, 0x00	; 0
    1f7c:	80 91 86 01 	lds	r24, 0x0186
    1f80:	88 2f       	mov	r24, r24
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	a0 e0       	ldi	r26, 0x00	; 0
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	bc 01       	movw	r22, r24
    1f8a:	cd 01       	movw	r24, r26
    1f8c:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    1f90:	9b 01       	movw	r18, r22
    1f92:	ac 01       	movw	r20, r24
    1f94:	c8 01       	movw	r24, r16
    1f96:	88 0f       	add	r24, r24
    1f98:	99 1f       	adc	r25, r25
    1f9a:	88 0f       	add	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	fc 01       	movw	r30, r24
    1fa0:	ee 54       	subi	r30, 0x4E	; 78
    1fa2:	fe 4f       	sbci	r31, 0xFE	; 254
    1fa4:	20 83       	st	Z, r18
    1fa6:	31 83       	std	Z+1, r19	; 0x01
    1fa8:	42 83       	std	Z+2, r20	; 0x02
    1faa:	53 83       	std	Z+3, r21	; 0x03
		num2_counter++;
    1fac:	80 91 88 01 	lds	r24, 0x0188
    1fb0:	8f 5f       	subi	r24, 0xFF	; 255
    1fb2:	80 93 88 01 	sts	0x0188, r24
		LCD_intgerToString(key);
    1fb6:	80 91 86 01 	lds	r24, 0x0186
    1fba:	88 2f       	mov	r24, r24
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_intgerToString>
    1fc2:	3f cf       	rjmp	.-386    	; 0x1e42 <Second_NUM+0x1c>

00001fc4 <calc_sum>:
/*
 * Description :
 * Concatenate all digits of two number then display result of sum on LCD
 */
void calc_sum(float32 *first_num,float32*second_num,uint8 digit1,uint8 digit2)
{
    1fc4:	ef 92       	push	r14
    1fc6:	ff 92       	push	r15
    1fc8:	0f 93       	push	r16
    1fca:	1f 93       	push	r17
    1fcc:	df 93       	push	r29
    1fce:	cf 93       	push	r28
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    1fd4:	6e 97       	sbiw	r28, 0x1e	; 30
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	f8 94       	cli
    1fda:	de bf       	out	0x3e, r29	; 62
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	cd bf       	out	0x3d, r28	; 61
    1fe0:	9a 8f       	std	Y+26, r25	; 0x1a
    1fe2:	89 8f       	std	Y+25, r24	; 0x19
    1fe4:	7c 8f       	std	Y+28, r23	; 0x1c
    1fe6:	6b 8f       	std	Y+27, r22	; 0x1b
    1fe8:	4d 8f       	std	Y+29, r20	; 0x1d
    1fea:	2e 8f       	std	Y+30, r18	; 0x1e
	float32 num1=first_num[0];
    1fec:	e9 8d       	ldd	r30, Y+25	; 0x19
    1fee:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1ff0:	80 81       	ld	r24, Z
    1ff2:	91 81       	ldd	r25, Z+1	; 0x01
    1ff4:	a2 81       	ldd	r26, Z+2	; 0x02
    1ff6:	b3 81       	ldd	r27, Z+3	; 0x03
    1ff8:	8d 8b       	std	Y+21, r24	; 0x15
    1ffa:	9e 8b       	std	Y+22, r25	; 0x16
    1ffc:	af 8b       	std	Y+23, r26	; 0x17
    1ffe:	b8 8f       	std	Y+24, r27	; 0x18
	float32 num2=second_num[0];
    2000:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2002:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2004:	80 81       	ld	r24, Z
    2006:	91 81       	ldd	r25, Z+1	; 0x01
    2008:	a2 81       	ldd	r26, Z+2	; 0x02
    200a:	b3 81       	ldd	r27, Z+3	; 0x03
    200c:	89 8b       	std	Y+17, r24	; 0x11
    200e:	9a 8b       	std	Y+18, r25	; 0x12
    2010:	ab 8b       	std	Y+19, r26	; 0x13
    2012:	bc 8b       	std	Y+20, r27	; 0x14

	/*
	 *  Concatenate all digits of first number
	 */
	for(uint8 counter=1;counter<digit1;counter++)
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	88 8b       	std	Y+16, r24	; 0x10
    2018:	2c c0       	rjmp	.+88     	; 0x2072 <calc_sum+0xae>
	{
		num1 = num1*10 +first_num[counter];
    201a:	6d 89       	ldd	r22, Y+21	; 0x15
    201c:	7e 89       	ldd	r23, Y+22	; 0x16
    201e:	8f 89       	ldd	r24, Y+23	; 0x17
    2020:	98 8d       	ldd	r25, Y+24	; 0x18
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e2       	ldi	r20, 0x20	; 32
    2028:	51 e4       	ldi	r21, 0x41	; 65
    202a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	7c 01       	movw	r14, r24
    2034:	8d 01       	movw	r16, r26
    2036:	88 89       	ldd	r24, Y+16	; 0x10
    2038:	88 2f       	mov	r24, r24
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	9c 01       	movw	r18, r24
    203e:	22 0f       	add	r18, r18
    2040:	33 1f       	adc	r19, r19
    2042:	22 0f       	add	r18, r18
    2044:	33 1f       	adc	r19, r19
    2046:	89 8d       	ldd	r24, Y+25	; 0x19
    2048:	9a 8d       	ldd	r25, Y+26	; 0x1a
    204a:	fc 01       	movw	r30, r24
    204c:	e2 0f       	add	r30, r18
    204e:	f3 1f       	adc	r31, r19
    2050:	20 81       	ld	r18, Z
    2052:	31 81       	ldd	r19, Z+1	; 0x01
    2054:	42 81       	ldd	r20, Z+2	; 0x02
    2056:	53 81       	ldd	r21, Z+3	; 0x03
    2058:	c8 01       	movw	r24, r16
    205a:	b7 01       	movw	r22, r14
    205c:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	8d 8b       	std	Y+21, r24	; 0x15
    2066:	9e 8b       	std	Y+22, r25	; 0x16
    2068:	af 8b       	std	Y+23, r26	; 0x17
    206a:	b8 8f       	std	Y+24, r27	; 0x18
	float32 num2=second_num[0];

	/*
	 *  Concatenate all digits of first number
	 */
	for(uint8 counter=1;counter<digit1;counter++)
    206c:	88 89       	ldd	r24, Y+16	; 0x10
    206e:	8f 5f       	subi	r24, 0xFF	; 255
    2070:	88 8b       	std	Y+16, r24	; 0x10
    2072:	98 89       	ldd	r25, Y+16	; 0x10
    2074:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2076:	98 17       	cp	r25, r24
    2078:	80 f2       	brcs	.-96     	; 0x201a <calc_sum+0x56>
		num1 = num1*10 +first_num[counter];
	}
	/*
	 *  Concatenate all digits of second number
	 */
	for(uint8 counter=1;counter<digit2;counter++)
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	8f 87       	std	Y+15, r24	; 0x0f
    207e:	2c c0       	rjmp	.+88     	; 0x20d8 <calc_sum+0x114>
	{
		num2= num2*10 +second_num[counter];
    2080:	69 89       	ldd	r22, Y+17	; 0x11
    2082:	7a 89       	ldd	r23, Y+18	; 0x12
    2084:	8b 89       	ldd	r24, Y+19	; 0x13
    2086:	9c 89       	ldd	r25, Y+20	; 0x14
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	40 e2       	ldi	r20, 0x20	; 32
    208e:	51 e4       	ldi	r21, 0x41	; 65
    2090:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	7c 01       	movw	r14, r24
    209a:	8d 01       	movw	r16, r26
    209c:	8f 85       	ldd	r24, Y+15	; 0x0f
    209e:	88 2f       	mov	r24, r24
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	9c 01       	movw	r18, r24
    20a4:	22 0f       	add	r18, r18
    20a6:	33 1f       	adc	r19, r19
    20a8:	22 0f       	add	r18, r18
    20aa:	33 1f       	adc	r19, r19
    20ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20b0:	fc 01       	movw	r30, r24
    20b2:	e2 0f       	add	r30, r18
    20b4:	f3 1f       	adc	r31, r19
    20b6:	20 81       	ld	r18, Z
    20b8:	31 81       	ldd	r19, Z+1	; 0x01
    20ba:	42 81       	ldd	r20, Z+2	; 0x02
    20bc:	53 81       	ldd	r21, Z+3	; 0x03
    20be:	c8 01       	movw	r24, r16
    20c0:	b7 01       	movw	r22, r14
    20c2:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	89 8b       	std	Y+17, r24	; 0x11
    20cc:	9a 8b       	std	Y+18, r25	; 0x12
    20ce:	ab 8b       	std	Y+19, r26	; 0x13
    20d0:	bc 8b       	std	Y+20, r27	; 0x14
		num1 = num1*10 +first_num[counter];
	}
	/*
	 *  Concatenate all digits of second number
	 */
	for(uint8 counter=1;counter<digit2;counter++)
    20d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20d4:	8f 5f       	subi	r24, 0xFF	; 255
    20d6:	8f 87       	std	Y+15, r24	; 0x0f
    20d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    20da:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20dc:	98 17       	cp	r25, r24
    20de:	80 f2       	brcs	.-96     	; 0x2080 <calc_sum+0xbc>


	/*
	 *  Display result on LCD and wait until enter c
	 */
	LCD_moveCursor(1, 0);
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	60 e0       	ldi	r22, 0x00	; 0
    20e4:	0e 94 a0 21 	call	0x4340	; 0x4340 <LCD_moveCursor>
	LCD_intgerToString(num1+num2);
    20e8:	6d 89       	ldd	r22, Y+21	; 0x15
    20ea:	7e 89       	ldd	r23, Y+22	; 0x16
    20ec:	8f 89       	ldd	r24, Y+23	; 0x17
    20ee:	98 8d       	ldd	r25, Y+24	; 0x18
    20f0:	29 89       	ldd	r18, Y+17	; 0x11
    20f2:	3a 89       	ldd	r19, Y+18	; 0x12
    20f4:	4b 89       	ldd	r20, Y+19	; 0x13
    20f6:	5c 89       	ldd	r21, Y+20	; 0x14
    20f8:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	bc 01       	movw	r22, r24
    2102:	cd 01       	movw	r24, r26
    2104:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_intgerToString>
    2110:	76 c0       	rjmp	.+236    	; 0x21fe <calc_sum+0x23a>
	while(key != 'c')
	{
		key=KEYPAD_getPressedKey();
    2112:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <KEYPAD_getPressedKey>
    2116:	80 93 86 01 	sts	0x0186, r24
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	a8 e4       	ldi	r26, 0x48	; 72
    2120:	b3 e4       	ldi	r27, 0x43	; 67
    2122:	8b 87       	std	Y+11, r24	; 0x0b
    2124:	9c 87       	std	Y+12, r25	; 0x0c
    2126:	ad 87       	std	Y+13, r26	; 0x0d
    2128:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    212a:	6b 85       	ldd	r22, Y+11	; 0x0b
    212c:	7c 85       	ldd	r23, Y+12	; 0x0c
    212e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2130:	9e 85       	ldd	r25, Y+14	; 0x0e
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	4a e7       	ldi	r20, 0x7A	; 122
    2138:	55 e4       	ldi	r21, 0x45	; 69
    213a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	8f 83       	std	Y+7, r24	; 0x07
    2144:	98 87       	std	Y+8, r25	; 0x08
    2146:	a9 87       	std	Y+9, r26	; 0x09
    2148:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    214a:	6f 81       	ldd	r22, Y+7	; 0x07
    214c:	78 85       	ldd	r23, Y+8	; 0x08
    214e:	89 85       	ldd	r24, Y+9	; 0x09
    2150:	9a 85       	ldd	r25, Y+10	; 0x0a
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e8       	ldi	r20, 0x80	; 128
    2158:	5f e3       	ldi	r21, 0x3F	; 63
    215a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    215e:	88 23       	and	r24, r24
    2160:	2c f4       	brge	.+10     	; 0x216c <calc_sum+0x1a8>
		__ticks = 1;
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	9e 83       	std	Y+6, r25	; 0x06
    2168:	8d 83       	std	Y+5, r24	; 0x05
    216a:	3f c0       	rjmp	.+126    	; 0x21ea <calc_sum+0x226>
	else if (__tmp > 65535)
    216c:	6f 81       	ldd	r22, Y+7	; 0x07
    216e:	78 85       	ldd	r23, Y+8	; 0x08
    2170:	89 85       	ldd	r24, Y+9	; 0x09
    2172:	9a 85       	ldd	r25, Y+10	; 0x0a
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	3f ef       	ldi	r19, 0xFF	; 255
    2178:	4f e7       	ldi	r20, 0x7F	; 127
    217a:	57 e4       	ldi	r21, 0x47	; 71
    217c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2180:	18 16       	cp	r1, r24
    2182:	4c f5       	brge	.+82     	; 0x21d6 <calc_sum+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2184:	6b 85       	ldd	r22, Y+11	; 0x0b
    2186:	7c 85       	ldd	r23, Y+12	; 0x0c
    2188:	8d 85       	ldd	r24, Y+13	; 0x0d
    218a:	9e 85       	ldd	r25, Y+14	; 0x0e
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	40 e2       	ldi	r20, 0x20	; 32
    2192:	51 e4       	ldi	r21, 0x41	; 65
    2194:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	bc 01       	movw	r22, r24
    219e:	cd 01       	movw	r24, r26
    21a0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	9e 83       	std	Y+6, r25	; 0x06
    21aa:	8d 83       	std	Y+5, r24	; 0x05
    21ac:	0f c0       	rjmp	.+30     	; 0x21cc <calc_sum+0x208>
    21ae:	80 e9       	ldi	r24, 0x90	; 144
    21b0:	91 e0       	ldi	r25, 0x01	; 1
    21b2:	9c 83       	std	Y+4, r25	; 0x04
    21b4:	8b 83       	std	Y+3, r24	; 0x03
    21b6:	8b 81       	ldd	r24, Y+3	; 0x03
    21b8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ba:	01 97       	sbiw	r24, 0x01	; 1
    21bc:	f1 f7       	brne	.-4      	; 0x21ba <calc_sum+0x1f6>
    21be:	9c 83       	std	Y+4, r25	; 0x04
    21c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c2:	8d 81       	ldd	r24, Y+5	; 0x05
    21c4:	9e 81       	ldd	r25, Y+6	; 0x06
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	9e 83       	std	Y+6, r25	; 0x06
    21ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21cc:	8d 81       	ldd	r24, Y+5	; 0x05
    21ce:	9e 81       	ldd	r25, Y+6	; 0x06
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	69 f7       	brne	.-38     	; 0x21ae <calc_sum+0x1ea>
    21d4:	14 c0       	rjmp	.+40     	; 0x21fe <calc_sum+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d6:	6f 81       	ldd	r22, Y+7	; 0x07
    21d8:	78 85       	ldd	r23, Y+8	; 0x08
    21da:	89 85       	ldd	r24, Y+9	; 0x09
    21dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21de:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	9e 83       	std	Y+6, r25	; 0x06
    21e8:	8d 83       	std	Y+5, r24	; 0x05
    21ea:	8d 81       	ldd	r24, Y+5	; 0x05
    21ec:	9e 81       	ldd	r25, Y+6	; 0x06
    21ee:	9a 83       	std	Y+2, r25	; 0x02
    21f0:	89 83       	std	Y+1, r24	; 0x01
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	9a 81       	ldd	r25, Y+2	; 0x02
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	f1 f7       	brne	.-4      	; 0x21f6 <calc_sum+0x232>
    21fa:	9a 83       	std	Y+2, r25	; 0x02
    21fc:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *  Display result on LCD and wait until enter c
	 */
	LCD_moveCursor(1, 0);
	LCD_intgerToString(num1+num2);
	while(key != 'c')
    21fe:	80 91 86 01 	lds	r24, 0x0186
    2202:	83 36       	cpi	r24, 0x63	; 99
    2204:	09 f0       	breq	.+2      	; 0x2208 <calc_sum+0x244>
    2206:	85 cf       	rjmp	.-246    	; 0x2112 <calc_sum+0x14e>
	{
		key=KEYPAD_getPressedKey();
		_delay_ms(200);
	}
	LCD_clearScreen();
    2208:	0e 94 4c 22 	call	0x4498	; 0x4498 <LCD_clearScreen>
}
    220c:	6e 96       	adiw	r28, 0x1e	; 30
    220e:	0f b6       	in	r0, 0x3f	; 63
    2210:	f8 94       	cli
    2212:	de bf       	out	0x3e, r29	; 62
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	cd bf       	out	0x3d, r28	; 61
    2218:	cf 91       	pop	r28
    221a:	df 91       	pop	r29
    221c:	1f 91       	pop	r17
    221e:	0f 91       	pop	r16
    2220:	ff 90       	pop	r15
    2222:	ef 90       	pop	r14
    2224:	08 95       	ret

00002226 <calc_sub>:
/*
 * Description :
 * Concatenate all digits of two number then display result of sub on LCD
 */
void calc_sub(float32 *first_num,float32*second_num,uint8 digit1,uint8 digit2)
{
    2226:	ef 92       	push	r14
    2228:	ff 92       	push	r15
    222a:	0f 93       	push	r16
    222c:	1f 93       	push	r17
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	6a 97       	sbiw	r28, 0x1a	; 26
    2238:	0f b6       	in	r0, 0x3f	; 63
    223a:	f8 94       	cli
    223c:	de bf       	out	0x3e, r29	; 62
    223e:	0f be       	out	0x3f, r0	; 63
    2240:	cd bf       	out	0x3d, r28	; 61
    2242:	9e 8b       	std	Y+22, r25	; 0x16
    2244:	8d 8b       	std	Y+21, r24	; 0x15
    2246:	78 8f       	std	Y+24, r23	; 0x18
    2248:	6f 8b       	std	Y+23, r22	; 0x17
    224a:	49 8f       	std	Y+25, r20	; 0x19
    224c:	2a 8f       	std	Y+26, r18	; 0x1a
	uint16 num1=first_num[0];
    224e:	ed 89       	ldd	r30, Y+21	; 0x15
    2250:	fe 89       	ldd	r31, Y+22	; 0x16
    2252:	80 81       	ld	r24, Z
    2254:	91 81       	ldd	r25, Z+1	; 0x01
    2256:	a2 81       	ldd	r26, Z+2	; 0x02
    2258:	b3 81       	ldd	r27, Z+3	; 0x03
    225a:	bc 01       	movw	r22, r24
    225c:	cd 01       	movw	r24, r26
    225e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	9c 8b       	std	Y+20, r25	; 0x14
    2268:	8b 8b       	std	Y+19, r24	; 0x13
	uint16 num2=second_num[0];
    226a:	ef 89       	ldd	r30, Y+23	; 0x17
    226c:	f8 8d       	ldd	r31, Y+24	; 0x18
    226e:	80 81       	ld	r24, Z
    2270:	91 81       	ldd	r25, Z+1	; 0x01
    2272:	a2 81       	ldd	r26, Z+2	; 0x02
    2274:	b3 81       	ldd	r27, Z+3	; 0x03
    2276:	bc 01       	movw	r22, r24
    2278:	cd 01       	movw	r24, r26
    227a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	9a 8b       	std	Y+18, r25	; 0x12
    2284:	89 8b       	std	Y+17, r24	; 0x11
	/*
	 *  Concatenate all digits of first number
	 */
	for(uint8 counter=1;counter<digit1;counter++)
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	88 8b       	std	Y+16, r24	; 0x10
    228a:	37 c0       	rjmp	.+110    	; 0x22fa <calc_sub+0xd4>
	{
		num1 = num1*10 +first_num[counter];
    228c:	8b 89       	ldd	r24, Y+19	; 0x13
    228e:	9c 89       	ldd	r25, Y+20	; 0x14
    2290:	9c 01       	movw	r18, r24
    2292:	22 0f       	add	r18, r18
    2294:	33 1f       	adc	r19, r19
    2296:	c9 01       	movw	r24, r18
    2298:	88 0f       	add	r24, r24
    229a:	99 1f       	adc	r25, r25
    229c:	88 0f       	add	r24, r24
    229e:	99 1f       	adc	r25, r25
    22a0:	82 0f       	add	r24, r18
    22a2:	93 1f       	adc	r25, r19
    22a4:	cc 01       	movw	r24, r24
    22a6:	a0 e0       	ldi	r26, 0x00	; 0
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	bc 01       	movw	r22, r24
    22ac:	cd 01       	movw	r24, r26
    22ae:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    22b2:	7b 01       	movw	r14, r22
    22b4:	8c 01       	movw	r16, r24
    22b6:	88 89       	ldd	r24, Y+16	; 0x10
    22b8:	88 2f       	mov	r24, r24
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	9c 01       	movw	r18, r24
    22be:	22 0f       	add	r18, r18
    22c0:	33 1f       	adc	r19, r19
    22c2:	22 0f       	add	r18, r18
    22c4:	33 1f       	adc	r19, r19
    22c6:	8d 89       	ldd	r24, Y+21	; 0x15
    22c8:	9e 89       	ldd	r25, Y+22	; 0x16
    22ca:	fc 01       	movw	r30, r24
    22cc:	e2 0f       	add	r30, r18
    22ce:	f3 1f       	adc	r31, r19
    22d0:	20 81       	ld	r18, Z
    22d2:	31 81       	ldd	r19, Z+1	; 0x01
    22d4:	42 81       	ldd	r20, Z+2	; 0x02
    22d6:	53 81       	ldd	r21, Z+3	; 0x03
    22d8:	c8 01       	movw	r24, r16
    22da:	b7 01       	movw	r22, r14
    22dc:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	bc 01       	movw	r22, r24
    22e6:	cd 01       	movw	r24, r26
    22e8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	9c 8b       	std	Y+20, r25	; 0x14
    22f2:	8b 8b       	std	Y+19, r24	; 0x13
	uint16 num1=first_num[0];
	uint16 num2=second_num[0];
	/*
	 *  Concatenate all digits of first number
	 */
	for(uint8 counter=1;counter<digit1;counter++)
    22f4:	88 89       	ldd	r24, Y+16	; 0x10
    22f6:	8f 5f       	subi	r24, 0xFF	; 255
    22f8:	88 8b       	std	Y+16, r24	; 0x10
    22fa:	98 89       	ldd	r25, Y+16	; 0x10
    22fc:	89 8d       	ldd	r24, Y+25	; 0x19
    22fe:	98 17       	cp	r25, r24
    2300:	28 f2       	brcs	.-118    	; 0x228c <calc_sub+0x66>
		num1 = num1*10 +first_num[counter];
	}
	/*
	 *  Concatenate all digits of second number
	 */
	for(uint8 counter=1;counter<digit2;counter++)
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	8f 87       	std	Y+15, r24	; 0x0f
    2306:	37 c0       	rjmp	.+110    	; 0x2376 <calc_sub+0x150>
	{
		num2= num2*10 +second_num[counter];
    2308:	89 89       	ldd	r24, Y+17	; 0x11
    230a:	9a 89       	ldd	r25, Y+18	; 0x12
    230c:	9c 01       	movw	r18, r24
    230e:	22 0f       	add	r18, r18
    2310:	33 1f       	adc	r19, r19
    2312:	c9 01       	movw	r24, r18
    2314:	88 0f       	add	r24, r24
    2316:	99 1f       	adc	r25, r25
    2318:	88 0f       	add	r24, r24
    231a:	99 1f       	adc	r25, r25
    231c:	82 0f       	add	r24, r18
    231e:	93 1f       	adc	r25, r19
    2320:	cc 01       	movw	r24, r24
    2322:	a0 e0       	ldi	r26, 0x00	; 0
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    232e:	7b 01       	movw	r14, r22
    2330:	8c 01       	movw	r16, r24
    2332:	8f 85       	ldd	r24, Y+15	; 0x0f
    2334:	88 2f       	mov	r24, r24
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	9c 01       	movw	r18, r24
    233a:	22 0f       	add	r18, r18
    233c:	33 1f       	adc	r19, r19
    233e:	22 0f       	add	r18, r18
    2340:	33 1f       	adc	r19, r19
    2342:	8f 89       	ldd	r24, Y+23	; 0x17
    2344:	98 8d       	ldd	r25, Y+24	; 0x18
    2346:	fc 01       	movw	r30, r24
    2348:	e2 0f       	add	r30, r18
    234a:	f3 1f       	adc	r31, r19
    234c:	20 81       	ld	r18, Z
    234e:	31 81       	ldd	r19, Z+1	; 0x01
    2350:	42 81       	ldd	r20, Z+2	; 0x02
    2352:	53 81       	ldd	r21, Z+3	; 0x03
    2354:	c8 01       	movw	r24, r16
    2356:	b7 01       	movw	r22, r14
    2358:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	bc 01       	movw	r22, r24
    2362:	cd 01       	movw	r24, r26
    2364:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	9a 8b       	std	Y+18, r25	; 0x12
    236e:	89 8b       	std	Y+17, r24	; 0x11
		num1 = num1*10 +first_num[counter];
	}
	/*
	 *  Concatenate all digits of second number
	 */
	for(uint8 counter=1;counter<digit2;counter++)
    2370:	8f 85       	ldd	r24, Y+15	; 0x0f
    2372:	8f 5f       	subi	r24, 0xFF	; 255
    2374:	8f 87       	std	Y+15, r24	; 0x0f
    2376:	9f 85       	ldd	r25, Y+15	; 0x0f
    2378:	8a 8d       	ldd	r24, Y+26	; 0x1a
    237a:	98 17       	cp	r25, r24
    237c:	28 f2       	brcs	.-118    	; 0x2308 <calc_sub+0xe2>


	/*
	 *  Display result on LCD and wait until enter c
	 */
	LCD_moveCursor(1,0);
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	60 e0       	ldi	r22, 0x00	; 0
    2382:	0e 94 a0 21 	call	0x4340	; 0x4340 <LCD_moveCursor>
	LCD_intgerToString(num1-num2);
    2386:	2b 89       	ldd	r18, Y+19	; 0x13
    2388:	3c 89       	ldd	r19, Y+20	; 0x14
    238a:	89 89       	ldd	r24, Y+17	; 0x11
    238c:	9a 89       	ldd	r25, Y+18	; 0x12
    238e:	a9 01       	movw	r20, r18
    2390:	48 1b       	sub	r20, r24
    2392:	59 0b       	sbc	r21, r25
    2394:	ca 01       	movw	r24, r20
    2396:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_intgerToString>
    239a:	76 c0       	rjmp	.+236    	; 0x2488 <calc_sub+0x262>
	while(key != 'c')
	{
		key=KEYPAD_getPressedKey();
    239c:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <KEYPAD_getPressedKey>
    23a0:	80 93 86 01 	sts	0x0186, r24
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	a8 e4       	ldi	r26, 0x48	; 72
    23aa:	b3 e4       	ldi	r27, 0x43	; 67
    23ac:	8b 87       	std	Y+11, r24	; 0x0b
    23ae:	9c 87       	std	Y+12, r25	; 0x0c
    23b0:	ad 87       	std	Y+13, r26	; 0x0d
    23b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	4a e7       	ldi	r20, 0x7A	; 122
    23c2:	55 e4       	ldi	r21, 0x45	; 69
    23c4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	8f 83       	std	Y+7, r24	; 0x07
    23ce:	98 87       	std	Y+8, r25	; 0x08
    23d0:	a9 87       	std	Y+9, r26	; 0x09
    23d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23d4:	6f 81       	ldd	r22, Y+7	; 0x07
    23d6:	78 85       	ldd	r23, Y+8	; 0x08
    23d8:	89 85       	ldd	r24, Y+9	; 0x09
    23da:	9a 85       	ldd	r25, Y+10	; 0x0a
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	40 e8       	ldi	r20, 0x80	; 128
    23e2:	5f e3       	ldi	r21, 0x3F	; 63
    23e4:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    23e8:	88 23       	and	r24, r24
    23ea:	2c f4       	brge	.+10     	; 0x23f6 <calc_sub+0x1d0>
		__ticks = 1;
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	9e 83       	std	Y+6, r25	; 0x06
    23f2:	8d 83       	std	Y+5, r24	; 0x05
    23f4:	3f c0       	rjmp	.+126    	; 0x2474 <calc_sub+0x24e>
	else if (__tmp > 65535)
    23f6:	6f 81       	ldd	r22, Y+7	; 0x07
    23f8:	78 85       	ldd	r23, Y+8	; 0x08
    23fa:	89 85       	ldd	r24, Y+9	; 0x09
    23fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	3f ef       	ldi	r19, 0xFF	; 255
    2402:	4f e7       	ldi	r20, 0x7F	; 127
    2404:	57 e4       	ldi	r21, 0x47	; 71
    2406:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    240a:	18 16       	cp	r1, r24
    240c:	4c f5       	brge	.+82     	; 0x2460 <calc_sub+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2410:	7c 85       	ldd	r23, Y+12	; 0x0c
    2412:	8d 85       	ldd	r24, Y+13	; 0x0d
    2414:	9e 85       	ldd	r25, Y+14	; 0x0e
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	40 e2       	ldi	r20, 0x20	; 32
    241c:	51 e4       	ldi	r21, 0x41	; 65
    241e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	bc 01       	movw	r22, r24
    2428:	cd 01       	movw	r24, r26
    242a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	9e 83       	std	Y+6, r25	; 0x06
    2434:	8d 83       	std	Y+5, r24	; 0x05
    2436:	0f c0       	rjmp	.+30     	; 0x2456 <calc_sub+0x230>
    2438:	80 e9       	ldi	r24, 0x90	; 144
    243a:	91 e0       	ldi	r25, 0x01	; 1
    243c:	9c 83       	std	Y+4, r25	; 0x04
    243e:	8b 83       	std	Y+3, r24	; 0x03
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	9c 81       	ldd	r25, Y+4	; 0x04
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	f1 f7       	brne	.-4      	; 0x2444 <calc_sub+0x21e>
    2448:	9c 83       	std	Y+4, r25	; 0x04
    244a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244c:	8d 81       	ldd	r24, Y+5	; 0x05
    244e:	9e 81       	ldd	r25, Y+6	; 0x06
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	9e 83       	std	Y+6, r25	; 0x06
    2454:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2456:	8d 81       	ldd	r24, Y+5	; 0x05
    2458:	9e 81       	ldd	r25, Y+6	; 0x06
    245a:	00 97       	sbiw	r24, 0x00	; 0
    245c:	69 f7       	brne	.-38     	; 0x2438 <calc_sub+0x212>
    245e:	14 c0       	rjmp	.+40     	; 0x2488 <calc_sub+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2460:	6f 81       	ldd	r22, Y+7	; 0x07
    2462:	78 85       	ldd	r23, Y+8	; 0x08
    2464:	89 85       	ldd	r24, Y+9	; 0x09
    2466:	9a 85       	ldd	r25, Y+10	; 0x0a
    2468:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	9e 83       	std	Y+6, r25	; 0x06
    2472:	8d 83       	std	Y+5, r24	; 0x05
    2474:	8d 81       	ldd	r24, Y+5	; 0x05
    2476:	9e 81       	ldd	r25, Y+6	; 0x06
    2478:	9a 83       	std	Y+2, r25	; 0x02
    247a:	89 83       	std	Y+1, r24	; 0x01
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	9a 81       	ldd	r25, Y+2	; 0x02
    2480:	01 97       	sbiw	r24, 0x01	; 1
    2482:	f1 f7       	brne	.-4      	; 0x2480 <calc_sub+0x25a>
    2484:	9a 83       	std	Y+2, r25	; 0x02
    2486:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *  Display result on LCD and wait until enter c
	 */
	LCD_moveCursor(1,0);
	LCD_intgerToString(num1-num2);
	while(key != 'c')
    2488:	80 91 86 01 	lds	r24, 0x0186
    248c:	83 36       	cpi	r24, 0x63	; 99
    248e:	09 f0       	breq	.+2      	; 0x2492 <calc_sub+0x26c>
    2490:	85 cf       	rjmp	.-246    	; 0x239c <calc_sub+0x176>
	{
		key=KEYPAD_getPressedKey();
		_delay_ms(200);
	}
	LCD_clearScreen();
    2492:	0e 94 4c 22 	call	0x4498	; 0x4498 <LCD_clearScreen>
}
    2496:	6a 96       	adiw	r28, 0x1a	; 26
    2498:	0f b6       	in	r0, 0x3f	; 63
    249a:	f8 94       	cli
    249c:	de bf       	out	0x3e, r29	; 62
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	cd bf       	out	0x3d, r28	; 61
    24a2:	cf 91       	pop	r28
    24a4:	df 91       	pop	r29
    24a6:	1f 91       	pop	r17
    24a8:	0f 91       	pop	r16
    24aa:	ff 90       	pop	r15
    24ac:	ef 90       	pop	r14
    24ae:	08 95       	ret

000024b0 <calc_multi>:
/*
 * Description :
 * Concatenate all digits of two number then display result of multi on LCD
 */
void calc_multi(float32 *first_num,float32*second_num,uint8 digit1,uint8 digit2)
{
    24b0:	ef 92       	push	r14
    24b2:	ff 92       	push	r15
    24b4:	0f 93       	push	r16
    24b6:	1f 93       	push	r17
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
    24c0:	6e 97       	sbiw	r28, 0x1e	; 30
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	9a 8f       	std	Y+26, r25	; 0x1a
    24ce:	89 8f       	std	Y+25, r24	; 0x19
    24d0:	7c 8f       	std	Y+28, r23	; 0x1c
    24d2:	6b 8f       	std	Y+27, r22	; 0x1b
    24d4:	4d 8f       	std	Y+29, r20	; 0x1d
    24d6:	2e 8f       	std	Y+30, r18	; 0x1e
	float32 num1=first_num[0];
    24d8:	e9 8d       	ldd	r30, Y+25	; 0x19
    24da:	fa 8d       	ldd	r31, Y+26	; 0x1a
    24dc:	80 81       	ld	r24, Z
    24de:	91 81       	ldd	r25, Z+1	; 0x01
    24e0:	a2 81       	ldd	r26, Z+2	; 0x02
    24e2:	b3 81       	ldd	r27, Z+3	; 0x03
    24e4:	8d 8b       	std	Y+21, r24	; 0x15
    24e6:	9e 8b       	std	Y+22, r25	; 0x16
    24e8:	af 8b       	std	Y+23, r26	; 0x17
    24ea:	b8 8f       	std	Y+24, r27	; 0x18
	float32 num2=second_num[0];
    24ec:	eb 8d       	ldd	r30, Y+27	; 0x1b
    24ee:	fc 8d       	ldd	r31, Y+28	; 0x1c
    24f0:	80 81       	ld	r24, Z
    24f2:	91 81       	ldd	r25, Z+1	; 0x01
    24f4:	a2 81       	ldd	r26, Z+2	; 0x02
    24f6:	b3 81       	ldd	r27, Z+3	; 0x03
    24f8:	89 8b       	std	Y+17, r24	; 0x11
    24fa:	9a 8b       	std	Y+18, r25	; 0x12
    24fc:	ab 8b       	std	Y+19, r26	; 0x13
    24fe:	bc 8b       	std	Y+20, r27	; 0x14

	/*
	 *  Concatenate all digits of first number
	 */
	for(uint8 counter=1;counter<digit1;counter++)
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	88 8b       	std	Y+16, r24	; 0x10
    2504:	2c c0       	rjmp	.+88     	; 0x255e <calc_multi+0xae>
	{
		num1 = num1*10 +first_num[counter];
    2506:	6d 89       	ldd	r22, Y+21	; 0x15
    2508:	7e 89       	ldd	r23, Y+22	; 0x16
    250a:	8f 89       	ldd	r24, Y+23	; 0x17
    250c:	98 8d       	ldd	r25, Y+24	; 0x18
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	40 e2       	ldi	r20, 0x20	; 32
    2514:	51 e4       	ldi	r21, 0x41	; 65
    2516:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	7c 01       	movw	r14, r24
    2520:	8d 01       	movw	r16, r26
    2522:	88 89       	ldd	r24, Y+16	; 0x10
    2524:	88 2f       	mov	r24, r24
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	9c 01       	movw	r18, r24
    252a:	22 0f       	add	r18, r18
    252c:	33 1f       	adc	r19, r19
    252e:	22 0f       	add	r18, r18
    2530:	33 1f       	adc	r19, r19
    2532:	89 8d       	ldd	r24, Y+25	; 0x19
    2534:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2536:	fc 01       	movw	r30, r24
    2538:	e2 0f       	add	r30, r18
    253a:	f3 1f       	adc	r31, r19
    253c:	20 81       	ld	r18, Z
    253e:	31 81       	ldd	r19, Z+1	; 0x01
    2540:	42 81       	ldd	r20, Z+2	; 0x02
    2542:	53 81       	ldd	r21, Z+3	; 0x03
    2544:	c8 01       	movw	r24, r16
    2546:	b7 01       	movw	r22, r14
    2548:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	8d 8b       	std	Y+21, r24	; 0x15
    2552:	9e 8b       	std	Y+22, r25	; 0x16
    2554:	af 8b       	std	Y+23, r26	; 0x17
    2556:	b8 8f       	std	Y+24, r27	; 0x18
	float32 num2=second_num[0];

	/*
	 *  Concatenate all digits of first number
	 */
	for(uint8 counter=1;counter<digit1;counter++)
    2558:	88 89       	ldd	r24, Y+16	; 0x10
    255a:	8f 5f       	subi	r24, 0xFF	; 255
    255c:	88 8b       	std	Y+16, r24	; 0x10
    255e:	98 89       	ldd	r25, Y+16	; 0x10
    2560:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2562:	98 17       	cp	r25, r24
    2564:	80 f2       	brcs	.-96     	; 0x2506 <calc_multi+0x56>
		num1 = num1*10 +first_num[counter];
	}
	/*
	 *  Concatenate all digits of second number
	 */
	for(uint8 counter=1;counter<digit2;counter++)
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	8f 87       	std	Y+15, r24	; 0x0f
    256a:	2c c0       	rjmp	.+88     	; 0x25c4 <calc_multi+0x114>
	{
		num2= num2*10 +second_num[counter];
    256c:	69 89       	ldd	r22, Y+17	; 0x11
    256e:	7a 89       	ldd	r23, Y+18	; 0x12
    2570:	8b 89       	ldd	r24, Y+19	; 0x13
    2572:	9c 89       	ldd	r25, Y+20	; 0x14
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	40 e2       	ldi	r20, 0x20	; 32
    257a:	51 e4       	ldi	r21, 0x41	; 65
    257c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	7c 01       	movw	r14, r24
    2586:	8d 01       	movw	r16, r26
    2588:	8f 85       	ldd	r24, Y+15	; 0x0f
    258a:	88 2f       	mov	r24, r24
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	9c 01       	movw	r18, r24
    2590:	22 0f       	add	r18, r18
    2592:	33 1f       	adc	r19, r19
    2594:	22 0f       	add	r18, r18
    2596:	33 1f       	adc	r19, r19
    2598:	8b 8d       	ldd	r24, Y+27	; 0x1b
    259a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    259c:	fc 01       	movw	r30, r24
    259e:	e2 0f       	add	r30, r18
    25a0:	f3 1f       	adc	r31, r19
    25a2:	20 81       	ld	r18, Z
    25a4:	31 81       	ldd	r19, Z+1	; 0x01
    25a6:	42 81       	ldd	r20, Z+2	; 0x02
    25a8:	53 81       	ldd	r21, Z+3	; 0x03
    25aa:	c8 01       	movw	r24, r16
    25ac:	b7 01       	movw	r22, r14
    25ae:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	89 8b       	std	Y+17, r24	; 0x11
    25b8:	9a 8b       	std	Y+18, r25	; 0x12
    25ba:	ab 8b       	std	Y+19, r26	; 0x13
    25bc:	bc 8b       	std	Y+20, r27	; 0x14
		num1 = num1*10 +first_num[counter];
	}
	/*
	 *  Concatenate all digits of second number
	 */
	for(uint8 counter=1;counter<digit2;counter++)
    25be:	8f 85       	ldd	r24, Y+15	; 0x0f
    25c0:	8f 5f       	subi	r24, 0xFF	; 255
    25c2:	8f 87       	std	Y+15, r24	; 0x0f
    25c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    25c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25c8:	98 17       	cp	r25, r24
    25ca:	80 f2       	brcs	.-96     	; 0x256c <calc_multi+0xbc>


	/*
	 *  Display result on LCD and wait until enter c
	 */
	LCD_moveCursor(1, 0);
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	60 e0       	ldi	r22, 0x00	; 0
    25d0:	0e 94 a0 21 	call	0x4340	; 0x4340 <LCD_moveCursor>
	LCD_intgerToString(num1*num2);
    25d4:	6d 89       	ldd	r22, Y+21	; 0x15
    25d6:	7e 89       	ldd	r23, Y+22	; 0x16
    25d8:	8f 89       	ldd	r24, Y+23	; 0x17
    25da:	98 8d       	ldd	r25, Y+24	; 0x18
    25dc:	29 89       	ldd	r18, Y+17	; 0x11
    25de:	3a 89       	ldd	r19, Y+18	; 0x12
    25e0:	4b 89       	ldd	r20, Y+19	; 0x13
    25e2:	5c 89       	ldd	r21, Y+20	; 0x14
    25e4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	bc 01       	movw	r22, r24
    25ee:	cd 01       	movw	r24, r26
    25f0:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <LCD_intgerToString>
    25fc:	76 c0       	rjmp	.+236    	; 0x26ea <calc_multi+0x23a>
	while(key != 'c')
	{
		key=KEYPAD_getPressedKey();
    25fe:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <KEYPAD_getPressedKey>
    2602:	80 93 86 01 	sts	0x0186, r24
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	a8 e4       	ldi	r26, 0x48	; 72
    260c:	b3 e4       	ldi	r27, 0x43	; 67
    260e:	8b 87       	std	Y+11, r24	; 0x0b
    2610:	9c 87       	std	Y+12, r25	; 0x0c
    2612:	ad 87       	std	Y+13, r26	; 0x0d
    2614:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2616:	6b 85       	ldd	r22, Y+11	; 0x0b
    2618:	7c 85       	ldd	r23, Y+12	; 0x0c
    261a:	8d 85       	ldd	r24, Y+13	; 0x0d
    261c:	9e 85       	ldd	r25, Y+14	; 0x0e
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	4a e7       	ldi	r20, 0x7A	; 122
    2624:	55 e4       	ldi	r21, 0x45	; 69
    2626:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	8f 83       	std	Y+7, r24	; 0x07
    2630:	98 87       	std	Y+8, r25	; 0x08
    2632:	a9 87       	std	Y+9, r26	; 0x09
    2634:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2636:	6f 81       	ldd	r22, Y+7	; 0x07
    2638:	78 85       	ldd	r23, Y+8	; 0x08
    263a:	89 85       	ldd	r24, Y+9	; 0x09
    263c:	9a 85       	ldd	r25, Y+10	; 0x0a
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	40 e8       	ldi	r20, 0x80	; 128
    2644:	5f e3       	ldi	r21, 0x3F	; 63
    2646:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    264a:	88 23       	and	r24, r24
    264c:	2c f4       	brge	.+10     	; 0x2658 <calc_multi+0x1a8>
		__ticks = 1;
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	9e 83       	std	Y+6, r25	; 0x06
    2654:	8d 83       	std	Y+5, r24	; 0x05
    2656:	3f c0       	rjmp	.+126    	; 0x26d6 <calc_multi+0x226>
	else if (__tmp > 65535)
    2658:	6f 81       	ldd	r22, Y+7	; 0x07
    265a:	78 85       	ldd	r23, Y+8	; 0x08
    265c:	89 85       	ldd	r24, Y+9	; 0x09
    265e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	3f ef       	ldi	r19, 0xFF	; 255
    2664:	4f e7       	ldi	r20, 0x7F	; 127
    2666:	57 e4       	ldi	r21, 0x47	; 71
    2668:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    266c:	18 16       	cp	r1, r24
    266e:	4c f5       	brge	.+82     	; 0x26c2 <calc_multi+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2670:	6b 85       	ldd	r22, Y+11	; 0x0b
    2672:	7c 85       	ldd	r23, Y+12	; 0x0c
    2674:	8d 85       	ldd	r24, Y+13	; 0x0d
    2676:	9e 85       	ldd	r25, Y+14	; 0x0e
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e2       	ldi	r20, 0x20	; 32
    267e:	51 e4       	ldi	r21, 0x41	; 65
    2680:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	bc 01       	movw	r22, r24
    268a:	cd 01       	movw	r24, r26
    268c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	9e 83       	std	Y+6, r25	; 0x06
    2696:	8d 83       	std	Y+5, r24	; 0x05
    2698:	0f c0       	rjmp	.+30     	; 0x26b8 <calc_multi+0x208>
    269a:	80 e9       	ldi	r24, 0x90	; 144
    269c:	91 e0       	ldi	r25, 0x01	; 1
    269e:	9c 83       	std	Y+4, r25	; 0x04
    26a0:	8b 83       	std	Y+3, r24	; 0x03
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	9c 81       	ldd	r25, Y+4	; 0x04
    26a6:	01 97       	sbiw	r24, 0x01	; 1
    26a8:	f1 f7       	brne	.-4      	; 0x26a6 <calc_multi+0x1f6>
    26aa:	9c 83       	std	Y+4, r25	; 0x04
    26ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ae:	8d 81       	ldd	r24, Y+5	; 0x05
    26b0:	9e 81       	ldd	r25, Y+6	; 0x06
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	9e 83       	std	Y+6, r25	; 0x06
    26b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ba:	9e 81       	ldd	r25, Y+6	; 0x06
    26bc:	00 97       	sbiw	r24, 0x00	; 0
    26be:	69 f7       	brne	.-38     	; 0x269a <calc_multi+0x1ea>
    26c0:	14 c0       	rjmp	.+40     	; 0x26ea <calc_multi+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c2:	6f 81       	ldd	r22, Y+7	; 0x07
    26c4:	78 85       	ldd	r23, Y+8	; 0x08
    26c6:	89 85       	ldd	r24, Y+9	; 0x09
    26c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ca:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	9e 83       	std	Y+6, r25	; 0x06
    26d4:	8d 83       	std	Y+5, r24	; 0x05
    26d6:	8d 81       	ldd	r24, Y+5	; 0x05
    26d8:	9e 81       	ldd	r25, Y+6	; 0x06
    26da:	9a 83       	std	Y+2, r25	; 0x02
    26dc:	89 83       	std	Y+1, r24	; 0x01
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	9a 81       	ldd	r25, Y+2	; 0x02
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	f1 f7       	brne	.-4      	; 0x26e2 <calc_multi+0x232>
    26e6:	9a 83       	std	Y+2, r25	; 0x02
    26e8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *  Display result on LCD and wait until enter c
	 */
	LCD_moveCursor(1, 0);
	LCD_intgerToString(num1*num2);
	while(key != 'c')
    26ea:	80 91 86 01 	lds	r24, 0x0186
    26ee:	83 36       	cpi	r24, 0x63	; 99
    26f0:	09 f0       	breq	.+2      	; 0x26f4 <calc_multi+0x244>
    26f2:	85 cf       	rjmp	.-246    	; 0x25fe <calc_multi+0x14e>
	{
		key=KEYPAD_getPressedKey();
		_delay_ms(200);
	}
	LCD_clearScreen();
    26f4:	0e 94 4c 22 	call	0x4498	; 0x4498 <LCD_clearScreen>
}
    26f8:	6e 96       	adiw	r28, 0x1e	; 30
    26fa:	0f b6       	in	r0, 0x3f	; 63
    26fc:	f8 94       	cli
    26fe:	de bf       	out	0x3e, r29	; 62
    2700:	0f be       	out	0x3f, r0	; 63
    2702:	cd bf       	out	0x3d, r28	; 61
    2704:	cf 91       	pop	r28
    2706:	df 91       	pop	r29
    2708:	1f 91       	pop	r17
    270a:	0f 91       	pop	r16
    270c:	ff 90       	pop	r15
    270e:	ef 90       	pop	r14
    2710:	08 95       	ret

00002712 <calc_div>:
/*
 * Description :
 * Concatenate all digits of two number then display result of div on LCD
 */
void calc_div(float32 *first_num,float32*second_num,uint8 digit1,uint8 digit2)
{
    2712:	ef 92       	push	r14
    2714:	ff 92       	push	r15
    2716:	0f 93       	push	r16
    2718:	1f 93       	push	r17
    271a:	df 93       	push	r29
    271c:	cf 93       	push	r28
    271e:	cd b7       	in	r28, 0x3d	; 61
    2720:	de b7       	in	r29, 0x3e	; 62
    2722:	6e 97       	sbiw	r28, 0x1e	; 30
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	f8 94       	cli
    2728:	de bf       	out	0x3e, r29	; 62
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	cd bf       	out	0x3d, r28	; 61
    272e:	9a 8f       	std	Y+26, r25	; 0x1a
    2730:	89 8f       	std	Y+25, r24	; 0x19
    2732:	7c 8f       	std	Y+28, r23	; 0x1c
    2734:	6b 8f       	std	Y+27, r22	; 0x1b
    2736:	4d 8f       	std	Y+29, r20	; 0x1d
    2738:	2e 8f       	std	Y+30, r18	; 0x1e
	float32 num1=first_num[0];
    273a:	e9 8d       	ldd	r30, Y+25	; 0x19
    273c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    273e:	80 81       	ld	r24, Z
    2740:	91 81       	ldd	r25, Z+1	; 0x01
    2742:	a2 81       	ldd	r26, Z+2	; 0x02
    2744:	b3 81       	ldd	r27, Z+3	; 0x03
    2746:	8d 8b       	std	Y+21, r24	; 0x15
    2748:	9e 8b       	std	Y+22, r25	; 0x16
    274a:	af 8b       	std	Y+23, r26	; 0x17
    274c:	b8 8f       	std	Y+24, r27	; 0x18
	float32 num2=second_num[0];
    274e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2750:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2752:	80 81       	ld	r24, Z
    2754:	91 81       	ldd	r25, Z+1	; 0x01
    2756:	a2 81       	ldd	r26, Z+2	; 0x02
    2758:	b3 81       	ldd	r27, Z+3	; 0x03
    275a:	89 8b       	std	Y+17, r24	; 0x11
    275c:	9a 8b       	std	Y+18, r25	; 0x12
    275e:	ab 8b       	std	Y+19, r26	; 0x13
    2760:	bc 8b       	std	Y+20, r27	; 0x14

	/*
	 *  Concatenate all digits of first number
	 */
	for(uint8 counter=1;counter<digit1;counter++)
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	88 8b       	std	Y+16, r24	; 0x10
    2766:	2c c0       	rjmp	.+88     	; 0x27c0 <calc_div+0xae>
	{
		num1 = num1*10 +first_num[counter];
    2768:	6d 89       	ldd	r22, Y+21	; 0x15
    276a:	7e 89       	ldd	r23, Y+22	; 0x16
    276c:	8f 89       	ldd	r24, Y+23	; 0x17
    276e:	98 8d       	ldd	r25, Y+24	; 0x18
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	40 e2       	ldi	r20, 0x20	; 32
    2776:	51 e4       	ldi	r21, 0x41	; 65
    2778:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	7c 01       	movw	r14, r24
    2782:	8d 01       	movw	r16, r26
    2784:	88 89       	ldd	r24, Y+16	; 0x10
    2786:	88 2f       	mov	r24, r24
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	9c 01       	movw	r18, r24
    278c:	22 0f       	add	r18, r18
    278e:	33 1f       	adc	r19, r19
    2790:	22 0f       	add	r18, r18
    2792:	33 1f       	adc	r19, r19
    2794:	89 8d       	ldd	r24, Y+25	; 0x19
    2796:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2798:	fc 01       	movw	r30, r24
    279a:	e2 0f       	add	r30, r18
    279c:	f3 1f       	adc	r31, r19
    279e:	20 81       	ld	r18, Z
    27a0:	31 81       	ldd	r19, Z+1	; 0x01
    27a2:	42 81       	ldd	r20, Z+2	; 0x02
    27a4:	53 81       	ldd	r21, Z+3	; 0x03
    27a6:	c8 01       	movw	r24, r16
    27a8:	b7 01       	movw	r22, r14
    27aa:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	8d 8b       	std	Y+21, r24	; 0x15
    27b4:	9e 8b       	std	Y+22, r25	; 0x16
    27b6:	af 8b       	std	Y+23, r26	; 0x17
    27b8:	b8 8f       	std	Y+24, r27	; 0x18
	float32 num2=second_num[0];

	/*
	 *  Concatenate all digits of first number
	 */
	for(uint8 counter=1;counter<digit1;counter++)
    27ba:	88 89       	ldd	r24, Y+16	; 0x10
    27bc:	8f 5f       	subi	r24, 0xFF	; 255
    27be:	88 8b       	std	Y+16, r24	; 0x10
    27c0:	98 89       	ldd	r25, Y+16	; 0x10
    27c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27c4:	98 17       	cp	r25, r24
    27c6:	80 f2       	brcs	.-96     	; 0x2768 <calc_div+0x56>
		num1 = num1*10 +first_num[counter];
	}
	/*
	 *  Concatenate all digits of second number
	 */
	for(uint8 counter=1;counter<digit2;counter++)
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	8f 87       	std	Y+15, r24	; 0x0f
    27cc:	2c c0       	rjmp	.+88     	; 0x2826 <calc_div+0x114>
	{
		num2= num2*10 +second_num[counter];
    27ce:	69 89       	ldd	r22, Y+17	; 0x11
    27d0:	7a 89       	ldd	r23, Y+18	; 0x12
    27d2:	8b 89       	ldd	r24, Y+19	; 0x13
    27d4:	9c 89       	ldd	r25, Y+20	; 0x14
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	40 e2       	ldi	r20, 0x20	; 32
    27dc:	51 e4       	ldi	r21, 0x41	; 65
    27de:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	7c 01       	movw	r14, r24
    27e8:	8d 01       	movw	r16, r26
    27ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    27ec:	88 2f       	mov	r24, r24
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	9c 01       	movw	r18, r24
    27f2:	22 0f       	add	r18, r18
    27f4:	33 1f       	adc	r19, r19
    27f6:	22 0f       	add	r18, r18
    27f8:	33 1f       	adc	r19, r19
    27fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27fe:	fc 01       	movw	r30, r24
    2800:	e2 0f       	add	r30, r18
    2802:	f3 1f       	adc	r31, r19
    2804:	20 81       	ld	r18, Z
    2806:	31 81       	ldd	r19, Z+1	; 0x01
    2808:	42 81       	ldd	r20, Z+2	; 0x02
    280a:	53 81       	ldd	r21, Z+3	; 0x03
    280c:	c8 01       	movw	r24, r16
    280e:	b7 01       	movw	r22, r14
    2810:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	89 8b       	std	Y+17, r24	; 0x11
    281a:	9a 8b       	std	Y+18, r25	; 0x12
    281c:	ab 8b       	std	Y+19, r26	; 0x13
    281e:	bc 8b       	std	Y+20, r27	; 0x14
		num1 = num1*10 +first_num[counter];
	}
	/*
	 *  Concatenate all digits of second number
	 */
	for(uint8 counter=1;counter<digit2;counter++)
    2820:	8f 85       	ldd	r24, Y+15	; 0x0f
    2822:	8f 5f       	subi	r24, 0xFF	; 255
    2824:	8f 87       	std	Y+15, r24	; 0x0f
    2826:	9f 85       	ldd	r25, Y+15	; 0x0f
    2828:	8e 8d       	ldd	r24, Y+30	; 0x1e
    282a:	98 17       	cp	r25, r24
    282c:	80 f2       	brcs	.-96     	; 0x27ce <calc_div+0xbc>


	/*
	 *  Display result on LCD and wait until enter c
	 */
	LCD_moveCursor(1, 0);
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	60 e0       	ldi	r22, 0x00	; 0
    2832:	0e 94 a0 21 	call	0x4340	; 0x4340 <LCD_moveCursor>
	LCD_floatToString(num1/num2);
    2836:	6d 89       	ldd	r22, Y+21	; 0x15
    2838:	7e 89       	ldd	r23, Y+22	; 0x16
    283a:	8f 89       	ldd	r24, Y+23	; 0x17
    283c:	98 8d       	ldd	r25, Y+24	; 0x18
    283e:	29 89       	ldd	r18, Y+17	; 0x11
    2840:	3a 89       	ldd	r19, Y+18	; 0x12
    2842:	4b 89       	ldd	r20, Y+19	; 0x13
    2844:	5c 89       	ldd	r21, Y+20	; 0x14
    2846:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	bc 01       	movw	r22, r24
    2850:	cd 01       	movw	r24, r26
    2852:	0e 94 1e 22 	call	0x443c	; 0x443c <LCD_floatToString>
    2856:	76 c0       	rjmp	.+236    	; 0x2944 <calc_div+0x232>
	while(key != 'c')
	{
		key=KEYPAD_getPressedKey();
    2858:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <KEYPAD_getPressedKey>
    285c:	80 93 86 01 	sts	0x0186, r24
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	a8 e4       	ldi	r26, 0x48	; 72
    2866:	b3 e4       	ldi	r27, 0x43	; 67
    2868:	8b 87       	std	Y+11, r24	; 0x0b
    286a:	9c 87       	std	Y+12, r25	; 0x0c
    286c:	ad 87       	std	Y+13, r26	; 0x0d
    286e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2870:	6b 85       	ldd	r22, Y+11	; 0x0b
    2872:	7c 85       	ldd	r23, Y+12	; 0x0c
    2874:	8d 85       	ldd	r24, Y+13	; 0x0d
    2876:	9e 85       	ldd	r25, Y+14	; 0x0e
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	4a e7       	ldi	r20, 0x7A	; 122
    287e:	55 e4       	ldi	r21, 0x45	; 69
    2880:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	8f 83       	std	Y+7, r24	; 0x07
    288a:	98 87       	std	Y+8, r25	; 0x08
    288c:	a9 87       	std	Y+9, r26	; 0x09
    288e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2890:	6f 81       	ldd	r22, Y+7	; 0x07
    2892:	78 85       	ldd	r23, Y+8	; 0x08
    2894:	89 85       	ldd	r24, Y+9	; 0x09
    2896:	9a 85       	ldd	r25, Y+10	; 0x0a
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	40 e8       	ldi	r20, 0x80	; 128
    289e:	5f e3       	ldi	r21, 0x3F	; 63
    28a0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    28a4:	88 23       	and	r24, r24
    28a6:	2c f4       	brge	.+10     	; 0x28b2 <calc_div+0x1a0>
		__ticks = 1;
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	9e 83       	std	Y+6, r25	; 0x06
    28ae:	8d 83       	std	Y+5, r24	; 0x05
    28b0:	3f c0       	rjmp	.+126    	; 0x2930 <calc_div+0x21e>
	else if (__tmp > 65535)
    28b2:	6f 81       	ldd	r22, Y+7	; 0x07
    28b4:	78 85       	ldd	r23, Y+8	; 0x08
    28b6:	89 85       	ldd	r24, Y+9	; 0x09
    28b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	3f ef       	ldi	r19, 0xFF	; 255
    28be:	4f e7       	ldi	r20, 0x7F	; 127
    28c0:	57 e4       	ldi	r21, 0x47	; 71
    28c2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    28c6:	18 16       	cp	r1, r24
    28c8:	4c f5       	brge	.+82     	; 0x291c <calc_div+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    28cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    28d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	40 e2       	ldi	r20, 0x20	; 32
    28d8:	51 e4       	ldi	r21, 0x41	; 65
    28da:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	bc 01       	movw	r22, r24
    28e4:	cd 01       	movw	r24, r26
    28e6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	9e 83       	std	Y+6, r25	; 0x06
    28f0:	8d 83       	std	Y+5, r24	; 0x05
    28f2:	0f c0       	rjmp	.+30     	; 0x2912 <calc_div+0x200>
    28f4:	80 e9       	ldi	r24, 0x90	; 144
    28f6:	91 e0       	ldi	r25, 0x01	; 1
    28f8:	9c 83       	std	Y+4, r25	; 0x04
    28fa:	8b 83       	std	Y+3, r24	; 0x03
    28fc:	8b 81       	ldd	r24, Y+3	; 0x03
    28fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2900:	01 97       	sbiw	r24, 0x01	; 1
    2902:	f1 f7       	brne	.-4      	; 0x2900 <calc_div+0x1ee>
    2904:	9c 83       	std	Y+4, r25	; 0x04
    2906:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2908:	8d 81       	ldd	r24, Y+5	; 0x05
    290a:	9e 81       	ldd	r25, Y+6	; 0x06
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	9e 83       	std	Y+6, r25	; 0x06
    2910:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2912:	8d 81       	ldd	r24, Y+5	; 0x05
    2914:	9e 81       	ldd	r25, Y+6	; 0x06
    2916:	00 97       	sbiw	r24, 0x00	; 0
    2918:	69 f7       	brne	.-38     	; 0x28f4 <calc_div+0x1e2>
    291a:	14 c0       	rjmp	.+40     	; 0x2944 <calc_div+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    291c:	6f 81       	ldd	r22, Y+7	; 0x07
    291e:	78 85       	ldd	r23, Y+8	; 0x08
    2920:	89 85       	ldd	r24, Y+9	; 0x09
    2922:	9a 85       	ldd	r25, Y+10	; 0x0a
    2924:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	9e 83       	std	Y+6, r25	; 0x06
    292e:	8d 83       	std	Y+5, r24	; 0x05
    2930:	8d 81       	ldd	r24, Y+5	; 0x05
    2932:	9e 81       	ldd	r25, Y+6	; 0x06
    2934:	9a 83       	std	Y+2, r25	; 0x02
    2936:	89 83       	std	Y+1, r24	; 0x01
    2938:	89 81       	ldd	r24, Y+1	; 0x01
    293a:	9a 81       	ldd	r25, Y+2	; 0x02
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	f1 f7       	brne	.-4      	; 0x293c <calc_div+0x22a>
    2940:	9a 83       	std	Y+2, r25	; 0x02
    2942:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *  Display result on LCD and wait until enter c
	 */
	LCD_moveCursor(1, 0);
	LCD_floatToString(num1/num2);
	while(key != 'c')
    2944:	80 91 86 01 	lds	r24, 0x0186
    2948:	83 36       	cpi	r24, 0x63	; 99
    294a:	09 f0       	breq	.+2      	; 0x294e <calc_div+0x23c>
    294c:	85 cf       	rjmp	.-246    	; 0x2858 <calc_div+0x146>
	{
		key=KEYPAD_getPressedKey();
		_delay_ms(200);
	}
	LCD_clearScreen();
    294e:	0e 94 4c 22 	call	0x4498	; 0x4498 <LCD_clearScreen>
}
    2952:	6e 96       	adiw	r28, 0x1e	; 30
    2954:	0f b6       	in	r0, 0x3f	; 63
    2956:	f8 94       	cli
    2958:	de bf       	out	0x3e, r29	; 62
    295a:	0f be       	out	0x3f, r0	; 63
    295c:	cd bf       	out	0x3d, r28	; 61
    295e:	cf 91       	pop	r28
    2960:	df 91       	pop	r29
    2962:	1f 91       	pop	r17
    2964:	0f 91       	pop	r16
    2966:	ff 90       	pop	r15
    2968:	ef 90       	pop	r14
    296a:	08 95       	ret

0000296c <calc_ROOT>:
/*
 * Description :
 * Concatenate all digits of two number then display result of multi on LCD
 */
void calc_ROOT(float32 *first_num,uint8 digit1)
{
    296c:	ef 92       	push	r14
    296e:	ff 92       	push	r15
    2970:	0f 93       	push	r16
    2972:	1f 93       	push	r17
    2974:	df 93       	push	r29
    2976:	cf 93       	push	r28
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
    297c:	66 97       	sbiw	r28, 0x16	; 22
    297e:	0f b6       	in	r0, 0x3f	; 63
    2980:	f8 94       	cli
    2982:	de bf       	out	0x3e, r29	; 62
    2984:	0f be       	out	0x3f, r0	; 63
    2986:	cd bf       	out	0x3d, r28	; 61
    2988:	9d 8b       	std	Y+21, r25	; 0x15
    298a:	8c 8b       	std	Y+20, r24	; 0x14
    298c:	6e 8b       	std	Y+22, r22	; 0x16
	float32 num1=first_num[0];
    298e:	ec 89       	ldd	r30, Y+20	; 0x14
    2990:	fd 89       	ldd	r31, Y+21	; 0x15
    2992:	80 81       	ld	r24, Z
    2994:	91 81       	ldd	r25, Z+1	; 0x01
    2996:	a2 81       	ldd	r26, Z+2	; 0x02
    2998:	b3 81       	ldd	r27, Z+3	; 0x03
    299a:	88 8b       	std	Y+16, r24	; 0x10
    299c:	99 8b       	std	Y+17, r25	; 0x11
    299e:	aa 8b       	std	Y+18, r26	; 0x12
    29a0:	bb 8b       	std	Y+19, r27	; 0x13

	/*
	 *  Concatenate all digits of first number
	 */
	for(uint8 counter=1;counter<digit1;counter++)
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	8f 87       	std	Y+15, r24	; 0x0f
    29a6:	2c c0       	rjmp	.+88     	; 0x2a00 <calc_ROOT+0x94>
	{
		num1 = num1*10 +first_num[counter];
    29a8:	68 89       	ldd	r22, Y+16	; 0x10
    29aa:	79 89       	ldd	r23, Y+17	; 0x11
    29ac:	8a 89       	ldd	r24, Y+18	; 0x12
    29ae:	9b 89       	ldd	r25, Y+19	; 0x13
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e2       	ldi	r20, 0x20	; 32
    29b6:	51 e4       	ldi	r21, 0x41	; 65
    29b8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	7c 01       	movw	r14, r24
    29c2:	8d 01       	movw	r16, r26
    29c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    29c6:	88 2f       	mov	r24, r24
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	9c 01       	movw	r18, r24
    29cc:	22 0f       	add	r18, r18
    29ce:	33 1f       	adc	r19, r19
    29d0:	22 0f       	add	r18, r18
    29d2:	33 1f       	adc	r19, r19
    29d4:	8c 89       	ldd	r24, Y+20	; 0x14
    29d6:	9d 89       	ldd	r25, Y+21	; 0x15
    29d8:	fc 01       	movw	r30, r24
    29da:	e2 0f       	add	r30, r18
    29dc:	f3 1f       	adc	r31, r19
    29de:	20 81       	ld	r18, Z
    29e0:	31 81       	ldd	r19, Z+1	; 0x01
    29e2:	42 81       	ldd	r20, Z+2	; 0x02
    29e4:	53 81       	ldd	r21, Z+3	; 0x03
    29e6:	c8 01       	movw	r24, r16
    29e8:	b7 01       	movw	r22, r14
    29ea:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	88 8b       	std	Y+16, r24	; 0x10
    29f4:	99 8b       	std	Y+17, r25	; 0x11
    29f6:	aa 8b       	std	Y+18, r26	; 0x12
    29f8:	bb 8b       	std	Y+19, r27	; 0x13
	float32 num1=first_num[0];

	/*
	 *  Concatenate all digits of first number
	 */
	for(uint8 counter=1;counter<digit1;counter++)
    29fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    29fc:	8f 5f       	subi	r24, 0xFF	; 255
    29fe:	8f 87       	std	Y+15, r24	; 0x0f
    2a00:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a02:	8e 89       	ldd	r24, Y+22	; 0x16
    2a04:	98 17       	cp	r25, r24
    2a06:	80 f2       	brcs	.-96     	; 0x29a8 <calc_ROOT+0x3c>
	 */

	/*
	 *  Display result on LCD and wait until enter c
	 */
	LCD_moveCursor(1, 0);
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	60 e0       	ldi	r22, 0x00	; 0
    2a0c:	0e 94 a0 21 	call	0x4340	; 0x4340 <LCD_moveCursor>
	LCD_floatToString(sqrtf(num1));
    2a10:	88 89       	ldd	r24, Y+16	; 0x10
    2a12:	99 89       	ldd	r25, Y+17	; 0x11
    2a14:	aa 89       	ldd	r26, Y+18	; 0x12
    2a16:	bb 89       	ldd	r27, Y+19	; 0x13
    2a18:	bc 01       	movw	r22, r24
    2a1a:	cd 01       	movw	r24, r26
    2a1c:	0e 94 64 23 	call	0x46c8	; 0x46c8 <sqrt>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	bc 01       	movw	r22, r24
    2a26:	cd 01       	movw	r24, r26
    2a28:	0e 94 1e 22 	call	0x443c	; 0x443c <LCD_floatToString>
    2a2c:	76 c0       	rjmp	.+236    	; 0x2b1a <calc_ROOT+0x1ae>
	while(key != 'c')
	{
		key=KEYPAD_getPressedKey();
    2a2e:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <KEYPAD_getPressedKey>
    2a32:	80 93 86 01 	sts	0x0186, r24
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	a8 e4       	ldi	r26, 0x48	; 72
    2a3c:	b3 e4       	ldi	r27, 0x43	; 67
    2a3e:	8b 87       	std	Y+11, r24	; 0x0b
    2a40:	9c 87       	std	Y+12, r25	; 0x0c
    2a42:	ad 87       	std	Y+13, r26	; 0x0d
    2a44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	4a e7       	ldi	r20, 0x7A	; 122
    2a54:	55 e4       	ldi	r21, 0x45	; 69
    2a56:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	8f 83       	std	Y+7, r24	; 0x07
    2a60:	98 87       	std	Y+8, r25	; 0x08
    2a62:	a9 87       	std	Y+9, r26	; 0x09
    2a64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a66:	6f 81       	ldd	r22, Y+7	; 0x07
    2a68:	78 85       	ldd	r23, Y+8	; 0x08
    2a6a:	89 85       	ldd	r24, Y+9	; 0x09
    2a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	40 e8       	ldi	r20, 0x80	; 128
    2a74:	5f e3       	ldi	r21, 0x3F	; 63
    2a76:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2a7a:	88 23       	and	r24, r24
    2a7c:	2c f4       	brge	.+10     	; 0x2a88 <calc_ROOT+0x11c>
		__ticks = 1;
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	9e 83       	std	Y+6, r25	; 0x06
    2a84:	8d 83       	std	Y+5, r24	; 0x05
    2a86:	3f c0       	rjmp	.+126    	; 0x2b06 <calc_ROOT+0x19a>
	else if (__tmp > 65535)
    2a88:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8a:	78 85       	ldd	r23, Y+8	; 0x08
    2a8c:	89 85       	ldd	r24, Y+9	; 0x09
    2a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	3f ef       	ldi	r19, 0xFF	; 255
    2a94:	4f e7       	ldi	r20, 0x7F	; 127
    2a96:	57 e4       	ldi	r21, 0x47	; 71
    2a98:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2a9c:	18 16       	cp	r1, r24
    2a9e:	4c f5       	brge	.+82     	; 0x2af2 <calc_ROOT+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aa2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	40 e2       	ldi	r20, 0x20	; 32
    2aae:	51 e4       	ldi	r21, 0x41	; 65
    2ab0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	bc 01       	movw	r22, r24
    2aba:	cd 01       	movw	r24, r26
    2abc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	9e 83       	std	Y+6, r25	; 0x06
    2ac6:	8d 83       	std	Y+5, r24	; 0x05
    2ac8:	0f c0       	rjmp	.+30     	; 0x2ae8 <calc_ROOT+0x17c>
    2aca:	80 e9       	ldi	r24, 0x90	; 144
    2acc:	91 e0       	ldi	r25, 0x01	; 1
    2ace:	9c 83       	std	Y+4, r25	; 0x04
    2ad0:	8b 83       	std	Y+3, r24	; 0x03
    2ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	f1 f7       	brne	.-4      	; 0x2ad6 <calc_ROOT+0x16a>
    2ada:	9c 83       	std	Y+4, r25	; 0x04
    2adc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ade:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	9e 83       	std	Y+6, r25	; 0x06
    2ae6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aea:	9e 81       	ldd	r25, Y+6	; 0x06
    2aec:	00 97       	sbiw	r24, 0x00	; 0
    2aee:	69 f7       	brne	.-38     	; 0x2aca <calc_ROOT+0x15e>
    2af0:	14 c0       	rjmp	.+40     	; 0x2b1a <calc_ROOT+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af2:	6f 81       	ldd	r22, Y+7	; 0x07
    2af4:	78 85       	ldd	r23, Y+8	; 0x08
    2af6:	89 85       	ldd	r24, Y+9	; 0x09
    2af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afa:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	9e 83       	std	Y+6, r25	; 0x06
    2b04:	8d 83       	std	Y+5, r24	; 0x05
    2b06:	8d 81       	ldd	r24, Y+5	; 0x05
    2b08:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0a:	9a 83       	std	Y+2, r25	; 0x02
    2b0c:	89 83       	std	Y+1, r24	; 0x01
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	9a 81       	ldd	r25, Y+2	; 0x02
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	f1 f7       	brne	.-4      	; 0x2b12 <calc_ROOT+0x1a6>
    2b16:	9a 83       	std	Y+2, r25	; 0x02
    2b18:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *  Display result on LCD and wait until enter c
	 */
	LCD_moveCursor(1, 0);
	LCD_floatToString(sqrtf(num1));
	while(key != 'c')
    2b1a:	80 91 86 01 	lds	r24, 0x0186
    2b1e:	83 36       	cpi	r24, 0x63	; 99
    2b20:	09 f0       	breq	.+2      	; 0x2b24 <calc_ROOT+0x1b8>
    2b22:	85 cf       	rjmp	.-246    	; 0x2a2e <calc_ROOT+0xc2>
	{
		key=KEYPAD_getPressedKey();
		_delay_ms(200);
	}
	LCD_clearScreen();
    2b24:	0e 94 4c 22 	call	0x4498	; 0x4498 <LCD_clearScreen>
}
    2b28:	66 96       	adiw	r28, 0x16	; 22
    2b2a:	0f b6       	in	r0, 0x3f	; 63
    2b2c:	f8 94       	cli
    2b2e:	de bf       	out	0x3e, r29	; 62
    2b30:	0f be       	out	0x3f, r0	; 63
    2b32:	cd bf       	out	0x3d, r28	; 61
    2b34:	cf 91       	pop	r28
    2b36:	df 91       	pop	r29
    2b38:	1f 91       	pop	r17
    2b3a:	0f 91       	pop	r16
    2b3c:	ff 90       	pop	r15
    2b3e:	ef 90       	pop	r14
    2b40:	08 95       	ret

00002b42 <Do_Caclulations>:
/*
 * Description :
 *  Get two number and operation and do operation and display it on screen
 */
void Do_Caclulations(void)
{
    2b42:	df 93       	push	r29
    2b44:	cf 93       	push	r28
    2b46:	00 d0       	rcall	.+0      	; 0x2b48 <Do_Caclulations+0x6>
    2b48:	cd b7       	in	r28, 0x3d	; 61
    2b4a:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Get first number and operation
	 */
	First_NUM();
    2b4c:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <First_NUM>

	if(opration != 'R')
    2b50:	80 91 89 01 	lds	r24, 0x0189
    2b54:	82 35       	cpi	r24, 0x52	; 82
    2b56:	11 f0       	breq	.+4      	; 0x2b5c <Do_Caclulations+0x1a>
	{
		/*
		 * Get Second number
		 */
		Second_NUM();
    2b58:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <Second_NUM>


	/*
	 * Do operation calculation
	 */
	switch(opration)
    2b5c:	80 91 89 01 	lds	r24, 0x0189
    2b60:	28 2f       	mov	r18, r24
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	3a 83       	std	Y+2, r19	; 0x02
    2b66:	29 83       	std	Y+1, r18	; 0x01
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6c:	8d 32       	cpi	r24, 0x2D	; 45
    2b6e:	91 05       	cpc	r25, r1
    2b70:	41 f1       	breq	.+80     	; 0x2bc2 <Do_Caclulations+0x80>
    2b72:	29 81       	ldd	r18, Y+1	; 0x01
    2b74:	3a 81       	ldd	r19, Y+2	; 0x02
    2b76:	2e 32       	cpi	r18, 0x2E	; 46
    2b78:	31 05       	cpc	r19, r1
    2b7a:	5c f4       	brge	.+22     	; 0x2b92 <Do_Caclulations+0x50>
    2b7c:	89 81       	ldd	r24, Y+1	; 0x01
    2b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b80:	8a 32       	cpi	r24, 0x2A	; 42
    2b82:	91 05       	cpc	r25, r1
    2b84:	59 f1       	breq	.+86     	; 0x2bdc <Do_Caclulations+0x9a>
    2b86:	29 81       	ldd	r18, Y+1	; 0x01
    2b88:	3a 81       	ldd	r19, Y+2	; 0x02
    2b8a:	2b 32       	cpi	r18, 0x2B	; 43
    2b8c:	31 05       	cpc	r19, r1
    2b8e:	61 f0       	breq	.+24     	; 0x2ba8 <Do_Caclulations+0x66>
    2b90:	46 c0       	rjmp	.+140    	; 0x2c1e <Do_Caclulations+0xdc>
    2b92:	89 81       	ldd	r24, Y+1	; 0x01
    2b94:	9a 81       	ldd	r25, Y+2	; 0x02
    2b96:	8f 32       	cpi	r24, 0x2F	; 47
    2b98:	91 05       	cpc	r25, r1
    2b9a:	69 f1       	breq	.+90     	; 0x2bf6 <Do_Caclulations+0xb4>
    2b9c:	29 81       	ldd	r18, Y+1	; 0x01
    2b9e:	3a 81       	ldd	r19, Y+2	; 0x02
    2ba0:	22 35       	cpi	r18, 0x52	; 82
    2ba2:	31 05       	cpc	r19, r1
    2ba4:	a9 f1       	breq	.+106    	; 0x2c10 <Do_Caclulations+0xce>
    2ba6:	3b c0       	rjmp	.+118    	; 0x2c1e <Do_Caclulations+0xdc>
	{
	case '+':
		calc_sum(number1, number2, num1_counter, num2_counter);
    2ba8:	40 91 87 01 	lds	r20, 0x0187
    2bac:	50 91 88 01 	lds	r21, 0x0188
    2bb0:	8a e8       	ldi	r24, 0x8A	; 138
    2bb2:	91 e0       	ldi	r25, 0x01	; 1
    2bb4:	22 eb       	ldi	r18, 0xB2	; 178
    2bb6:	31 e0       	ldi	r19, 0x01	; 1
    2bb8:	b9 01       	movw	r22, r18
    2bba:	25 2f       	mov	r18, r21
    2bbc:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <calc_sum>
    2bc0:	2e c0       	rjmp	.+92     	; 0x2c1e <Do_Caclulations+0xdc>
		break;
	case '-':
		calc_sub(number1, number2, num1_counter, num2_counter);
    2bc2:	40 91 87 01 	lds	r20, 0x0187
    2bc6:	50 91 88 01 	lds	r21, 0x0188
    2bca:	8a e8       	ldi	r24, 0x8A	; 138
    2bcc:	91 e0       	ldi	r25, 0x01	; 1
    2bce:	22 eb       	ldi	r18, 0xB2	; 178
    2bd0:	31 e0       	ldi	r19, 0x01	; 1
    2bd2:	b9 01       	movw	r22, r18
    2bd4:	25 2f       	mov	r18, r21
    2bd6:	0e 94 13 11 	call	0x2226	; 0x2226 <calc_sub>
    2bda:	21 c0       	rjmp	.+66     	; 0x2c1e <Do_Caclulations+0xdc>
		break;
	case '*':
		calc_multi(number1, number2, num1_counter, num2_counter);
    2bdc:	40 91 87 01 	lds	r20, 0x0187
    2be0:	50 91 88 01 	lds	r21, 0x0188
    2be4:	8a e8       	ldi	r24, 0x8A	; 138
    2be6:	91 e0       	ldi	r25, 0x01	; 1
    2be8:	22 eb       	ldi	r18, 0xB2	; 178
    2bea:	31 e0       	ldi	r19, 0x01	; 1
    2bec:	b9 01       	movw	r22, r18
    2bee:	25 2f       	mov	r18, r21
    2bf0:	0e 94 58 12 	call	0x24b0	; 0x24b0 <calc_multi>
    2bf4:	14 c0       	rjmp	.+40     	; 0x2c1e <Do_Caclulations+0xdc>
		break;
	case '/':
		calc_div(number1, number2, num1_counter, num2_counter);
    2bf6:	40 91 87 01 	lds	r20, 0x0187
    2bfa:	50 91 88 01 	lds	r21, 0x0188
    2bfe:	8a e8       	ldi	r24, 0x8A	; 138
    2c00:	91 e0       	ldi	r25, 0x01	; 1
    2c02:	22 eb       	ldi	r18, 0xB2	; 178
    2c04:	31 e0       	ldi	r19, 0x01	; 1
    2c06:	b9 01       	movw	r22, r18
    2c08:	25 2f       	mov	r18, r21
    2c0a:	0e 94 89 13 	call	0x2712	; 0x2712 <calc_div>
    2c0e:	07 c0       	rjmp	.+14     	; 0x2c1e <Do_Caclulations+0xdc>
		break;
	case 'R':
		calc_ROOT(number1, num1_counter);
    2c10:	20 91 87 01 	lds	r18, 0x0187
    2c14:	8a e8       	ldi	r24, 0x8A	; 138
    2c16:	91 e0       	ldi	r25, 0x01	; 1
    2c18:	62 2f       	mov	r22, r18
    2c1a:	0e 94 b6 14 	call	0x296c	; 0x296c <calc_ROOT>
		break;
	default:
		break;
	}

}
    2c1e:	0f 90       	pop	r0
    2c20:	0f 90       	pop	r0
    2c22:	cf 91       	pop	r28
    2c24:	df 91       	pop	r29
    2c26:	08 95       	ret

00002c28 <Random>:

void Random(void)
{
    2c28:	df 93       	push	r29
    2c2a:	cf 93       	push	r28
    2c2c:	cd b7       	in	r28, 0x3d	; 61
    2c2e:	de b7       	in	r29, 0x3e	; 62
	random_num = 0 ;
    2c30:	10 92 7b 01 	sts	0x017B, r1
}
    2c34:	cf 91       	pop	r28
    2c36:	df 91       	pop	r29
    2c38:	08 95       	ret

00002c3a <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2c3a:	df 93       	push	r29
    2c3c:	cf 93       	push	r28
    2c3e:	cd b7       	in	r28, 0x3d	; 61
    2c40:	de b7       	in	r29, 0x3e	; 62
    2c42:	61 97       	sbiw	r28, 0x11	; 17
    2c44:	0f b6       	in	r0, 0x3f	; 63
    2c46:	f8 94       	cli
    2c48:	de bf       	out	0x3e, r29	; 62
    2c4a:	0f be       	out	0x3f, r0	; 63
    2c4c:	cd bf       	out	0x3d, r28	; 61
	uint8 col=0,row=0;
    2c4e:	18 8a       	std	Y+16, r1	; 0x10
    2c50:	1f 86       	std	Y+15, r1	; 0x0f
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID,   PIN_INPUT);
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	60 e0       	ldi	r22, 0x00	; 0
    2c56:	40 e0       	ldi	r20, 0x00	; 0
    2c58:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2c5c:	80 e0       	ldi	r24, 0x00	; 0
    2c5e:	61 e0       	ldi	r22, 0x01	; 1
    2c60:	40 e0       	ldi	r20, 0x00	; 0
    2c62:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	62 e0       	ldi	r22, 0x02	; 2
    2c6a:	40 e0       	ldi	r20, 0x00	; 0
    2c6c:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	63 e0       	ldi	r22, 0x03	; 3
    2c74:	40 e0       	ldi	r20, 0x00	; 0
    2c76:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2c7a:	80 e0       	ldi	r24, 0x00	; 0
    2c7c:	64 e0       	ldi	r22, 0x04	; 4
    2c7e:	40 e0       	ldi	r20, 0x00	; 0
    2c80:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	65 e0       	ldi	r22, 0x05	; 5
    2c88:	40 e0       	ldi	r20, 0x00	; 0
    2c8a:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2c8e:	80 e0       	ldi	r24, 0x00	; 0
    2c90:	66 e0       	ldi	r22, 0x06	; 6
    2c92:	40 e0       	ldi	r20, 0x00	; 0
    2c94:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>

	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID,   PIN_OUTPUT);
    2c98:	80 e0       	ldi	r24, 0x00	; 0
    2c9a:	64 e0       	ldi	r22, 0x04	; 4
    2c9c:	41 e0       	ldi	r20, 0x01	; 1
    2c9e:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_OUTPUT);
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	65 e0       	ldi	r22, 0x05	; 5
    2ca6:	41 e0       	ldi	r20, 0x01	; 1
    2ca8:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_OUTPUT);
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	66 e0       	ldi	r22, 0x06	; 6
    2cb0:	41 e0       	ldi	r20, 0x01	; 1
    2cb2:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>


#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	67 e0       	ldi	r22, 0x07	; 7
    2cba:	40 e0       	ldi	r20, 0x00	; 0
    2cbc:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_OUTPUT);
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	67 e0       	ldi	r22, 0x07	; 7
    2cc4:	41 e0       	ldi	r20, 0x01	; 1
    2cc6:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    2cca:	aa c0       	rjmp	.+340    	; 0x2e20 <KEYPAD_getPressedKey+0x1e6>
#endif
	while(random_num)
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	a8 e4       	ldi	r26, 0x48	; 72
    2cd2:	b2 e4       	ldi	r27, 0x42	; 66
    2cd4:	8b 87       	std	Y+11, r24	; 0x0b
    2cd6:	9c 87       	std	Y+12, r25	; 0x0c
    2cd8:	ad 87       	std	Y+13, r26	; 0x0d
    2cda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cde:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ce0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ce2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ce4:	20 e0       	ldi	r18, 0x00	; 0
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	4a e7       	ldi	r20, 0x7A	; 122
    2cea:	55 e4       	ldi	r21, 0x45	; 69
    2cec:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	8f 83       	std	Y+7, r24	; 0x07
    2cf6:	98 87       	std	Y+8, r25	; 0x08
    2cf8:	a9 87       	std	Y+9, r26	; 0x09
    2cfa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cfc:	6f 81       	ldd	r22, Y+7	; 0x07
    2cfe:	78 85       	ldd	r23, Y+8	; 0x08
    2d00:	89 85       	ldd	r24, Y+9	; 0x09
    2d02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	40 e8       	ldi	r20, 0x80	; 128
    2d0a:	5f e3       	ldi	r21, 0x3F	; 63
    2d0c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2d10:	88 23       	and	r24, r24
    2d12:	2c f4       	brge	.+10     	; 0x2d1e <KEYPAD_getPressedKey+0xe4>
		__ticks = 1;
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	9e 83       	std	Y+6, r25	; 0x06
    2d1a:	8d 83       	std	Y+5, r24	; 0x05
    2d1c:	3f c0       	rjmp	.+126    	; 0x2d9c <KEYPAD_getPressedKey+0x162>
	else if (__tmp > 65535)
    2d1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d20:	78 85       	ldd	r23, Y+8	; 0x08
    2d22:	89 85       	ldd	r24, Y+9	; 0x09
    2d24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	3f ef       	ldi	r19, 0xFF	; 255
    2d2a:	4f e7       	ldi	r20, 0x7F	; 127
    2d2c:	57 e4       	ldi	r21, 0x47	; 71
    2d2e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2d32:	18 16       	cp	r1, r24
    2d34:	4c f5       	brge	.+82     	; 0x2d88 <KEYPAD_getPressedKey+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d36:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d38:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	40 e2       	ldi	r20, 0x20	; 32
    2d44:	51 e4       	ldi	r21, 0x41	; 65
    2d46:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	bc 01       	movw	r22, r24
    2d50:	cd 01       	movw	r24, r26
    2d52:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2d56:	dc 01       	movw	r26, r24
    2d58:	cb 01       	movw	r24, r22
    2d5a:	9e 83       	std	Y+6, r25	; 0x06
    2d5c:	8d 83       	std	Y+5, r24	; 0x05
    2d5e:	0f c0       	rjmp	.+30     	; 0x2d7e <KEYPAD_getPressedKey+0x144>
    2d60:	80 e9       	ldi	r24, 0x90	; 144
    2d62:	91 e0       	ldi	r25, 0x01	; 1
    2d64:	9c 83       	std	Y+4, r25	; 0x04
    2d66:	8b 83       	std	Y+3, r24	; 0x03
    2d68:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d6c:	01 97       	sbiw	r24, 0x01	; 1
    2d6e:	f1 f7       	brne	.-4      	; 0x2d6c <KEYPAD_getPressedKey+0x132>
    2d70:	9c 83       	std	Y+4, r25	; 0x04
    2d72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d74:	8d 81       	ldd	r24, Y+5	; 0x05
    2d76:	9e 81       	ldd	r25, Y+6	; 0x06
    2d78:	01 97       	sbiw	r24, 0x01	; 1
    2d7a:	9e 83       	std	Y+6, r25	; 0x06
    2d7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d80:	9e 81       	ldd	r25, Y+6	; 0x06
    2d82:	00 97       	sbiw	r24, 0x00	; 0
    2d84:	69 f7       	brne	.-38     	; 0x2d60 <KEYPAD_getPressedKey+0x126>
    2d86:	14 c0       	rjmp	.+40     	; 0x2db0 <KEYPAD_getPressedKey+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d88:	6f 81       	ldd	r22, Y+7	; 0x07
    2d8a:	78 85       	ldd	r23, Y+8	; 0x08
    2d8c:	89 85       	ldd	r24, Y+9	; 0x09
    2d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d90:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2d94:	dc 01       	movw	r26, r24
    2d96:	cb 01       	movw	r24, r22
    2d98:	9e 83       	std	Y+6, r25	; 0x06
    2d9a:	8d 83       	std	Y+5, r24	; 0x05
    2d9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2da0:	9a 83       	std	Y+2, r25	; 0x02
    2da2:	89 83       	std	Y+1, r24	; 0x01
    2da4:	89 81       	ldd	r24, Y+1	; 0x01
    2da6:	9a 81       	ldd	r25, Y+2	; 0x02
    2da8:	01 97       	sbiw	r24, 0x01	; 1
    2daa:	f1 f7       	brne	.-4      	; 0x2da8 <KEYPAD_getPressedKey+0x16e>
    2dac:	9a 83       	std	Y+2, r25	; 0x02
    2dae:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(50);
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2db0:	1f 86       	std	Y+15, r1	; 0x0f
    2db2:	33 c0       	rjmp	.+102    	; 0x2e1a <KEYPAD_getPressedKey+0x1e0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2db4:	80 e0       	ldi	r24, 0x00	; 0
    2db6:	6f 85       	ldd	r22, Y+15	; 0x0f
    2db8:	41 e0       	ldi	r20, 0x01	; 1
    2dba:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
    2dc0:	6f 85       	ldd	r22, Y+15	; 0x0f
    2dc2:	40 e0       	ldi	r20, 0x00	; 0
    2dc4:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2dc8:	18 8a       	std	Y+16, r1	; 0x10
    2dca:	1c c0       	rjmp	.+56     	; 0x2e04 <KEYPAD_getPressedKey+0x1ca>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2dcc:	88 89       	ldd	r24, Y+16	; 0x10
    2dce:	98 2f       	mov	r25, r24
    2dd0:	9c 5f       	subi	r25, 0xFC	; 252
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	69 2f       	mov	r22, r25
    2dd6:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <GPIO_readPin>
    2dda:	88 23       	and	r24, r24
    2ddc:	81 f4       	brne	.+32     	; 0x2dfe <KEYPAD_getPressedKey+0x1c4>
#endif
#elif (KEYPAD_NUM_COLS == 4)
#ifdef STANDARD_KEYPAD
					return ((row*KEYPAD_NUM_COLS)+col+1);
#else
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2dde:	8f 85       	ldd	r24, Y+15	; 0x0f
    2de0:	88 2f       	mov	r24, r24
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	88 0f       	add	r24, r24
    2de6:	99 1f       	adc	r25, r25
    2de8:	88 0f       	add	r24, r24
    2dea:	99 1f       	adc	r25, r25
    2dec:	98 2f       	mov	r25, r24
    2dee:	88 89       	ldd	r24, Y+16	; 0x10
    2df0:	89 0f       	add	r24, r25
    2df2:	8f 5f       	subi	r24, 0xFF	; 255
    2df4:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <KEYPAD_4x4_adjustKeyNumber>
    2df8:	89 8b       	std	Y+17, r24	; 0x11
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    2dfa:	89 89       	ldd	r24, Y+17	; 0x11
    2dfc:	16 c0       	rjmp	.+44     	; 0x2e2a <KEYPAD_getPressedKey+0x1f0>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2dfe:	88 89       	ldd	r24, Y+16	; 0x10
    2e00:	8f 5f       	subi	r24, 0xFF	; 255
    2e02:	88 8b       	std	Y+16, r24	; 0x10
    2e04:	88 89       	ldd	r24, Y+16	; 0x10
    2e06:	84 30       	cpi	r24, 0x04	; 4
    2e08:	08 f3       	brcs	.-62     	; 0x2dcc <KEYPAD_getPressedKey+0x192>
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
#endif
#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2e0a:	80 e0       	ldi	r24, 0x00	; 0
    2e0c:	6f 85       	ldd	r22, Y+15	; 0x0f
    2e0e:	40 e0       	ldi	r20, 0x00	; 0
    2e10:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_OUTPUT);
#endif
	while(random_num)
	{
		_delay_ms(50);
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2e14:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e16:	8f 5f       	subi	r24, 0xFF	; 255
    2e18:	8f 87       	std	Y+15, r24	; 0x0f
    2e1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e1c:	84 30       	cpi	r24, 0x04	; 4
    2e1e:	50 f2       	brcs	.-108    	; 0x2db4 <KEYPAD_getPressedKey+0x17a>

#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_OUTPUT);
#endif
	while(random_num)
    2e20:	80 91 7b 01 	lds	r24, 0x017B
    2e24:	88 23       	and	r24, r24
    2e26:	09 f0       	breq	.+2      	; 0x2e2a <KEYPAD_getPressedKey+0x1f0>
    2e28:	51 cf       	rjmp	.-350    	; 0x2ccc <KEYPAD_getPressedKey+0x92>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    2e2a:	61 96       	adiw	r28, 0x11	; 17
    2e2c:	0f b6       	in	r0, 0x3f	; 63
    2e2e:	f8 94       	cli
    2e30:	de bf       	out	0x3e, r29	; 62
    2e32:	0f be       	out	0x3f, r0	; 63
    2e34:	cd bf       	out	0x3d, r28	; 61
    2e36:	cf 91       	pop	r28
    2e38:	df 91       	pop	r29
    2e3a:	08 95       	ret

00002e3c <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2e3c:	df 93       	push	r29
    2e3e:	cf 93       	push	r28
    2e40:	00 d0       	rcall	.+0      	; 0x2e42 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2e42:	00 d0       	rcall	.+0      	; 0x2e44 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2e44:	cd b7       	in	r28, 0x3d	; 61
    2e46:	de b7       	in	r29, 0x3e	; 62
    2e48:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2e4a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4e:	28 2f       	mov	r18, r24
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	3c 83       	std	Y+4, r19	; 0x04
    2e54:	2b 83       	std	Y+3, r18	; 0x03
    2e56:	8b 81       	ldd	r24, Y+3	; 0x03
    2e58:	9c 81       	ldd	r25, Y+4	; 0x04
    2e5a:	88 30       	cpi	r24, 0x08	; 8
    2e5c:	91 05       	cpc	r25, r1
    2e5e:	09 f4       	brne	.+2      	; 0x2e62 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2e60:	70 c0       	rjmp	.+224    	; 0x2f42 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2e62:	2b 81       	ldd	r18, Y+3	; 0x03
    2e64:	3c 81       	ldd	r19, Y+4	; 0x04
    2e66:	29 30       	cpi	r18, 0x09	; 9
    2e68:	31 05       	cpc	r19, r1
    2e6a:	5c f5       	brge	.+86     	; 0x2ec2 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e70:	84 30       	cpi	r24, 0x04	; 4
    2e72:	91 05       	cpc	r25, r1
    2e74:	09 f4       	brne	.+2      	; 0x2e78 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2e76:	59 c0       	rjmp	.+178    	; 0x2f2a <KEYPAD_4x4_adjustKeyNumber+0xee>
    2e78:	2b 81       	ldd	r18, Y+3	; 0x03
    2e7a:	3c 81       	ldd	r19, Y+4	; 0x04
    2e7c:	25 30       	cpi	r18, 0x05	; 5
    2e7e:	31 05       	cpc	r19, r1
    2e80:	9c f4       	brge	.+38     	; 0x2ea8 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2e82:	8b 81       	ldd	r24, Y+3	; 0x03
    2e84:	9c 81       	ldd	r25, Y+4	; 0x04
    2e86:	82 30       	cpi	r24, 0x02	; 2
    2e88:	91 05       	cpc	r25, r1
    2e8a:	09 f4       	brne	.+2      	; 0x2e8e <KEYPAD_4x4_adjustKeyNumber+0x52>
    2e8c:	48 c0       	rjmp	.+144    	; 0x2f1e <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2e8e:	2b 81       	ldd	r18, Y+3	; 0x03
    2e90:	3c 81       	ldd	r19, Y+4	; 0x04
    2e92:	23 30       	cpi	r18, 0x03	; 3
    2e94:	31 05       	cpc	r19, r1
    2e96:	0c f0       	brlt	.+2      	; 0x2e9a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2e98:	45 c0       	rjmp	.+138    	; 0x2f24 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e9e:	81 30       	cpi	r24, 0x01	; 1
    2ea0:	91 05       	cpc	r25, r1
    2ea2:	09 f4       	brne	.+2      	; 0x2ea6 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2ea4:	39 c0       	rjmp	.+114    	; 0x2f18 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2ea6:	67 c0       	rjmp	.+206    	; 0x2f76 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2ea8:	2b 81       	ldd	r18, Y+3	; 0x03
    2eaa:	3c 81       	ldd	r19, Y+4	; 0x04
    2eac:	26 30       	cpi	r18, 0x06	; 6
    2eae:	31 05       	cpc	r19, r1
    2eb0:	09 f4       	brne	.+2      	; 0x2eb4 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2eb2:	41 c0       	rjmp	.+130    	; 0x2f36 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb8:	87 30       	cpi	r24, 0x07	; 7
    2eba:	91 05       	cpc	r25, r1
    2ebc:	0c f0       	brlt	.+2      	; 0x2ec0 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2ebe:	3e c0       	rjmp	.+124    	; 0x2f3c <KEYPAD_4x4_adjustKeyNumber+0x100>
    2ec0:	37 c0       	rjmp	.+110    	; 0x2f30 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2ec2:	2b 81       	ldd	r18, Y+3	; 0x03
    2ec4:	3c 81       	ldd	r19, Y+4	; 0x04
    2ec6:	2c 30       	cpi	r18, 0x0C	; 12
    2ec8:	31 05       	cpc	r19, r1
    2eca:	09 f4       	brne	.+2      	; 0x2ece <KEYPAD_4x4_adjustKeyNumber+0x92>
    2ecc:	46 c0       	rjmp	.+140    	; 0x2f5a <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2ece:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed2:	8d 30       	cpi	r24, 0x0D	; 13
    2ed4:	91 05       	cpc	r25, r1
    2ed6:	5c f4       	brge	.+22     	; 0x2eee <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2ed8:	2b 81       	ldd	r18, Y+3	; 0x03
    2eda:	3c 81       	ldd	r19, Y+4	; 0x04
    2edc:	2a 30       	cpi	r18, 0x0A	; 10
    2ede:	31 05       	cpc	r19, r1
    2ee0:	b1 f1       	breq	.+108    	; 0x2f4e <KEYPAD_4x4_adjustKeyNumber+0x112>
    2ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee6:	8b 30       	cpi	r24, 0x0B	; 11
    2ee8:	91 05       	cpc	r25, r1
    2eea:	a4 f5       	brge	.+104    	; 0x2f54 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2eec:	2d c0       	rjmp	.+90     	; 0x2f48 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2eee:	2b 81       	ldd	r18, Y+3	; 0x03
    2ef0:	3c 81       	ldd	r19, Y+4	; 0x04
    2ef2:	2e 30       	cpi	r18, 0x0E	; 14
    2ef4:	31 05       	cpc	r19, r1
    2ef6:	b9 f1       	breq	.+110    	; 0x2f66 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    2efa:	9c 81       	ldd	r25, Y+4	; 0x04
    2efc:	8e 30       	cpi	r24, 0x0E	; 14
    2efe:	91 05       	cpc	r25, r1
    2f00:	7c f1       	brlt	.+94     	; 0x2f60 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2f02:	2b 81       	ldd	r18, Y+3	; 0x03
    2f04:	3c 81       	ldd	r19, Y+4	; 0x04
    2f06:	2f 30       	cpi	r18, 0x0F	; 15
    2f08:	31 05       	cpc	r19, r1
    2f0a:	79 f1       	breq	.+94     	; 0x2f6a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f10:	80 31       	cpi	r24, 0x10	; 16
    2f12:	91 05       	cpc	r25, r1
    2f14:	69 f1       	breq	.+90     	; 0x2f70 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2f16:	2f c0       	rjmp	.+94     	; 0x2f76 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1: keypad_button = 7;
    2f18:	87 e0       	ldi	r24, 0x07	; 7
    2f1a:	89 83       	std	Y+1, r24	; 0x01
    2f1c:	2e c0       	rjmp	.+92     	; 0x2f7a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 2: keypad_button = 8;
    2f1e:	88 e0       	ldi	r24, 0x08	; 8
    2f20:	89 83       	std	Y+1, r24	; 0x01
    2f22:	2b c0       	rjmp	.+86     	; 0x2f7a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 3: keypad_button = 9;
    2f24:	89 e0       	ldi	r24, 0x09	; 9
    2f26:	89 83       	std	Y+1, r24	; 0x01
    2f28:	28 c0       	rjmp	.+80     	; 0x2f7a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 4: keypad_button = '/'; // ASCII Code of %
    2f2a:	8f e2       	ldi	r24, 0x2F	; 47
    2f2c:	89 83       	std	Y+1, r24	; 0x01
    2f2e:	25 c0       	rjmp	.+74     	; 0x2f7a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 5: keypad_button = 4;
    2f30:	84 e0       	ldi	r24, 0x04	; 4
    2f32:	89 83       	std	Y+1, r24	; 0x01
    2f34:	22 c0       	rjmp	.+68     	; 0x2f7a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 6: keypad_button = 5;
    2f36:	85 e0       	ldi	r24, 0x05	; 5
    2f38:	89 83       	std	Y+1, r24	; 0x01
    2f3a:	1f c0       	rjmp	.+62     	; 0x2f7a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 7: keypad_button = 6;
    2f3c:	86 e0       	ldi	r24, 0x06	; 6
    2f3e:	89 83       	std	Y+1, r24	; 0x01
    2f40:	1c c0       	rjmp	.+56     	; 0x2f7a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2f42:	8a e2       	ldi	r24, 0x2A	; 42
    2f44:	89 83       	std	Y+1, r24	; 0x01
    2f46:	19 c0       	rjmp	.+50     	; 0x2f7a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 9: keypad_button = 1;
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	89 83       	std	Y+1, r24	; 0x01
    2f4c:	16 c0       	rjmp	.+44     	; 0x2f7a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 10: keypad_button = 2;
    2f4e:	82 e0       	ldi	r24, 0x02	; 2
    2f50:	89 83       	std	Y+1, r24	; 0x01
    2f52:	13 c0       	rjmp	.+38     	; 0x2f7a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 11: keypad_button = 3;
    2f54:	83 e0       	ldi	r24, 0x03	; 3
    2f56:	89 83       	std	Y+1, r24	; 0x01
    2f58:	10 c0       	rjmp	.+32     	; 0x2f7a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2f5a:	8d e2       	ldi	r24, 0x2D	; 45
    2f5c:	89 83       	std	Y+1, r24	; 0x01
    2f5e:	0d c0       	rjmp	.+26     	; 0x2f7a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 13: keypad_button = 'c';  /* ASCII Code of 'c */
    2f60:	83 e6       	ldi	r24, 0x63	; 99
    2f62:	89 83       	std	Y+1, r24	; 0x01
    2f64:	0a c0       	rjmp	.+20     	; 0x2f7a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 14: keypad_button = 0;
    2f66:	19 82       	std	Y+1, r1	; 0x01
    2f68:	08 c0       	rjmp	.+16     	; 0x2f7a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 15: keypad_button = '='; /* ASCII Code of '=' */
    2f6a:	8d e3       	ldi	r24, 0x3D	; 61
    2f6c:	89 83       	std	Y+1, r24	; 0x01
    2f6e:	05 c0       	rjmp	.+10     	; 0x2f7a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2f70:	8b e2       	ldi	r24, 0x2B	; 43
    2f72:	89 83       	std	Y+1, r24	; 0x01
    2f74:	02 c0       	rjmp	.+4      	; 0x2f7a <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	default: keypad_button = button_number;
    2f76:	8a 81       	ldd	r24, Y+2	; 0x02
    2f78:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	return keypad_button;
    2f7a:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2f7c:	0f 90       	pop	r0
    2f7e:	0f 90       	pop	r0
    2f80:	0f 90       	pop	r0
    2f82:	0f 90       	pop	r0
    2f84:	cf 91       	pop	r28
    2f86:	df 91       	pop	r29
    2f88:	08 95       	ret

00002f8a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2f8a:	df 93       	push	r29
    2f8c:	cf 93       	push	r28
    2f8e:	cd b7       	in	r28, 0x3d	; 61
    2f90:	de b7       	in	r29, 0x3e	; 62
    2f92:	2e 97       	sbiw	r28, 0x0e	; 14
    2f94:	0f b6       	in	r0, 0x3f	; 63
    2f96:	f8 94       	cli
    2f98:	de bf       	out	0x3e, r29	; 62
    2f9a:	0f be       	out	0x3f, r0	; 63
    2f9c:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2f9e:	82 e0       	ldi	r24, 0x02	; 2
    2fa0:	60 e0       	ldi	r22, 0x00	; 0
    2fa2:	41 e0       	ldi	r20, 0x01	; 1
    2fa4:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2fa8:	82 e0       	ldi	r24, 0x02	; 2
    2faa:	62 e0       	ldi	r22, 0x02	; 2
    2fac:	41 e0       	ldi	r20, 0x01	; 1
    2fae:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2fb2:	82 e0       	ldi	r24, 0x02	; 2
    2fb4:	61 e0       	ldi	r22, 0x01	; 1
    2fb6:	41 e0       	ldi	r20, 0x01	; 1
    2fb8:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>

	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID,LOGIC_LOW);/* Disable LCD RW=0 */
    2fbc:	82 e0       	ldi	r24, 0x02	; 2
    2fbe:	61 e0       	ldi	r22, 0x01	; 1
    2fc0:	40 e0       	ldi	r20, 0x00	; 0
    2fc2:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    2fc6:	80 e0       	ldi	r24, 0x00	; 0
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	a0 ea       	ldi	r26, 0xA0	; 160
    2fcc:	b1 e4       	ldi	r27, 0x41	; 65
    2fce:	8b 87       	std	Y+11, r24	; 0x0b
    2fd0:	9c 87       	std	Y+12, r25	; 0x0c
    2fd2:	ad 87       	std	Y+13, r26	; 0x0d
    2fd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fda:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fde:	20 e0       	ldi	r18, 0x00	; 0
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	4a e7       	ldi	r20, 0x7A	; 122
    2fe4:	55 e4       	ldi	r21, 0x45	; 69
    2fe6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	8f 83       	std	Y+7, r24	; 0x07
    2ff0:	98 87       	std	Y+8, r25	; 0x08
    2ff2:	a9 87       	std	Y+9, r26	; 0x09
    2ff4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ff6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff8:	78 85       	ldd	r23, Y+8	; 0x08
    2ffa:	89 85       	ldd	r24, Y+9	; 0x09
    2ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	40 e8       	ldi	r20, 0x80	; 128
    3004:	5f e3       	ldi	r21, 0x3F	; 63
    3006:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    300a:	88 23       	and	r24, r24
    300c:	2c f4       	brge	.+10     	; 0x3018 <LCD_init+0x8e>
		__ticks = 1;
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	9e 83       	std	Y+6, r25	; 0x06
    3014:	8d 83       	std	Y+5, r24	; 0x05
    3016:	3f c0       	rjmp	.+126    	; 0x3096 <LCD_init+0x10c>
	else if (__tmp > 65535)
    3018:	6f 81       	ldd	r22, Y+7	; 0x07
    301a:	78 85       	ldd	r23, Y+8	; 0x08
    301c:	89 85       	ldd	r24, Y+9	; 0x09
    301e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	3f ef       	ldi	r19, 0xFF	; 255
    3024:	4f e7       	ldi	r20, 0x7F	; 127
    3026:	57 e4       	ldi	r21, 0x47	; 71
    3028:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    302c:	18 16       	cp	r1, r24
    302e:	4c f5       	brge	.+82     	; 0x3082 <LCD_init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3030:	6b 85       	ldd	r22, Y+11	; 0x0b
    3032:	7c 85       	ldd	r23, Y+12	; 0x0c
    3034:	8d 85       	ldd	r24, Y+13	; 0x0d
    3036:	9e 85       	ldd	r25, Y+14	; 0x0e
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	40 e2       	ldi	r20, 0x20	; 32
    303e:	51 e4       	ldi	r21, 0x41	; 65
    3040:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	bc 01       	movw	r22, r24
    304a:	cd 01       	movw	r24, r26
    304c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	9e 83       	std	Y+6, r25	; 0x06
    3056:	8d 83       	std	Y+5, r24	; 0x05
    3058:	0f c0       	rjmp	.+30     	; 0x3078 <LCD_init+0xee>
    305a:	80 e9       	ldi	r24, 0x90	; 144
    305c:	91 e0       	ldi	r25, 0x01	; 1
    305e:	9c 83       	std	Y+4, r25	; 0x04
    3060:	8b 83       	std	Y+3, r24	; 0x03
    3062:	8b 81       	ldd	r24, Y+3	; 0x03
    3064:	9c 81       	ldd	r25, Y+4	; 0x04
    3066:	01 97       	sbiw	r24, 0x01	; 1
    3068:	f1 f7       	brne	.-4      	; 0x3066 <LCD_init+0xdc>
    306a:	9c 83       	std	Y+4, r25	; 0x04
    306c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    306e:	8d 81       	ldd	r24, Y+5	; 0x05
    3070:	9e 81       	ldd	r25, Y+6	; 0x06
    3072:	01 97       	sbiw	r24, 0x01	; 1
    3074:	9e 83       	std	Y+6, r25	; 0x06
    3076:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3078:	8d 81       	ldd	r24, Y+5	; 0x05
    307a:	9e 81       	ldd	r25, Y+6	; 0x06
    307c:	00 97       	sbiw	r24, 0x00	; 0
    307e:	69 f7       	brne	.-38     	; 0x305a <LCD_init+0xd0>
    3080:	14 c0       	rjmp	.+40     	; 0x30aa <LCD_init+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3082:	6f 81       	ldd	r22, Y+7	; 0x07
    3084:	78 85       	ldd	r23, Y+8	; 0x08
    3086:	89 85       	ldd	r24, Y+9	; 0x09
    3088:	9a 85       	ldd	r25, Y+10	; 0x0a
    308a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    308e:	dc 01       	movw	r26, r24
    3090:	cb 01       	movw	r24, r22
    3092:	9e 83       	std	Y+6, r25	; 0x06
    3094:	8d 83       	std	Y+5, r24	; 0x05
    3096:	8d 81       	ldd	r24, Y+5	; 0x05
    3098:	9e 81       	ldd	r25, Y+6	; 0x06
    309a:	9a 83       	std	Y+2, r25	; 0x02
    309c:	89 83       	std	Y+1, r24	; 0x01
    309e:	89 81       	ldd	r24, Y+1	; 0x01
    30a0:	9a 81       	ldd	r25, Y+2	; 0x02
    30a2:	01 97       	sbiw	r24, 0x01	; 1
    30a4:	f1 f7       	brne	.-4      	; 0x30a2 <LCD_init+0x118>
    30a6:	9a 83       	std	Y+2, r25	; 0x02
    30a8:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    30aa:	82 e0       	ldi	r24, 0x02	; 2
    30ac:	63 e0       	ldi	r22, 0x03	; 3
    30ae:	41 e0       	ldi	r20, 0x01	; 1
    30b0:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    30b4:	82 e0       	ldi	r24, 0x02	; 2
    30b6:	64 e0       	ldi	r22, 0x04	; 4
    30b8:	41 e0       	ldi	r20, 0x01	; 1
    30ba:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    30be:	82 e0       	ldi	r24, 0x02	; 2
    30c0:	65 e0       	ldi	r22, 0x05	; 5
    30c2:	41 e0       	ldi	r20, 0x01	; 1
    30c4:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    30c8:	82 e0       	ldi	r24, 0x02	; 2
    30ca:	66 e0       	ldi	r22, 0x06	; 6
    30cc:	41 e0       	ldi	r20, 0x01	; 1
    30ce:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    30d2:	83 e3       	ldi	r24, 0x33	; 51
    30d4:	0e 94 81 18 	call	0x3102	; 0x3102 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    30d8:	82 e3       	ldi	r24, 0x32	; 50
    30da:	0e 94 81 18 	call	0x3102	; 0x3102 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    30de:	88 e2       	ldi	r24, 0x28	; 40
    30e0:	0e 94 81 18 	call	0x3102	; 0x3102 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    30e4:	8c e0       	ldi	r24, 0x0C	; 12
    30e6:	0e 94 81 18 	call	0x3102	; 0x3102 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	0e 94 81 18 	call	0x3102	; 0x3102 <LCD_sendCommand>
}
    30f0:	2e 96       	adiw	r28, 0x0e	; 14
    30f2:	0f b6       	in	r0, 0x3f	; 63
    30f4:	f8 94       	cli
    30f6:	de bf       	out	0x3e, r29	; 62
    30f8:	0f be       	out	0x3f, r0	; 63
    30fa:	cd bf       	out	0x3d, r28	; 61
    30fc:	cf 91       	pop	r28
    30fe:	df 91       	pop	r29
    3100:	08 95       	ret

00003102 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    3102:	0f 93       	push	r16
    3104:	1f 93       	push	r17
    3106:	df 93       	push	r29
    3108:	cf 93       	push	r28
    310a:	cd b7       	in	r28, 0x3d	; 61
    310c:	de b7       	in	r29, 0x3e	; 62
    310e:	c3 56       	subi	r28, 0x63	; 99
    3110:	d0 40       	sbci	r29, 0x00	; 0
    3112:	0f b6       	in	r0, 0x3f	; 63
    3114:	f8 94       	cli
    3116:	de bf       	out	0x3e, r29	; 62
    3118:	0f be       	out	0x3f, r0	; 63
    311a:	cd bf       	out	0x3d, r28	; 61
    311c:	fe 01       	movw	r30, r28
    311e:	ed 59       	subi	r30, 0x9D	; 157
    3120:	ff 4f       	sbci	r31, 0xFF	; 255
    3122:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    3124:	82 e0       	ldi	r24, 0x02	; 2
    3126:	60 e0       	ldi	r22, 0x00	; 0
    3128:	40 e0       	ldi	r20, 0x00	; 0
    312a:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    312e:	fe 01       	movw	r30, r28
    3130:	e1 5a       	subi	r30, 0xA1	; 161
    3132:	ff 4f       	sbci	r31, 0xFF	; 255
    3134:	80 e0       	ldi	r24, 0x00	; 0
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	a0 e8       	ldi	r26, 0x80	; 128
    313a:	bf e3       	ldi	r27, 0x3F	; 63
    313c:	80 83       	st	Z, r24
    313e:	91 83       	std	Z+1, r25	; 0x01
    3140:	a2 83       	std	Z+2, r26	; 0x02
    3142:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3144:	8e 01       	movw	r16, r28
    3146:	05 5a       	subi	r16, 0xA5	; 165
    3148:	1f 4f       	sbci	r17, 0xFF	; 255
    314a:	fe 01       	movw	r30, r28
    314c:	e1 5a       	subi	r30, 0xA1	; 161
    314e:	ff 4f       	sbci	r31, 0xFF	; 255
    3150:	60 81       	ld	r22, Z
    3152:	71 81       	ldd	r23, Z+1	; 0x01
    3154:	82 81       	ldd	r24, Z+2	; 0x02
    3156:	93 81       	ldd	r25, Z+3	; 0x03
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	4a e7       	ldi	r20, 0x7A	; 122
    315e:	55 e4       	ldi	r21, 0x45	; 69
    3160:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3164:	dc 01       	movw	r26, r24
    3166:	cb 01       	movw	r24, r22
    3168:	f8 01       	movw	r30, r16
    316a:	80 83       	st	Z, r24
    316c:	91 83       	std	Z+1, r25	; 0x01
    316e:	a2 83       	std	Z+2, r26	; 0x02
    3170:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3172:	fe 01       	movw	r30, r28
    3174:	e5 5a       	subi	r30, 0xA5	; 165
    3176:	ff 4f       	sbci	r31, 0xFF	; 255
    3178:	60 81       	ld	r22, Z
    317a:	71 81       	ldd	r23, Z+1	; 0x01
    317c:	82 81       	ldd	r24, Z+2	; 0x02
    317e:	93 81       	ldd	r25, Z+3	; 0x03
    3180:	20 e0       	ldi	r18, 0x00	; 0
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	40 e8       	ldi	r20, 0x80	; 128
    3186:	5f e3       	ldi	r21, 0x3F	; 63
    3188:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    318c:	88 23       	and	r24, r24
    318e:	44 f4       	brge	.+16     	; 0x31a0 <LCD_sendCommand+0x9e>
		__ticks = 1;
    3190:	fe 01       	movw	r30, r28
    3192:	e7 5a       	subi	r30, 0xA7	; 167
    3194:	ff 4f       	sbci	r31, 0xFF	; 255
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	91 83       	std	Z+1, r25	; 0x01
    319c:	80 83       	st	Z, r24
    319e:	64 c0       	rjmp	.+200    	; 0x3268 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    31a0:	fe 01       	movw	r30, r28
    31a2:	e5 5a       	subi	r30, 0xA5	; 165
    31a4:	ff 4f       	sbci	r31, 0xFF	; 255
    31a6:	60 81       	ld	r22, Z
    31a8:	71 81       	ldd	r23, Z+1	; 0x01
    31aa:	82 81       	ldd	r24, Z+2	; 0x02
    31ac:	93 81       	ldd	r25, Z+3	; 0x03
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	3f ef       	ldi	r19, 0xFF	; 255
    31b2:	4f e7       	ldi	r20, 0x7F	; 127
    31b4:	57 e4       	ldi	r21, 0x47	; 71
    31b6:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    31ba:	18 16       	cp	r1, r24
    31bc:	0c f0       	brlt	.+2      	; 0x31c0 <LCD_sendCommand+0xbe>
    31be:	43 c0       	rjmp	.+134    	; 0x3246 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c0:	fe 01       	movw	r30, r28
    31c2:	e1 5a       	subi	r30, 0xA1	; 161
    31c4:	ff 4f       	sbci	r31, 0xFF	; 255
    31c6:	60 81       	ld	r22, Z
    31c8:	71 81       	ldd	r23, Z+1	; 0x01
    31ca:	82 81       	ldd	r24, Z+2	; 0x02
    31cc:	93 81       	ldd	r25, Z+3	; 0x03
    31ce:	20 e0       	ldi	r18, 0x00	; 0
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	40 e2       	ldi	r20, 0x20	; 32
    31d4:	51 e4       	ldi	r21, 0x41	; 65
    31d6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    31da:	dc 01       	movw	r26, r24
    31dc:	cb 01       	movw	r24, r22
    31de:	8e 01       	movw	r16, r28
    31e0:	07 5a       	subi	r16, 0xA7	; 167
    31e2:	1f 4f       	sbci	r17, 0xFF	; 255
    31e4:	bc 01       	movw	r22, r24
    31e6:	cd 01       	movw	r24, r26
    31e8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	f8 01       	movw	r30, r16
    31f2:	91 83       	std	Z+1, r25	; 0x01
    31f4:	80 83       	st	Z, r24
    31f6:	1f c0       	rjmp	.+62     	; 0x3236 <LCD_sendCommand+0x134>
    31f8:	fe 01       	movw	r30, r28
    31fa:	e9 5a       	subi	r30, 0xA9	; 169
    31fc:	ff 4f       	sbci	r31, 0xFF	; 255
    31fe:	80 e9       	ldi	r24, 0x90	; 144
    3200:	91 e0       	ldi	r25, 0x01	; 1
    3202:	91 83       	std	Z+1, r25	; 0x01
    3204:	80 83       	st	Z, r24
    3206:	fe 01       	movw	r30, r28
    3208:	e9 5a       	subi	r30, 0xA9	; 169
    320a:	ff 4f       	sbci	r31, 0xFF	; 255
    320c:	80 81       	ld	r24, Z
    320e:	91 81       	ldd	r25, Z+1	; 0x01
    3210:	01 97       	sbiw	r24, 0x01	; 1
    3212:	f1 f7       	brne	.-4      	; 0x3210 <LCD_sendCommand+0x10e>
    3214:	fe 01       	movw	r30, r28
    3216:	e9 5a       	subi	r30, 0xA9	; 169
    3218:	ff 4f       	sbci	r31, 0xFF	; 255
    321a:	91 83       	std	Z+1, r25	; 0x01
    321c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    321e:	de 01       	movw	r26, r28
    3220:	a7 5a       	subi	r26, 0xA7	; 167
    3222:	bf 4f       	sbci	r27, 0xFF	; 255
    3224:	fe 01       	movw	r30, r28
    3226:	e7 5a       	subi	r30, 0xA7	; 167
    3228:	ff 4f       	sbci	r31, 0xFF	; 255
    322a:	80 81       	ld	r24, Z
    322c:	91 81       	ldd	r25, Z+1	; 0x01
    322e:	01 97       	sbiw	r24, 0x01	; 1
    3230:	11 96       	adiw	r26, 0x01	; 1
    3232:	9c 93       	st	X, r25
    3234:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3236:	fe 01       	movw	r30, r28
    3238:	e7 5a       	subi	r30, 0xA7	; 167
    323a:	ff 4f       	sbci	r31, 0xFF	; 255
    323c:	80 81       	ld	r24, Z
    323e:	91 81       	ldd	r25, Z+1	; 0x01
    3240:	00 97       	sbiw	r24, 0x00	; 0
    3242:	d1 f6       	brne	.-76     	; 0x31f8 <LCD_sendCommand+0xf6>
    3244:	27 c0       	rjmp	.+78     	; 0x3294 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3246:	8e 01       	movw	r16, r28
    3248:	07 5a       	subi	r16, 0xA7	; 167
    324a:	1f 4f       	sbci	r17, 0xFF	; 255
    324c:	fe 01       	movw	r30, r28
    324e:	e5 5a       	subi	r30, 0xA5	; 165
    3250:	ff 4f       	sbci	r31, 0xFF	; 255
    3252:	60 81       	ld	r22, Z
    3254:	71 81       	ldd	r23, Z+1	; 0x01
    3256:	82 81       	ldd	r24, Z+2	; 0x02
    3258:	93 81       	ldd	r25, Z+3	; 0x03
    325a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    325e:	dc 01       	movw	r26, r24
    3260:	cb 01       	movw	r24, r22
    3262:	f8 01       	movw	r30, r16
    3264:	91 83       	std	Z+1, r25	; 0x01
    3266:	80 83       	st	Z, r24
    3268:	de 01       	movw	r26, r28
    326a:	ab 5a       	subi	r26, 0xAB	; 171
    326c:	bf 4f       	sbci	r27, 0xFF	; 255
    326e:	fe 01       	movw	r30, r28
    3270:	e7 5a       	subi	r30, 0xA7	; 167
    3272:	ff 4f       	sbci	r31, 0xFF	; 255
    3274:	80 81       	ld	r24, Z
    3276:	91 81       	ldd	r25, Z+1	; 0x01
    3278:	8d 93       	st	X+, r24
    327a:	9c 93       	st	X, r25
    327c:	fe 01       	movw	r30, r28
    327e:	eb 5a       	subi	r30, 0xAB	; 171
    3280:	ff 4f       	sbci	r31, 0xFF	; 255
    3282:	80 81       	ld	r24, Z
    3284:	91 81       	ldd	r25, Z+1	; 0x01
    3286:	01 97       	sbiw	r24, 0x01	; 1
    3288:	f1 f7       	brne	.-4      	; 0x3286 <LCD_sendCommand+0x184>
    328a:	fe 01       	movw	r30, r28
    328c:	eb 5a       	subi	r30, 0xAB	; 171
    328e:	ff 4f       	sbci	r31, 0xFF	; 255
    3290:	91 83       	std	Z+1, r25	; 0x01
    3292:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3294:	82 e0       	ldi	r24, 0x02	; 2
    3296:	62 e0       	ldi	r22, 0x02	; 2
    3298:	41 e0       	ldi	r20, 0x01	; 1
    329a:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    329e:	fe 01       	movw	r30, r28
    32a0:	ef 5a       	subi	r30, 0xAF	; 175
    32a2:	ff 4f       	sbci	r31, 0xFF	; 255
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	a0 e8       	ldi	r26, 0x80	; 128
    32aa:	bf e3       	ldi	r27, 0x3F	; 63
    32ac:	80 83       	st	Z, r24
    32ae:	91 83       	std	Z+1, r25	; 0x01
    32b0:	a2 83       	std	Z+2, r26	; 0x02
    32b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b4:	8e 01       	movw	r16, r28
    32b6:	03 5b       	subi	r16, 0xB3	; 179
    32b8:	1f 4f       	sbci	r17, 0xFF	; 255
    32ba:	fe 01       	movw	r30, r28
    32bc:	ef 5a       	subi	r30, 0xAF	; 175
    32be:	ff 4f       	sbci	r31, 0xFF	; 255
    32c0:	60 81       	ld	r22, Z
    32c2:	71 81       	ldd	r23, Z+1	; 0x01
    32c4:	82 81       	ldd	r24, Z+2	; 0x02
    32c6:	93 81       	ldd	r25, Z+3	; 0x03
    32c8:	20 e0       	ldi	r18, 0x00	; 0
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	4a e7       	ldi	r20, 0x7A	; 122
    32ce:	55 e4       	ldi	r21, 0x45	; 69
    32d0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    32d4:	dc 01       	movw	r26, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	f8 01       	movw	r30, r16
    32da:	80 83       	st	Z, r24
    32dc:	91 83       	std	Z+1, r25	; 0x01
    32de:	a2 83       	std	Z+2, r26	; 0x02
    32e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32e2:	fe 01       	movw	r30, r28
    32e4:	e3 5b       	subi	r30, 0xB3	; 179
    32e6:	ff 4f       	sbci	r31, 0xFF	; 255
    32e8:	60 81       	ld	r22, Z
    32ea:	71 81       	ldd	r23, Z+1	; 0x01
    32ec:	82 81       	ldd	r24, Z+2	; 0x02
    32ee:	93 81       	ldd	r25, Z+3	; 0x03
    32f0:	20 e0       	ldi	r18, 0x00	; 0
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	40 e8       	ldi	r20, 0x80	; 128
    32f6:	5f e3       	ldi	r21, 0x3F	; 63
    32f8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    32fc:	88 23       	and	r24, r24
    32fe:	44 f4       	brge	.+16     	; 0x3310 <LCD_sendCommand+0x20e>
		__ticks = 1;
    3300:	fe 01       	movw	r30, r28
    3302:	e5 5b       	subi	r30, 0xB5	; 181
    3304:	ff 4f       	sbci	r31, 0xFF	; 255
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	91 83       	std	Z+1, r25	; 0x01
    330c:	80 83       	st	Z, r24
    330e:	64 c0       	rjmp	.+200    	; 0x33d8 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    3310:	fe 01       	movw	r30, r28
    3312:	e3 5b       	subi	r30, 0xB3	; 179
    3314:	ff 4f       	sbci	r31, 0xFF	; 255
    3316:	60 81       	ld	r22, Z
    3318:	71 81       	ldd	r23, Z+1	; 0x01
    331a:	82 81       	ldd	r24, Z+2	; 0x02
    331c:	93 81       	ldd	r25, Z+3	; 0x03
    331e:	20 e0       	ldi	r18, 0x00	; 0
    3320:	3f ef       	ldi	r19, 0xFF	; 255
    3322:	4f e7       	ldi	r20, 0x7F	; 127
    3324:	57 e4       	ldi	r21, 0x47	; 71
    3326:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    332a:	18 16       	cp	r1, r24
    332c:	0c f0       	brlt	.+2      	; 0x3330 <LCD_sendCommand+0x22e>
    332e:	43 c0       	rjmp	.+134    	; 0x33b6 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3330:	fe 01       	movw	r30, r28
    3332:	ef 5a       	subi	r30, 0xAF	; 175
    3334:	ff 4f       	sbci	r31, 0xFF	; 255
    3336:	60 81       	ld	r22, Z
    3338:	71 81       	ldd	r23, Z+1	; 0x01
    333a:	82 81       	ldd	r24, Z+2	; 0x02
    333c:	93 81       	ldd	r25, Z+3	; 0x03
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	40 e2       	ldi	r20, 0x20	; 32
    3344:	51 e4       	ldi	r21, 0x41	; 65
    3346:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    334a:	dc 01       	movw	r26, r24
    334c:	cb 01       	movw	r24, r22
    334e:	8e 01       	movw	r16, r28
    3350:	05 5b       	subi	r16, 0xB5	; 181
    3352:	1f 4f       	sbci	r17, 0xFF	; 255
    3354:	bc 01       	movw	r22, r24
    3356:	cd 01       	movw	r24, r26
    3358:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	f8 01       	movw	r30, r16
    3362:	91 83       	std	Z+1, r25	; 0x01
    3364:	80 83       	st	Z, r24
    3366:	1f c0       	rjmp	.+62     	; 0x33a6 <LCD_sendCommand+0x2a4>
    3368:	fe 01       	movw	r30, r28
    336a:	e7 5b       	subi	r30, 0xB7	; 183
    336c:	ff 4f       	sbci	r31, 0xFF	; 255
    336e:	80 e9       	ldi	r24, 0x90	; 144
    3370:	91 e0       	ldi	r25, 0x01	; 1
    3372:	91 83       	std	Z+1, r25	; 0x01
    3374:	80 83       	st	Z, r24
    3376:	fe 01       	movw	r30, r28
    3378:	e7 5b       	subi	r30, 0xB7	; 183
    337a:	ff 4f       	sbci	r31, 0xFF	; 255
    337c:	80 81       	ld	r24, Z
    337e:	91 81       	ldd	r25, Z+1	; 0x01
    3380:	01 97       	sbiw	r24, 0x01	; 1
    3382:	f1 f7       	brne	.-4      	; 0x3380 <LCD_sendCommand+0x27e>
    3384:	fe 01       	movw	r30, r28
    3386:	e7 5b       	subi	r30, 0xB7	; 183
    3388:	ff 4f       	sbci	r31, 0xFF	; 255
    338a:	91 83       	std	Z+1, r25	; 0x01
    338c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    338e:	de 01       	movw	r26, r28
    3390:	a5 5b       	subi	r26, 0xB5	; 181
    3392:	bf 4f       	sbci	r27, 0xFF	; 255
    3394:	fe 01       	movw	r30, r28
    3396:	e5 5b       	subi	r30, 0xB5	; 181
    3398:	ff 4f       	sbci	r31, 0xFF	; 255
    339a:	80 81       	ld	r24, Z
    339c:	91 81       	ldd	r25, Z+1	; 0x01
    339e:	01 97       	sbiw	r24, 0x01	; 1
    33a0:	11 96       	adiw	r26, 0x01	; 1
    33a2:	9c 93       	st	X, r25
    33a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33a6:	fe 01       	movw	r30, r28
    33a8:	e5 5b       	subi	r30, 0xB5	; 181
    33aa:	ff 4f       	sbci	r31, 0xFF	; 255
    33ac:	80 81       	ld	r24, Z
    33ae:	91 81       	ldd	r25, Z+1	; 0x01
    33b0:	00 97       	sbiw	r24, 0x00	; 0
    33b2:	d1 f6       	brne	.-76     	; 0x3368 <LCD_sendCommand+0x266>
    33b4:	27 c0       	rjmp	.+78     	; 0x3404 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33b6:	8e 01       	movw	r16, r28
    33b8:	05 5b       	subi	r16, 0xB5	; 181
    33ba:	1f 4f       	sbci	r17, 0xFF	; 255
    33bc:	fe 01       	movw	r30, r28
    33be:	e3 5b       	subi	r30, 0xB3	; 179
    33c0:	ff 4f       	sbci	r31, 0xFF	; 255
    33c2:	60 81       	ld	r22, Z
    33c4:	71 81       	ldd	r23, Z+1	; 0x01
    33c6:	82 81       	ldd	r24, Z+2	; 0x02
    33c8:	93 81       	ldd	r25, Z+3	; 0x03
    33ca:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    33ce:	dc 01       	movw	r26, r24
    33d0:	cb 01       	movw	r24, r22
    33d2:	f8 01       	movw	r30, r16
    33d4:	91 83       	std	Z+1, r25	; 0x01
    33d6:	80 83       	st	Z, r24
    33d8:	de 01       	movw	r26, r28
    33da:	a9 5b       	subi	r26, 0xB9	; 185
    33dc:	bf 4f       	sbci	r27, 0xFF	; 255
    33de:	fe 01       	movw	r30, r28
    33e0:	e5 5b       	subi	r30, 0xB5	; 181
    33e2:	ff 4f       	sbci	r31, 0xFF	; 255
    33e4:	80 81       	ld	r24, Z
    33e6:	91 81       	ldd	r25, Z+1	; 0x01
    33e8:	8d 93       	st	X+, r24
    33ea:	9c 93       	st	X, r25
    33ec:	fe 01       	movw	r30, r28
    33ee:	e9 5b       	subi	r30, 0xB9	; 185
    33f0:	ff 4f       	sbci	r31, 0xFF	; 255
    33f2:	80 81       	ld	r24, Z
    33f4:	91 81       	ldd	r25, Z+1	; 0x01
    33f6:	01 97       	sbiw	r24, 0x01	; 1
    33f8:	f1 f7       	brne	.-4      	; 0x33f6 <LCD_sendCommand+0x2f4>
    33fa:	fe 01       	movw	r30, r28
    33fc:	e9 5b       	subi	r30, 0xB9	; 185
    33fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3400:	91 83       	std	Z+1, r25	; 0x01
    3402:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    3404:	fe 01       	movw	r30, r28
    3406:	ed 59       	subi	r30, 0x9D	; 157
    3408:	ff 4f       	sbci	r31, 0xFF	; 255
    340a:	80 81       	ld	r24, Z
    340c:	88 2f       	mov	r24, r24
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	80 71       	andi	r24, 0x10	; 16
    3412:	90 70       	andi	r25, 0x00	; 0
    3414:	95 95       	asr	r25
    3416:	87 95       	ror	r24
    3418:	95 95       	asr	r25
    341a:	87 95       	ror	r24
    341c:	95 95       	asr	r25
    341e:	87 95       	ror	r24
    3420:	95 95       	asr	r25
    3422:	87 95       	ror	r24
    3424:	98 2f       	mov	r25, r24
    3426:	82 e0       	ldi	r24, 0x02	; 2
    3428:	63 e0       	ldi	r22, 0x03	; 3
    342a:	49 2f       	mov	r20, r25
    342c:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    3430:	fe 01       	movw	r30, r28
    3432:	ed 59       	subi	r30, 0x9D	; 157
    3434:	ff 4f       	sbci	r31, 0xFF	; 255
    3436:	80 81       	ld	r24, Z
    3438:	88 2f       	mov	r24, r24
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	80 72       	andi	r24, 0x20	; 32
    343e:	90 70       	andi	r25, 0x00	; 0
    3440:	95 95       	asr	r25
    3442:	87 95       	ror	r24
    3444:	95 95       	asr	r25
    3446:	87 95       	ror	r24
    3448:	95 95       	asr	r25
    344a:	87 95       	ror	r24
    344c:	95 95       	asr	r25
    344e:	87 95       	ror	r24
    3450:	95 95       	asr	r25
    3452:	87 95       	ror	r24
    3454:	98 2f       	mov	r25, r24
    3456:	82 e0       	ldi	r24, 0x02	; 2
    3458:	64 e0       	ldi	r22, 0x04	; 4
    345a:	49 2f       	mov	r20, r25
    345c:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    3460:	fe 01       	movw	r30, r28
    3462:	ed 59       	subi	r30, 0x9D	; 157
    3464:	ff 4f       	sbci	r31, 0xFF	; 255
    3466:	80 81       	ld	r24, Z
    3468:	88 2f       	mov	r24, r24
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	80 74       	andi	r24, 0x40	; 64
    346e:	90 70       	andi	r25, 0x00	; 0
    3470:	08 2e       	mov	r0, r24
    3472:	89 2f       	mov	r24, r25
    3474:	00 0c       	add	r0, r0
    3476:	88 1f       	adc	r24, r24
    3478:	99 0b       	sbc	r25, r25
    347a:	00 0c       	add	r0, r0
    347c:	88 1f       	adc	r24, r24
    347e:	99 1f       	adc	r25, r25
    3480:	98 2f       	mov	r25, r24
    3482:	82 e0       	ldi	r24, 0x02	; 2
    3484:	65 e0       	ldi	r22, 0x05	; 5
    3486:	49 2f       	mov	r20, r25
    3488:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    348c:	fe 01       	movw	r30, r28
    348e:	ed 59       	subi	r30, 0x9D	; 157
    3490:	ff 4f       	sbci	r31, 0xFF	; 255
    3492:	80 81       	ld	r24, Z
    3494:	98 2f       	mov	r25, r24
    3496:	99 1f       	adc	r25, r25
    3498:	99 27       	eor	r25, r25
    349a:	99 1f       	adc	r25, r25
    349c:	82 e0       	ldi	r24, 0x02	; 2
    349e:	66 e0       	ldi	r22, 0x06	; 6
    34a0:	49 2f       	mov	r20, r25
    34a2:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    34a6:	fe 01       	movw	r30, r28
    34a8:	ed 5b       	subi	r30, 0xBD	; 189
    34aa:	ff 4f       	sbci	r31, 0xFF	; 255
    34ac:	80 e0       	ldi	r24, 0x00	; 0
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	a0 e8       	ldi	r26, 0x80	; 128
    34b2:	bf e3       	ldi	r27, 0x3F	; 63
    34b4:	80 83       	st	Z, r24
    34b6:	91 83       	std	Z+1, r25	; 0x01
    34b8:	a2 83       	std	Z+2, r26	; 0x02
    34ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34bc:	8e 01       	movw	r16, r28
    34be:	01 5c       	subi	r16, 0xC1	; 193
    34c0:	1f 4f       	sbci	r17, 0xFF	; 255
    34c2:	fe 01       	movw	r30, r28
    34c4:	ed 5b       	subi	r30, 0xBD	; 189
    34c6:	ff 4f       	sbci	r31, 0xFF	; 255
    34c8:	60 81       	ld	r22, Z
    34ca:	71 81       	ldd	r23, Z+1	; 0x01
    34cc:	82 81       	ldd	r24, Z+2	; 0x02
    34ce:	93 81       	ldd	r25, Z+3	; 0x03
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	4a e7       	ldi	r20, 0x7A	; 122
    34d6:	55 e4       	ldi	r21, 0x45	; 69
    34d8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    34dc:	dc 01       	movw	r26, r24
    34de:	cb 01       	movw	r24, r22
    34e0:	f8 01       	movw	r30, r16
    34e2:	80 83       	st	Z, r24
    34e4:	91 83       	std	Z+1, r25	; 0x01
    34e6:	a2 83       	std	Z+2, r26	; 0x02
    34e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34ea:	fe 01       	movw	r30, r28
    34ec:	ff 96       	adiw	r30, 0x3f	; 63
    34ee:	60 81       	ld	r22, Z
    34f0:	71 81       	ldd	r23, Z+1	; 0x01
    34f2:	82 81       	ldd	r24, Z+2	; 0x02
    34f4:	93 81       	ldd	r25, Z+3	; 0x03
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	40 e8       	ldi	r20, 0x80	; 128
    34fc:	5f e3       	ldi	r21, 0x3F	; 63
    34fe:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3502:	88 23       	and	r24, r24
    3504:	2c f4       	brge	.+10     	; 0x3510 <LCD_sendCommand+0x40e>
		__ticks = 1;
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	9e af       	std	Y+62, r25	; 0x3e
    350c:	8d af       	std	Y+61, r24	; 0x3d
    350e:	46 c0       	rjmp	.+140    	; 0x359c <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    3510:	fe 01       	movw	r30, r28
    3512:	ff 96       	adiw	r30, 0x3f	; 63
    3514:	60 81       	ld	r22, Z
    3516:	71 81       	ldd	r23, Z+1	; 0x01
    3518:	82 81       	ldd	r24, Z+2	; 0x02
    351a:	93 81       	ldd	r25, Z+3	; 0x03
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	3f ef       	ldi	r19, 0xFF	; 255
    3520:	4f e7       	ldi	r20, 0x7F	; 127
    3522:	57 e4       	ldi	r21, 0x47	; 71
    3524:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3528:	18 16       	cp	r1, r24
    352a:	64 f5       	brge	.+88     	; 0x3584 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    352c:	fe 01       	movw	r30, r28
    352e:	ed 5b       	subi	r30, 0xBD	; 189
    3530:	ff 4f       	sbci	r31, 0xFF	; 255
    3532:	60 81       	ld	r22, Z
    3534:	71 81       	ldd	r23, Z+1	; 0x01
    3536:	82 81       	ldd	r24, Z+2	; 0x02
    3538:	93 81       	ldd	r25, Z+3	; 0x03
    353a:	20 e0       	ldi	r18, 0x00	; 0
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	40 e2       	ldi	r20, 0x20	; 32
    3540:	51 e4       	ldi	r21, 0x41	; 65
    3542:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3546:	dc 01       	movw	r26, r24
    3548:	cb 01       	movw	r24, r22
    354a:	bc 01       	movw	r22, r24
    354c:	cd 01       	movw	r24, r26
    354e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3552:	dc 01       	movw	r26, r24
    3554:	cb 01       	movw	r24, r22
    3556:	9e af       	std	Y+62, r25	; 0x3e
    3558:	8d af       	std	Y+61, r24	; 0x3d
    355a:	0f c0       	rjmp	.+30     	; 0x357a <LCD_sendCommand+0x478>
    355c:	80 e9       	ldi	r24, 0x90	; 144
    355e:	91 e0       	ldi	r25, 0x01	; 1
    3560:	9c af       	std	Y+60, r25	; 0x3c
    3562:	8b af       	std	Y+59, r24	; 0x3b
    3564:	8b ad       	ldd	r24, Y+59	; 0x3b
    3566:	9c ad       	ldd	r25, Y+60	; 0x3c
    3568:	01 97       	sbiw	r24, 0x01	; 1
    356a:	f1 f7       	brne	.-4      	; 0x3568 <LCD_sendCommand+0x466>
    356c:	9c af       	std	Y+60, r25	; 0x3c
    356e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3570:	8d ad       	ldd	r24, Y+61	; 0x3d
    3572:	9e ad       	ldd	r25, Y+62	; 0x3e
    3574:	01 97       	sbiw	r24, 0x01	; 1
    3576:	9e af       	std	Y+62, r25	; 0x3e
    3578:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    357a:	8d ad       	ldd	r24, Y+61	; 0x3d
    357c:	9e ad       	ldd	r25, Y+62	; 0x3e
    357e:	00 97       	sbiw	r24, 0x00	; 0
    3580:	69 f7       	brne	.-38     	; 0x355c <LCD_sendCommand+0x45a>
    3582:	16 c0       	rjmp	.+44     	; 0x35b0 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3584:	fe 01       	movw	r30, r28
    3586:	ff 96       	adiw	r30, 0x3f	; 63
    3588:	60 81       	ld	r22, Z
    358a:	71 81       	ldd	r23, Z+1	; 0x01
    358c:	82 81       	ldd	r24, Z+2	; 0x02
    358e:	93 81       	ldd	r25, Z+3	; 0x03
    3590:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	9e af       	std	Y+62, r25	; 0x3e
    359a:	8d af       	std	Y+61, r24	; 0x3d
    359c:	8d ad       	ldd	r24, Y+61	; 0x3d
    359e:	9e ad       	ldd	r25, Y+62	; 0x3e
    35a0:	9a af       	std	Y+58, r25	; 0x3a
    35a2:	89 af       	std	Y+57, r24	; 0x39
    35a4:	89 ad       	ldd	r24, Y+57	; 0x39
    35a6:	9a ad       	ldd	r25, Y+58	; 0x3a
    35a8:	01 97       	sbiw	r24, 0x01	; 1
    35aa:	f1 f7       	brne	.-4      	; 0x35a8 <LCD_sendCommand+0x4a6>
    35ac:	9a af       	std	Y+58, r25	; 0x3a
    35ae:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    35b0:	82 e0       	ldi	r24, 0x02	; 2
    35b2:	62 e0       	ldi	r22, 0x02	; 2
    35b4:	40 e0       	ldi	r20, 0x00	; 0
    35b6:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    35ba:	80 e0       	ldi	r24, 0x00	; 0
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	a0 e8       	ldi	r26, 0x80	; 128
    35c0:	bf e3       	ldi	r27, 0x3F	; 63
    35c2:	8d ab       	std	Y+53, r24	; 0x35
    35c4:	9e ab       	std	Y+54, r25	; 0x36
    35c6:	af ab       	std	Y+55, r26	; 0x37
    35c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35ca:	6d a9       	ldd	r22, Y+53	; 0x35
    35cc:	7e a9       	ldd	r23, Y+54	; 0x36
    35ce:	8f a9       	ldd	r24, Y+55	; 0x37
    35d0:	98 ad       	ldd	r25, Y+56	; 0x38
    35d2:	20 e0       	ldi	r18, 0x00	; 0
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	4a e7       	ldi	r20, 0x7A	; 122
    35d8:	55 e4       	ldi	r21, 0x45	; 69
    35da:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    35de:	dc 01       	movw	r26, r24
    35e0:	cb 01       	movw	r24, r22
    35e2:	89 ab       	std	Y+49, r24	; 0x31
    35e4:	9a ab       	std	Y+50, r25	; 0x32
    35e6:	ab ab       	std	Y+51, r26	; 0x33
    35e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    35ea:	69 a9       	ldd	r22, Y+49	; 0x31
    35ec:	7a a9       	ldd	r23, Y+50	; 0x32
    35ee:	8b a9       	ldd	r24, Y+51	; 0x33
    35f0:	9c a9       	ldd	r25, Y+52	; 0x34
    35f2:	20 e0       	ldi	r18, 0x00	; 0
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	40 e8       	ldi	r20, 0x80	; 128
    35f8:	5f e3       	ldi	r21, 0x3F	; 63
    35fa:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    35fe:	88 23       	and	r24, r24
    3600:	2c f4       	brge	.+10     	; 0x360c <LCD_sendCommand+0x50a>
		__ticks = 1;
    3602:	81 e0       	ldi	r24, 0x01	; 1
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	98 ab       	std	Y+48, r25	; 0x30
    3608:	8f a7       	std	Y+47, r24	; 0x2f
    360a:	3f c0       	rjmp	.+126    	; 0x368a <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    360c:	69 a9       	ldd	r22, Y+49	; 0x31
    360e:	7a a9       	ldd	r23, Y+50	; 0x32
    3610:	8b a9       	ldd	r24, Y+51	; 0x33
    3612:	9c a9       	ldd	r25, Y+52	; 0x34
    3614:	20 e0       	ldi	r18, 0x00	; 0
    3616:	3f ef       	ldi	r19, 0xFF	; 255
    3618:	4f e7       	ldi	r20, 0x7F	; 127
    361a:	57 e4       	ldi	r21, 0x47	; 71
    361c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3620:	18 16       	cp	r1, r24
    3622:	4c f5       	brge	.+82     	; 0x3676 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3624:	6d a9       	ldd	r22, Y+53	; 0x35
    3626:	7e a9       	ldd	r23, Y+54	; 0x36
    3628:	8f a9       	ldd	r24, Y+55	; 0x37
    362a:	98 ad       	ldd	r25, Y+56	; 0x38
    362c:	20 e0       	ldi	r18, 0x00	; 0
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	40 e2       	ldi	r20, 0x20	; 32
    3632:	51 e4       	ldi	r21, 0x41	; 65
    3634:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3638:	dc 01       	movw	r26, r24
    363a:	cb 01       	movw	r24, r22
    363c:	bc 01       	movw	r22, r24
    363e:	cd 01       	movw	r24, r26
    3640:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3644:	dc 01       	movw	r26, r24
    3646:	cb 01       	movw	r24, r22
    3648:	98 ab       	std	Y+48, r25	; 0x30
    364a:	8f a7       	std	Y+47, r24	; 0x2f
    364c:	0f c0       	rjmp	.+30     	; 0x366c <LCD_sendCommand+0x56a>
    364e:	80 e9       	ldi	r24, 0x90	; 144
    3650:	91 e0       	ldi	r25, 0x01	; 1
    3652:	9e a7       	std	Y+46, r25	; 0x2e
    3654:	8d a7       	std	Y+45, r24	; 0x2d
    3656:	8d a5       	ldd	r24, Y+45	; 0x2d
    3658:	9e a5       	ldd	r25, Y+46	; 0x2e
    365a:	01 97       	sbiw	r24, 0x01	; 1
    365c:	f1 f7       	brne	.-4      	; 0x365a <LCD_sendCommand+0x558>
    365e:	9e a7       	std	Y+46, r25	; 0x2e
    3660:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3662:	8f a5       	ldd	r24, Y+47	; 0x2f
    3664:	98 a9       	ldd	r25, Y+48	; 0x30
    3666:	01 97       	sbiw	r24, 0x01	; 1
    3668:	98 ab       	std	Y+48, r25	; 0x30
    366a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    366c:	8f a5       	ldd	r24, Y+47	; 0x2f
    366e:	98 a9       	ldd	r25, Y+48	; 0x30
    3670:	00 97       	sbiw	r24, 0x00	; 0
    3672:	69 f7       	brne	.-38     	; 0x364e <LCD_sendCommand+0x54c>
    3674:	14 c0       	rjmp	.+40     	; 0x369e <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3676:	69 a9       	ldd	r22, Y+49	; 0x31
    3678:	7a a9       	ldd	r23, Y+50	; 0x32
    367a:	8b a9       	ldd	r24, Y+51	; 0x33
    367c:	9c a9       	ldd	r25, Y+52	; 0x34
    367e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3682:	dc 01       	movw	r26, r24
    3684:	cb 01       	movw	r24, r22
    3686:	98 ab       	std	Y+48, r25	; 0x30
    3688:	8f a7       	std	Y+47, r24	; 0x2f
    368a:	8f a5       	ldd	r24, Y+47	; 0x2f
    368c:	98 a9       	ldd	r25, Y+48	; 0x30
    368e:	9c a7       	std	Y+44, r25	; 0x2c
    3690:	8b a7       	std	Y+43, r24	; 0x2b
    3692:	8b a5       	ldd	r24, Y+43	; 0x2b
    3694:	9c a5       	ldd	r25, Y+44	; 0x2c
    3696:	01 97       	sbiw	r24, 0x01	; 1
    3698:	f1 f7       	brne	.-4      	; 0x3696 <LCD_sendCommand+0x594>
    369a:	9c a7       	std	Y+44, r25	; 0x2c
    369c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    369e:	82 e0       	ldi	r24, 0x02	; 2
    36a0:	62 e0       	ldi	r22, 0x02	; 2
    36a2:	41 e0       	ldi	r20, 0x01	; 1
    36a4:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    36a8:	80 e0       	ldi	r24, 0x00	; 0
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	a0 e8       	ldi	r26, 0x80	; 128
    36ae:	bf e3       	ldi	r27, 0x3F	; 63
    36b0:	8f a3       	std	Y+39, r24	; 0x27
    36b2:	98 a7       	std	Y+40, r25	; 0x28
    36b4:	a9 a7       	std	Y+41, r26	; 0x29
    36b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36b8:	6f a1       	ldd	r22, Y+39	; 0x27
    36ba:	78 a5       	ldd	r23, Y+40	; 0x28
    36bc:	89 a5       	ldd	r24, Y+41	; 0x29
    36be:	9a a5       	ldd	r25, Y+42	; 0x2a
    36c0:	20 e0       	ldi	r18, 0x00	; 0
    36c2:	30 e0       	ldi	r19, 0x00	; 0
    36c4:	4a e7       	ldi	r20, 0x7A	; 122
    36c6:	55 e4       	ldi	r21, 0x45	; 69
    36c8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    36cc:	dc 01       	movw	r26, r24
    36ce:	cb 01       	movw	r24, r22
    36d0:	8b a3       	std	Y+35, r24	; 0x23
    36d2:	9c a3       	std	Y+36, r25	; 0x24
    36d4:	ad a3       	std	Y+37, r26	; 0x25
    36d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    36d8:	6b a1       	ldd	r22, Y+35	; 0x23
    36da:	7c a1       	ldd	r23, Y+36	; 0x24
    36dc:	8d a1       	ldd	r24, Y+37	; 0x25
    36de:	9e a1       	ldd	r25, Y+38	; 0x26
    36e0:	20 e0       	ldi	r18, 0x00	; 0
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	40 e8       	ldi	r20, 0x80	; 128
    36e6:	5f e3       	ldi	r21, 0x3F	; 63
    36e8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    36ec:	88 23       	and	r24, r24
    36ee:	2c f4       	brge	.+10     	; 0x36fa <LCD_sendCommand+0x5f8>
		__ticks = 1;
    36f0:	81 e0       	ldi	r24, 0x01	; 1
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	9a a3       	std	Y+34, r25	; 0x22
    36f6:	89 a3       	std	Y+33, r24	; 0x21
    36f8:	3f c0       	rjmp	.+126    	; 0x3778 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    36fa:	6b a1       	ldd	r22, Y+35	; 0x23
    36fc:	7c a1       	ldd	r23, Y+36	; 0x24
    36fe:	8d a1       	ldd	r24, Y+37	; 0x25
    3700:	9e a1       	ldd	r25, Y+38	; 0x26
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	3f ef       	ldi	r19, 0xFF	; 255
    3706:	4f e7       	ldi	r20, 0x7F	; 127
    3708:	57 e4       	ldi	r21, 0x47	; 71
    370a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    370e:	18 16       	cp	r1, r24
    3710:	4c f5       	brge	.+82     	; 0x3764 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3712:	6f a1       	ldd	r22, Y+39	; 0x27
    3714:	78 a5       	ldd	r23, Y+40	; 0x28
    3716:	89 a5       	ldd	r24, Y+41	; 0x29
    3718:	9a a5       	ldd	r25, Y+42	; 0x2a
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	40 e2       	ldi	r20, 0x20	; 32
    3720:	51 e4       	ldi	r21, 0x41	; 65
    3722:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3726:	dc 01       	movw	r26, r24
    3728:	cb 01       	movw	r24, r22
    372a:	bc 01       	movw	r22, r24
    372c:	cd 01       	movw	r24, r26
    372e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3732:	dc 01       	movw	r26, r24
    3734:	cb 01       	movw	r24, r22
    3736:	9a a3       	std	Y+34, r25	; 0x22
    3738:	89 a3       	std	Y+33, r24	; 0x21
    373a:	0f c0       	rjmp	.+30     	; 0x375a <LCD_sendCommand+0x658>
    373c:	80 e9       	ldi	r24, 0x90	; 144
    373e:	91 e0       	ldi	r25, 0x01	; 1
    3740:	98 a3       	std	Y+32, r25	; 0x20
    3742:	8f 8f       	std	Y+31, r24	; 0x1f
    3744:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3746:	98 a1       	ldd	r25, Y+32	; 0x20
    3748:	01 97       	sbiw	r24, 0x01	; 1
    374a:	f1 f7       	brne	.-4      	; 0x3748 <LCD_sendCommand+0x646>
    374c:	98 a3       	std	Y+32, r25	; 0x20
    374e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3750:	89 a1       	ldd	r24, Y+33	; 0x21
    3752:	9a a1       	ldd	r25, Y+34	; 0x22
    3754:	01 97       	sbiw	r24, 0x01	; 1
    3756:	9a a3       	std	Y+34, r25	; 0x22
    3758:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    375a:	89 a1       	ldd	r24, Y+33	; 0x21
    375c:	9a a1       	ldd	r25, Y+34	; 0x22
    375e:	00 97       	sbiw	r24, 0x00	; 0
    3760:	69 f7       	brne	.-38     	; 0x373c <LCD_sendCommand+0x63a>
    3762:	14 c0       	rjmp	.+40     	; 0x378c <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3764:	6b a1       	ldd	r22, Y+35	; 0x23
    3766:	7c a1       	ldd	r23, Y+36	; 0x24
    3768:	8d a1       	ldd	r24, Y+37	; 0x25
    376a:	9e a1       	ldd	r25, Y+38	; 0x26
    376c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3770:	dc 01       	movw	r26, r24
    3772:	cb 01       	movw	r24, r22
    3774:	9a a3       	std	Y+34, r25	; 0x22
    3776:	89 a3       	std	Y+33, r24	; 0x21
    3778:	89 a1       	ldd	r24, Y+33	; 0x21
    377a:	9a a1       	ldd	r25, Y+34	; 0x22
    377c:	9e 8f       	std	Y+30, r25	; 0x1e
    377e:	8d 8f       	std	Y+29, r24	; 0x1d
    3780:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3782:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3784:	01 97       	sbiw	r24, 0x01	; 1
    3786:	f1 f7       	brne	.-4      	; 0x3784 <LCD_sendCommand+0x682>
    3788:	9e 8f       	std	Y+30, r25	; 0x1e
    378a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    378c:	fe 01       	movw	r30, r28
    378e:	ed 59       	subi	r30, 0x9D	; 157
    3790:	ff 4f       	sbci	r31, 0xFF	; 255
    3792:	80 81       	ld	r24, Z
    3794:	98 2f       	mov	r25, r24
    3796:	91 70       	andi	r25, 0x01	; 1
    3798:	82 e0       	ldi	r24, 0x02	; 2
    379a:	63 e0       	ldi	r22, 0x03	; 3
    379c:	49 2f       	mov	r20, r25
    379e:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    37a2:	fe 01       	movw	r30, r28
    37a4:	ed 59       	subi	r30, 0x9D	; 157
    37a6:	ff 4f       	sbci	r31, 0xFF	; 255
    37a8:	80 81       	ld	r24, Z
    37aa:	88 2f       	mov	r24, r24
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	82 70       	andi	r24, 0x02	; 2
    37b0:	90 70       	andi	r25, 0x00	; 0
    37b2:	95 95       	asr	r25
    37b4:	87 95       	ror	r24
    37b6:	98 2f       	mov	r25, r24
    37b8:	82 e0       	ldi	r24, 0x02	; 2
    37ba:	64 e0       	ldi	r22, 0x04	; 4
    37bc:	49 2f       	mov	r20, r25
    37be:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    37c2:	fe 01       	movw	r30, r28
    37c4:	ed 59       	subi	r30, 0x9D	; 157
    37c6:	ff 4f       	sbci	r31, 0xFF	; 255
    37c8:	80 81       	ld	r24, Z
    37ca:	88 2f       	mov	r24, r24
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	84 70       	andi	r24, 0x04	; 4
    37d0:	90 70       	andi	r25, 0x00	; 0
    37d2:	95 95       	asr	r25
    37d4:	87 95       	ror	r24
    37d6:	95 95       	asr	r25
    37d8:	87 95       	ror	r24
    37da:	98 2f       	mov	r25, r24
    37dc:	82 e0       	ldi	r24, 0x02	; 2
    37de:	65 e0       	ldi	r22, 0x05	; 5
    37e0:	49 2f       	mov	r20, r25
    37e2:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    37e6:	fe 01       	movw	r30, r28
    37e8:	ed 59       	subi	r30, 0x9D	; 157
    37ea:	ff 4f       	sbci	r31, 0xFF	; 255
    37ec:	80 81       	ld	r24, Z
    37ee:	88 2f       	mov	r24, r24
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	88 70       	andi	r24, 0x08	; 8
    37f4:	90 70       	andi	r25, 0x00	; 0
    37f6:	95 95       	asr	r25
    37f8:	87 95       	ror	r24
    37fa:	95 95       	asr	r25
    37fc:	87 95       	ror	r24
    37fe:	95 95       	asr	r25
    3800:	87 95       	ror	r24
    3802:	98 2f       	mov	r25, r24
    3804:	82 e0       	ldi	r24, 0x02	; 2
    3806:	66 e0       	ldi	r22, 0x06	; 6
    3808:	49 2f       	mov	r20, r25
    380a:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    380e:	80 e0       	ldi	r24, 0x00	; 0
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	a0 e8       	ldi	r26, 0x80	; 128
    3814:	bf e3       	ldi	r27, 0x3F	; 63
    3816:	89 8f       	std	Y+25, r24	; 0x19
    3818:	9a 8f       	std	Y+26, r25	; 0x1a
    381a:	ab 8f       	std	Y+27, r26	; 0x1b
    381c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    381e:	69 8d       	ldd	r22, Y+25	; 0x19
    3820:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3822:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3824:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	4a e7       	ldi	r20, 0x7A	; 122
    382c:	55 e4       	ldi	r21, 0x45	; 69
    382e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3832:	dc 01       	movw	r26, r24
    3834:	cb 01       	movw	r24, r22
    3836:	8d 8b       	std	Y+21, r24	; 0x15
    3838:	9e 8b       	std	Y+22, r25	; 0x16
    383a:	af 8b       	std	Y+23, r26	; 0x17
    383c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    383e:	6d 89       	ldd	r22, Y+21	; 0x15
    3840:	7e 89       	ldd	r23, Y+22	; 0x16
    3842:	8f 89       	ldd	r24, Y+23	; 0x17
    3844:	98 8d       	ldd	r25, Y+24	; 0x18
    3846:	20 e0       	ldi	r18, 0x00	; 0
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	40 e8       	ldi	r20, 0x80	; 128
    384c:	5f e3       	ldi	r21, 0x3F	; 63
    384e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3852:	88 23       	and	r24, r24
    3854:	2c f4       	brge	.+10     	; 0x3860 <LCD_sendCommand+0x75e>
		__ticks = 1;
    3856:	81 e0       	ldi	r24, 0x01	; 1
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	9c 8b       	std	Y+20, r25	; 0x14
    385c:	8b 8b       	std	Y+19, r24	; 0x13
    385e:	3f c0       	rjmp	.+126    	; 0x38de <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    3860:	6d 89       	ldd	r22, Y+21	; 0x15
    3862:	7e 89       	ldd	r23, Y+22	; 0x16
    3864:	8f 89       	ldd	r24, Y+23	; 0x17
    3866:	98 8d       	ldd	r25, Y+24	; 0x18
    3868:	20 e0       	ldi	r18, 0x00	; 0
    386a:	3f ef       	ldi	r19, 0xFF	; 255
    386c:	4f e7       	ldi	r20, 0x7F	; 127
    386e:	57 e4       	ldi	r21, 0x47	; 71
    3870:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3874:	18 16       	cp	r1, r24
    3876:	4c f5       	brge	.+82     	; 0x38ca <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3878:	69 8d       	ldd	r22, Y+25	; 0x19
    387a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    387c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    387e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3880:	20 e0       	ldi	r18, 0x00	; 0
    3882:	30 e0       	ldi	r19, 0x00	; 0
    3884:	40 e2       	ldi	r20, 0x20	; 32
    3886:	51 e4       	ldi	r21, 0x41	; 65
    3888:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    388c:	dc 01       	movw	r26, r24
    388e:	cb 01       	movw	r24, r22
    3890:	bc 01       	movw	r22, r24
    3892:	cd 01       	movw	r24, r26
    3894:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3898:	dc 01       	movw	r26, r24
    389a:	cb 01       	movw	r24, r22
    389c:	9c 8b       	std	Y+20, r25	; 0x14
    389e:	8b 8b       	std	Y+19, r24	; 0x13
    38a0:	0f c0       	rjmp	.+30     	; 0x38c0 <LCD_sendCommand+0x7be>
    38a2:	80 e9       	ldi	r24, 0x90	; 144
    38a4:	91 e0       	ldi	r25, 0x01	; 1
    38a6:	9a 8b       	std	Y+18, r25	; 0x12
    38a8:	89 8b       	std	Y+17, r24	; 0x11
    38aa:	89 89       	ldd	r24, Y+17	; 0x11
    38ac:	9a 89       	ldd	r25, Y+18	; 0x12
    38ae:	01 97       	sbiw	r24, 0x01	; 1
    38b0:	f1 f7       	brne	.-4      	; 0x38ae <LCD_sendCommand+0x7ac>
    38b2:	9a 8b       	std	Y+18, r25	; 0x12
    38b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38b6:	8b 89       	ldd	r24, Y+19	; 0x13
    38b8:	9c 89       	ldd	r25, Y+20	; 0x14
    38ba:	01 97       	sbiw	r24, 0x01	; 1
    38bc:	9c 8b       	std	Y+20, r25	; 0x14
    38be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38c0:	8b 89       	ldd	r24, Y+19	; 0x13
    38c2:	9c 89       	ldd	r25, Y+20	; 0x14
    38c4:	00 97       	sbiw	r24, 0x00	; 0
    38c6:	69 f7       	brne	.-38     	; 0x38a2 <LCD_sendCommand+0x7a0>
    38c8:	14 c0       	rjmp	.+40     	; 0x38f2 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38ca:	6d 89       	ldd	r22, Y+21	; 0x15
    38cc:	7e 89       	ldd	r23, Y+22	; 0x16
    38ce:	8f 89       	ldd	r24, Y+23	; 0x17
    38d0:	98 8d       	ldd	r25, Y+24	; 0x18
    38d2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    38d6:	dc 01       	movw	r26, r24
    38d8:	cb 01       	movw	r24, r22
    38da:	9c 8b       	std	Y+20, r25	; 0x14
    38dc:	8b 8b       	std	Y+19, r24	; 0x13
    38de:	8b 89       	ldd	r24, Y+19	; 0x13
    38e0:	9c 89       	ldd	r25, Y+20	; 0x14
    38e2:	98 8b       	std	Y+16, r25	; 0x10
    38e4:	8f 87       	std	Y+15, r24	; 0x0f
    38e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    38e8:	98 89       	ldd	r25, Y+16	; 0x10
    38ea:	01 97       	sbiw	r24, 0x01	; 1
    38ec:	f1 f7       	brne	.-4      	; 0x38ea <LCD_sendCommand+0x7e8>
    38ee:	98 8b       	std	Y+16, r25	; 0x10
    38f0:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    38f2:	82 e0       	ldi	r24, 0x02	; 2
    38f4:	62 e0       	ldi	r22, 0x02	; 2
    38f6:	40 e0       	ldi	r20, 0x00	; 0
    38f8:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    38fc:	80 e0       	ldi	r24, 0x00	; 0
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	a0 e8       	ldi	r26, 0x80	; 128
    3902:	bf e3       	ldi	r27, 0x3F	; 63
    3904:	8b 87       	std	Y+11, r24	; 0x0b
    3906:	9c 87       	std	Y+12, r25	; 0x0c
    3908:	ad 87       	std	Y+13, r26	; 0x0d
    390a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    390c:	6b 85       	ldd	r22, Y+11	; 0x0b
    390e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3910:	8d 85       	ldd	r24, Y+13	; 0x0d
    3912:	9e 85       	ldd	r25, Y+14	; 0x0e
    3914:	20 e0       	ldi	r18, 0x00	; 0
    3916:	30 e0       	ldi	r19, 0x00	; 0
    3918:	4a e7       	ldi	r20, 0x7A	; 122
    391a:	55 e4       	ldi	r21, 0x45	; 69
    391c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3920:	dc 01       	movw	r26, r24
    3922:	cb 01       	movw	r24, r22
    3924:	8f 83       	std	Y+7, r24	; 0x07
    3926:	98 87       	std	Y+8, r25	; 0x08
    3928:	a9 87       	std	Y+9, r26	; 0x09
    392a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    392c:	6f 81       	ldd	r22, Y+7	; 0x07
    392e:	78 85       	ldd	r23, Y+8	; 0x08
    3930:	89 85       	ldd	r24, Y+9	; 0x09
    3932:	9a 85       	ldd	r25, Y+10	; 0x0a
    3934:	20 e0       	ldi	r18, 0x00	; 0
    3936:	30 e0       	ldi	r19, 0x00	; 0
    3938:	40 e8       	ldi	r20, 0x80	; 128
    393a:	5f e3       	ldi	r21, 0x3F	; 63
    393c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3940:	88 23       	and	r24, r24
    3942:	2c f4       	brge	.+10     	; 0x394e <LCD_sendCommand+0x84c>
		__ticks = 1;
    3944:	81 e0       	ldi	r24, 0x01	; 1
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	9e 83       	std	Y+6, r25	; 0x06
    394a:	8d 83       	std	Y+5, r24	; 0x05
    394c:	3f c0       	rjmp	.+126    	; 0x39cc <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    394e:	6f 81       	ldd	r22, Y+7	; 0x07
    3950:	78 85       	ldd	r23, Y+8	; 0x08
    3952:	89 85       	ldd	r24, Y+9	; 0x09
    3954:	9a 85       	ldd	r25, Y+10	; 0x0a
    3956:	20 e0       	ldi	r18, 0x00	; 0
    3958:	3f ef       	ldi	r19, 0xFF	; 255
    395a:	4f e7       	ldi	r20, 0x7F	; 127
    395c:	57 e4       	ldi	r21, 0x47	; 71
    395e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3962:	18 16       	cp	r1, r24
    3964:	4c f5       	brge	.+82     	; 0x39b8 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3966:	6b 85       	ldd	r22, Y+11	; 0x0b
    3968:	7c 85       	ldd	r23, Y+12	; 0x0c
    396a:	8d 85       	ldd	r24, Y+13	; 0x0d
    396c:	9e 85       	ldd	r25, Y+14	; 0x0e
    396e:	20 e0       	ldi	r18, 0x00	; 0
    3970:	30 e0       	ldi	r19, 0x00	; 0
    3972:	40 e2       	ldi	r20, 0x20	; 32
    3974:	51 e4       	ldi	r21, 0x41	; 65
    3976:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    397a:	dc 01       	movw	r26, r24
    397c:	cb 01       	movw	r24, r22
    397e:	bc 01       	movw	r22, r24
    3980:	cd 01       	movw	r24, r26
    3982:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3986:	dc 01       	movw	r26, r24
    3988:	cb 01       	movw	r24, r22
    398a:	9e 83       	std	Y+6, r25	; 0x06
    398c:	8d 83       	std	Y+5, r24	; 0x05
    398e:	0f c0       	rjmp	.+30     	; 0x39ae <LCD_sendCommand+0x8ac>
    3990:	80 e9       	ldi	r24, 0x90	; 144
    3992:	91 e0       	ldi	r25, 0x01	; 1
    3994:	9c 83       	std	Y+4, r25	; 0x04
    3996:	8b 83       	std	Y+3, r24	; 0x03
    3998:	8b 81       	ldd	r24, Y+3	; 0x03
    399a:	9c 81       	ldd	r25, Y+4	; 0x04
    399c:	01 97       	sbiw	r24, 0x01	; 1
    399e:	f1 f7       	brne	.-4      	; 0x399c <LCD_sendCommand+0x89a>
    39a0:	9c 83       	std	Y+4, r25	; 0x04
    39a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39a4:	8d 81       	ldd	r24, Y+5	; 0x05
    39a6:	9e 81       	ldd	r25, Y+6	; 0x06
    39a8:	01 97       	sbiw	r24, 0x01	; 1
    39aa:	9e 83       	std	Y+6, r25	; 0x06
    39ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ae:	8d 81       	ldd	r24, Y+5	; 0x05
    39b0:	9e 81       	ldd	r25, Y+6	; 0x06
    39b2:	00 97       	sbiw	r24, 0x00	; 0
    39b4:	69 f7       	brne	.-38     	; 0x3990 <LCD_sendCommand+0x88e>
    39b6:	14 c0       	rjmp	.+40     	; 0x39e0 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39b8:	6f 81       	ldd	r22, Y+7	; 0x07
    39ba:	78 85       	ldd	r23, Y+8	; 0x08
    39bc:	89 85       	ldd	r24, Y+9	; 0x09
    39be:	9a 85       	ldd	r25, Y+10	; 0x0a
    39c0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	9e 83       	std	Y+6, r25	; 0x06
    39ca:	8d 83       	std	Y+5, r24	; 0x05
    39cc:	8d 81       	ldd	r24, Y+5	; 0x05
    39ce:	9e 81       	ldd	r25, Y+6	; 0x06
    39d0:	9a 83       	std	Y+2, r25	; 0x02
    39d2:	89 83       	std	Y+1, r24	; 0x01
    39d4:	89 81       	ldd	r24, Y+1	; 0x01
    39d6:	9a 81       	ldd	r25, Y+2	; 0x02
    39d8:	01 97       	sbiw	r24, 0x01	; 1
    39da:	f1 f7       	brne	.-4      	; 0x39d8 <LCD_sendCommand+0x8d6>
    39dc:	9a 83       	std	Y+2, r25	; 0x02
    39de:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    39e0:	cd 59       	subi	r28, 0x9D	; 157
    39e2:	df 4f       	sbci	r29, 0xFF	; 255
    39e4:	0f b6       	in	r0, 0x3f	; 63
    39e6:	f8 94       	cli
    39e8:	de bf       	out	0x3e, r29	; 62
    39ea:	0f be       	out	0x3f, r0	; 63
    39ec:	cd bf       	out	0x3d, r28	; 61
    39ee:	cf 91       	pop	r28
    39f0:	df 91       	pop	r29
    39f2:	1f 91       	pop	r17
    39f4:	0f 91       	pop	r16
    39f6:	08 95       	ret

000039f8 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    39f8:	0f 93       	push	r16
    39fa:	1f 93       	push	r17
    39fc:	df 93       	push	r29
    39fe:	cf 93       	push	r28
    3a00:	cd b7       	in	r28, 0x3d	; 61
    3a02:	de b7       	in	r29, 0x3e	; 62
    3a04:	c3 56       	subi	r28, 0x63	; 99
    3a06:	d0 40       	sbci	r29, 0x00	; 0
    3a08:	0f b6       	in	r0, 0x3f	; 63
    3a0a:	f8 94       	cli
    3a0c:	de bf       	out	0x3e, r29	; 62
    3a0e:	0f be       	out	0x3f, r0	; 63
    3a10:	cd bf       	out	0x3d, r28	; 61
    3a12:	fe 01       	movw	r30, r28
    3a14:	ed 59       	subi	r30, 0x9D	; 157
    3a16:	ff 4f       	sbci	r31, 0xFF	; 255
    3a18:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    3a1a:	82 e0       	ldi	r24, 0x02	; 2
    3a1c:	60 e0       	ldi	r22, 0x00	; 0
    3a1e:	41 e0       	ldi	r20, 0x01	; 1
    3a20:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    3a24:	fe 01       	movw	r30, r28
    3a26:	e1 5a       	subi	r30, 0xA1	; 161
    3a28:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2a:	80 e0       	ldi	r24, 0x00	; 0
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	a0 e8       	ldi	r26, 0x80	; 128
    3a30:	bf e3       	ldi	r27, 0x3F	; 63
    3a32:	80 83       	st	Z, r24
    3a34:	91 83       	std	Z+1, r25	; 0x01
    3a36:	a2 83       	std	Z+2, r26	; 0x02
    3a38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a3a:	8e 01       	movw	r16, r28
    3a3c:	05 5a       	subi	r16, 0xA5	; 165
    3a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a40:	fe 01       	movw	r30, r28
    3a42:	e1 5a       	subi	r30, 0xA1	; 161
    3a44:	ff 4f       	sbci	r31, 0xFF	; 255
    3a46:	60 81       	ld	r22, Z
    3a48:	71 81       	ldd	r23, Z+1	; 0x01
    3a4a:	82 81       	ldd	r24, Z+2	; 0x02
    3a4c:	93 81       	ldd	r25, Z+3	; 0x03
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	4a e7       	ldi	r20, 0x7A	; 122
    3a54:	55 e4       	ldi	r21, 0x45	; 69
    3a56:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3a5a:	dc 01       	movw	r26, r24
    3a5c:	cb 01       	movw	r24, r22
    3a5e:	f8 01       	movw	r30, r16
    3a60:	80 83       	st	Z, r24
    3a62:	91 83       	std	Z+1, r25	; 0x01
    3a64:	a2 83       	std	Z+2, r26	; 0x02
    3a66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a68:	fe 01       	movw	r30, r28
    3a6a:	e5 5a       	subi	r30, 0xA5	; 165
    3a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6e:	60 81       	ld	r22, Z
    3a70:	71 81       	ldd	r23, Z+1	; 0x01
    3a72:	82 81       	ldd	r24, Z+2	; 0x02
    3a74:	93 81       	ldd	r25, Z+3	; 0x03
    3a76:	20 e0       	ldi	r18, 0x00	; 0
    3a78:	30 e0       	ldi	r19, 0x00	; 0
    3a7a:	40 e8       	ldi	r20, 0x80	; 128
    3a7c:	5f e3       	ldi	r21, 0x3F	; 63
    3a7e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3a82:	88 23       	and	r24, r24
    3a84:	44 f4       	brge	.+16     	; 0x3a96 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    3a86:	fe 01       	movw	r30, r28
    3a88:	e7 5a       	subi	r30, 0xA7	; 167
    3a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8c:	81 e0       	ldi	r24, 0x01	; 1
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	91 83       	std	Z+1, r25	; 0x01
    3a92:	80 83       	st	Z, r24
    3a94:	64 c0       	rjmp	.+200    	; 0x3b5e <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    3a96:	fe 01       	movw	r30, r28
    3a98:	e5 5a       	subi	r30, 0xA5	; 165
    3a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9c:	60 81       	ld	r22, Z
    3a9e:	71 81       	ldd	r23, Z+1	; 0x01
    3aa0:	82 81       	ldd	r24, Z+2	; 0x02
    3aa2:	93 81       	ldd	r25, Z+3	; 0x03
    3aa4:	20 e0       	ldi	r18, 0x00	; 0
    3aa6:	3f ef       	ldi	r19, 0xFF	; 255
    3aa8:	4f e7       	ldi	r20, 0x7F	; 127
    3aaa:	57 e4       	ldi	r21, 0x47	; 71
    3aac:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3ab0:	18 16       	cp	r1, r24
    3ab2:	0c f0       	brlt	.+2      	; 0x3ab6 <LCD_displayCharacter+0xbe>
    3ab4:	43 c0       	rjmp	.+134    	; 0x3b3c <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ab6:	fe 01       	movw	r30, r28
    3ab8:	e1 5a       	subi	r30, 0xA1	; 161
    3aba:	ff 4f       	sbci	r31, 0xFF	; 255
    3abc:	60 81       	ld	r22, Z
    3abe:	71 81       	ldd	r23, Z+1	; 0x01
    3ac0:	82 81       	ldd	r24, Z+2	; 0x02
    3ac2:	93 81       	ldd	r25, Z+3	; 0x03
    3ac4:	20 e0       	ldi	r18, 0x00	; 0
    3ac6:	30 e0       	ldi	r19, 0x00	; 0
    3ac8:	40 e2       	ldi	r20, 0x20	; 32
    3aca:	51 e4       	ldi	r21, 0x41	; 65
    3acc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3ad0:	dc 01       	movw	r26, r24
    3ad2:	cb 01       	movw	r24, r22
    3ad4:	8e 01       	movw	r16, r28
    3ad6:	07 5a       	subi	r16, 0xA7	; 167
    3ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    3ada:	bc 01       	movw	r22, r24
    3adc:	cd 01       	movw	r24, r26
    3ade:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	cb 01       	movw	r24, r22
    3ae6:	f8 01       	movw	r30, r16
    3ae8:	91 83       	std	Z+1, r25	; 0x01
    3aea:	80 83       	st	Z, r24
    3aec:	1f c0       	rjmp	.+62     	; 0x3b2c <LCD_displayCharacter+0x134>
    3aee:	fe 01       	movw	r30, r28
    3af0:	e9 5a       	subi	r30, 0xA9	; 169
    3af2:	ff 4f       	sbci	r31, 0xFF	; 255
    3af4:	80 e9       	ldi	r24, 0x90	; 144
    3af6:	91 e0       	ldi	r25, 0x01	; 1
    3af8:	91 83       	std	Z+1, r25	; 0x01
    3afa:	80 83       	st	Z, r24
    3afc:	fe 01       	movw	r30, r28
    3afe:	e9 5a       	subi	r30, 0xA9	; 169
    3b00:	ff 4f       	sbci	r31, 0xFF	; 255
    3b02:	80 81       	ld	r24, Z
    3b04:	91 81       	ldd	r25, Z+1	; 0x01
    3b06:	01 97       	sbiw	r24, 0x01	; 1
    3b08:	f1 f7       	brne	.-4      	; 0x3b06 <LCD_displayCharacter+0x10e>
    3b0a:	fe 01       	movw	r30, r28
    3b0c:	e9 5a       	subi	r30, 0xA9	; 169
    3b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b10:	91 83       	std	Z+1, r25	; 0x01
    3b12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b14:	de 01       	movw	r26, r28
    3b16:	a7 5a       	subi	r26, 0xA7	; 167
    3b18:	bf 4f       	sbci	r27, 0xFF	; 255
    3b1a:	fe 01       	movw	r30, r28
    3b1c:	e7 5a       	subi	r30, 0xA7	; 167
    3b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b20:	80 81       	ld	r24, Z
    3b22:	91 81       	ldd	r25, Z+1	; 0x01
    3b24:	01 97       	sbiw	r24, 0x01	; 1
    3b26:	11 96       	adiw	r26, 0x01	; 1
    3b28:	9c 93       	st	X, r25
    3b2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b2c:	fe 01       	movw	r30, r28
    3b2e:	e7 5a       	subi	r30, 0xA7	; 167
    3b30:	ff 4f       	sbci	r31, 0xFF	; 255
    3b32:	80 81       	ld	r24, Z
    3b34:	91 81       	ldd	r25, Z+1	; 0x01
    3b36:	00 97       	sbiw	r24, 0x00	; 0
    3b38:	d1 f6       	brne	.-76     	; 0x3aee <LCD_displayCharacter+0xf6>
    3b3a:	27 c0       	rjmp	.+78     	; 0x3b8a <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b3c:	8e 01       	movw	r16, r28
    3b3e:	07 5a       	subi	r16, 0xA7	; 167
    3b40:	1f 4f       	sbci	r17, 0xFF	; 255
    3b42:	fe 01       	movw	r30, r28
    3b44:	e5 5a       	subi	r30, 0xA5	; 165
    3b46:	ff 4f       	sbci	r31, 0xFF	; 255
    3b48:	60 81       	ld	r22, Z
    3b4a:	71 81       	ldd	r23, Z+1	; 0x01
    3b4c:	82 81       	ldd	r24, Z+2	; 0x02
    3b4e:	93 81       	ldd	r25, Z+3	; 0x03
    3b50:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3b54:	dc 01       	movw	r26, r24
    3b56:	cb 01       	movw	r24, r22
    3b58:	f8 01       	movw	r30, r16
    3b5a:	91 83       	std	Z+1, r25	; 0x01
    3b5c:	80 83       	st	Z, r24
    3b5e:	de 01       	movw	r26, r28
    3b60:	ab 5a       	subi	r26, 0xAB	; 171
    3b62:	bf 4f       	sbci	r27, 0xFF	; 255
    3b64:	fe 01       	movw	r30, r28
    3b66:	e7 5a       	subi	r30, 0xA7	; 167
    3b68:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6a:	80 81       	ld	r24, Z
    3b6c:	91 81       	ldd	r25, Z+1	; 0x01
    3b6e:	8d 93       	st	X+, r24
    3b70:	9c 93       	st	X, r25
    3b72:	fe 01       	movw	r30, r28
    3b74:	eb 5a       	subi	r30, 0xAB	; 171
    3b76:	ff 4f       	sbci	r31, 0xFF	; 255
    3b78:	80 81       	ld	r24, Z
    3b7a:	91 81       	ldd	r25, Z+1	; 0x01
    3b7c:	01 97       	sbiw	r24, 0x01	; 1
    3b7e:	f1 f7       	brne	.-4      	; 0x3b7c <LCD_displayCharacter+0x184>
    3b80:	fe 01       	movw	r30, r28
    3b82:	eb 5a       	subi	r30, 0xAB	; 171
    3b84:	ff 4f       	sbci	r31, 0xFF	; 255
    3b86:	91 83       	std	Z+1, r25	; 0x01
    3b88:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3b8a:	82 e0       	ldi	r24, 0x02	; 2
    3b8c:	62 e0       	ldi	r22, 0x02	; 2
    3b8e:	41 e0       	ldi	r20, 0x01	; 1
    3b90:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    3b94:	fe 01       	movw	r30, r28
    3b96:	ef 5a       	subi	r30, 0xAF	; 175
    3b98:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9a:	80 e0       	ldi	r24, 0x00	; 0
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	a0 e8       	ldi	r26, 0x80	; 128
    3ba0:	bf e3       	ldi	r27, 0x3F	; 63
    3ba2:	80 83       	st	Z, r24
    3ba4:	91 83       	std	Z+1, r25	; 0x01
    3ba6:	a2 83       	std	Z+2, r26	; 0x02
    3ba8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3baa:	8e 01       	movw	r16, r28
    3bac:	03 5b       	subi	r16, 0xB3	; 179
    3bae:	1f 4f       	sbci	r17, 0xFF	; 255
    3bb0:	fe 01       	movw	r30, r28
    3bb2:	ef 5a       	subi	r30, 0xAF	; 175
    3bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb6:	60 81       	ld	r22, Z
    3bb8:	71 81       	ldd	r23, Z+1	; 0x01
    3bba:	82 81       	ldd	r24, Z+2	; 0x02
    3bbc:	93 81       	ldd	r25, Z+3	; 0x03
    3bbe:	20 e0       	ldi	r18, 0x00	; 0
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	4a e7       	ldi	r20, 0x7A	; 122
    3bc4:	55 e4       	ldi	r21, 0x45	; 69
    3bc6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3bca:	dc 01       	movw	r26, r24
    3bcc:	cb 01       	movw	r24, r22
    3bce:	f8 01       	movw	r30, r16
    3bd0:	80 83       	st	Z, r24
    3bd2:	91 83       	std	Z+1, r25	; 0x01
    3bd4:	a2 83       	std	Z+2, r26	; 0x02
    3bd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bd8:	fe 01       	movw	r30, r28
    3bda:	e3 5b       	subi	r30, 0xB3	; 179
    3bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bde:	60 81       	ld	r22, Z
    3be0:	71 81       	ldd	r23, Z+1	; 0x01
    3be2:	82 81       	ldd	r24, Z+2	; 0x02
    3be4:	93 81       	ldd	r25, Z+3	; 0x03
    3be6:	20 e0       	ldi	r18, 0x00	; 0
    3be8:	30 e0       	ldi	r19, 0x00	; 0
    3bea:	40 e8       	ldi	r20, 0x80	; 128
    3bec:	5f e3       	ldi	r21, 0x3F	; 63
    3bee:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3bf2:	88 23       	and	r24, r24
    3bf4:	44 f4       	brge	.+16     	; 0x3c06 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    3bf6:	fe 01       	movw	r30, r28
    3bf8:	e5 5b       	subi	r30, 0xB5	; 181
    3bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfc:	81 e0       	ldi	r24, 0x01	; 1
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	91 83       	std	Z+1, r25	; 0x01
    3c02:	80 83       	st	Z, r24
    3c04:	64 c0       	rjmp	.+200    	; 0x3cce <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    3c06:	fe 01       	movw	r30, r28
    3c08:	e3 5b       	subi	r30, 0xB3	; 179
    3c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0c:	60 81       	ld	r22, Z
    3c0e:	71 81       	ldd	r23, Z+1	; 0x01
    3c10:	82 81       	ldd	r24, Z+2	; 0x02
    3c12:	93 81       	ldd	r25, Z+3	; 0x03
    3c14:	20 e0       	ldi	r18, 0x00	; 0
    3c16:	3f ef       	ldi	r19, 0xFF	; 255
    3c18:	4f e7       	ldi	r20, 0x7F	; 127
    3c1a:	57 e4       	ldi	r21, 0x47	; 71
    3c1c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3c20:	18 16       	cp	r1, r24
    3c22:	0c f0       	brlt	.+2      	; 0x3c26 <LCD_displayCharacter+0x22e>
    3c24:	43 c0       	rjmp	.+134    	; 0x3cac <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c26:	fe 01       	movw	r30, r28
    3c28:	ef 5a       	subi	r30, 0xAF	; 175
    3c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2c:	60 81       	ld	r22, Z
    3c2e:	71 81       	ldd	r23, Z+1	; 0x01
    3c30:	82 81       	ldd	r24, Z+2	; 0x02
    3c32:	93 81       	ldd	r25, Z+3	; 0x03
    3c34:	20 e0       	ldi	r18, 0x00	; 0
    3c36:	30 e0       	ldi	r19, 0x00	; 0
    3c38:	40 e2       	ldi	r20, 0x20	; 32
    3c3a:	51 e4       	ldi	r21, 0x41	; 65
    3c3c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3c40:	dc 01       	movw	r26, r24
    3c42:	cb 01       	movw	r24, r22
    3c44:	8e 01       	movw	r16, r28
    3c46:	05 5b       	subi	r16, 0xB5	; 181
    3c48:	1f 4f       	sbci	r17, 0xFF	; 255
    3c4a:	bc 01       	movw	r22, r24
    3c4c:	cd 01       	movw	r24, r26
    3c4e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3c52:	dc 01       	movw	r26, r24
    3c54:	cb 01       	movw	r24, r22
    3c56:	f8 01       	movw	r30, r16
    3c58:	91 83       	std	Z+1, r25	; 0x01
    3c5a:	80 83       	st	Z, r24
    3c5c:	1f c0       	rjmp	.+62     	; 0x3c9c <LCD_displayCharacter+0x2a4>
    3c5e:	fe 01       	movw	r30, r28
    3c60:	e7 5b       	subi	r30, 0xB7	; 183
    3c62:	ff 4f       	sbci	r31, 0xFF	; 255
    3c64:	80 e9       	ldi	r24, 0x90	; 144
    3c66:	91 e0       	ldi	r25, 0x01	; 1
    3c68:	91 83       	std	Z+1, r25	; 0x01
    3c6a:	80 83       	st	Z, r24
    3c6c:	fe 01       	movw	r30, r28
    3c6e:	e7 5b       	subi	r30, 0xB7	; 183
    3c70:	ff 4f       	sbci	r31, 0xFF	; 255
    3c72:	80 81       	ld	r24, Z
    3c74:	91 81       	ldd	r25, Z+1	; 0x01
    3c76:	01 97       	sbiw	r24, 0x01	; 1
    3c78:	f1 f7       	brne	.-4      	; 0x3c76 <LCD_displayCharacter+0x27e>
    3c7a:	fe 01       	movw	r30, r28
    3c7c:	e7 5b       	subi	r30, 0xB7	; 183
    3c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c80:	91 83       	std	Z+1, r25	; 0x01
    3c82:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c84:	de 01       	movw	r26, r28
    3c86:	a5 5b       	subi	r26, 0xB5	; 181
    3c88:	bf 4f       	sbci	r27, 0xFF	; 255
    3c8a:	fe 01       	movw	r30, r28
    3c8c:	e5 5b       	subi	r30, 0xB5	; 181
    3c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c90:	80 81       	ld	r24, Z
    3c92:	91 81       	ldd	r25, Z+1	; 0x01
    3c94:	01 97       	sbiw	r24, 0x01	; 1
    3c96:	11 96       	adiw	r26, 0x01	; 1
    3c98:	9c 93       	st	X, r25
    3c9a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c9c:	fe 01       	movw	r30, r28
    3c9e:	e5 5b       	subi	r30, 0xB5	; 181
    3ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca2:	80 81       	ld	r24, Z
    3ca4:	91 81       	ldd	r25, Z+1	; 0x01
    3ca6:	00 97       	sbiw	r24, 0x00	; 0
    3ca8:	d1 f6       	brne	.-76     	; 0x3c5e <LCD_displayCharacter+0x266>
    3caa:	27 c0       	rjmp	.+78     	; 0x3cfa <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cac:	8e 01       	movw	r16, r28
    3cae:	05 5b       	subi	r16, 0xB5	; 181
    3cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb2:	fe 01       	movw	r30, r28
    3cb4:	e3 5b       	subi	r30, 0xB3	; 179
    3cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb8:	60 81       	ld	r22, Z
    3cba:	71 81       	ldd	r23, Z+1	; 0x01
    3cbc:	82 81       	ldd	r24, Z+2	; 0x02
    3cbe:	93 81       	ldd	r25, Z+3	; 0x03
    3cc0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3cc4:	dc 01       	movw	r26, r24
    3cc6:	cb 01       	movw	r24, r22
    3cc8:	f8 01       	movw	r30, r16
    3cca:	91 83       	std	Z+1, r25	; 0x01
    3ccc:	80 83       	st	Z, r24
    3cce:	de 01       	movw	r26, r28
    3cd0:	a9 5b       	subi	r26, 0xB9	; 185
    3cd2:	bf 4f       	sbci	r27, 0xFF	; 255
    3cd4:	fe 01       	movw	r30, r28
    3cd6:	e5 5b       	subi	r30, 0xB5	; 181
    3cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cda:	80 81       	ld	r24, Z
    3cdc:	91 81       	ldd	r25, Z+1	; 0x01
    3cde:	8d 93       	st	X+, r24
    3ce0:	9c 93       	st	X, r25
    3ce2:	fe 01       	movw	r30, r28
    3ce4:	e9 5b       	subi	r30, 0xB9	; 185
    3ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce8:	80 81       	ld	r24, Z
    3cea:	91 81       	ldd	r25, Z+1	; 0x01
    3cec:	01 97       	sbiw	r24, 0x01	; 1
    3cee:	f1 f7       	brne	.-4      	; 0x3cec <LCD_displayCharacter+0x2f4>
    3cf0:	fe 01       	movw	r30, r28
    3cf2:	e9 5b       	subi	r30, 0xB9	; 185
    3cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf6:	91 83       	std	Z+1, r25	; 0x01
    3cf8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    3cfa:	fe 01       	movw	r30, r28
    3cfc:	ed 59       	subi	r30, 0x9D	; 157
    3cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3d00:	80 81       	ld	r24, Z
    3d02:	88 2f       	mov	r24, r24
    3d04:	90 e0       	ldi	r25, 0x00	; 0
    3d06:	80 71       	andi	r24, 0x10	; 16
    3d08:	90 70       	andi	r25, 0x00	; 0
    3d0a:	95 95       	asr	r25
    3d0c:	87 95       	ror	r24
    3d0e:	95 95       	asr	r25
    3d10:	87 95       	ror	r24
    3d12:	95 95       	asr	r25
    3d14:	87 95       	ror	r24
    3d16:	95 95       	asr	r25
    3d18:	87 95       	ror	r24
    3d1a:	98 2f       	mov	r25, r24
    3d1c:	82 e0       	ldi	r24, 0x02	; 2
    3d1e:	63 e0       	ldi	r22, 0x03	; 3
    3d20:	49 2f       	mov	r20, r25
    3d22:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    3d26:	fe 01       	movw	r30, r28
    3d28:	ed 59       	subi	r30, 0x9D	; 157
    3d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2c:	80 81       	ld	r24, Z
    3d2e:	88 2f       	mov	r24, r24
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	80 72       	andi	r24, 0x20	; 32
    3d34:	90 70       	andi	r25, 0x00	; 0
    3d36:	95 95       	asr	r25
    3d38:	87 95       	ror	r24
    3d3a:	95 95       	asr	r25
    3d3c:	87 95       	ror	r24
    3d3e:	95 95       	asr	r25
    3d40:	87 95       	ror	r24
    3d42:	95 95       	asr	r25
    3d44:	87 95       	ror	r24
    3d46:	95 95       	asr	r25
    3d48:	87 95       	ror	r24
    3d4a:	98 2f       	mov	r25, r24
    3d4c:	82 e0       	ldi	r24, 0x02	; 2
    3d4e:	64 e0       	ldi	r22, 0x04	; 4
    3d50:	49 2f       	mov	r20, r25
    3d52:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    3d56:	fe 01       	movw	r30, r28
    3d58:	ed 59       	subi	r30, 0x9D	; 157
    3d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5c:	80 81       	ld	r24, Z
    3d5e:	88 2f       	mov	r24, r24
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	80 74       	andi	r24, 0x40	; 64
    3d64:	90 70       	andi	r25, 0x00	; 0
    3d66:	08 2e       	mov	r0, r24
    3d68:	89 2f       	mov	r24, r25
    3d6a:	00 0c       	add	r0, r0
    3d6c:	88 1f       	adc	r24, r24
    3d6e:	99 0b       	sbc	r25, r25
    3d70:	00 0c       	add	r0, r0
    3d72:	88 1f       	adc	r24, r24
    3d74:	99 1f       	adc	r25, r25
    3d76:	98 2f       	mov	r25, r24
    3d78:	82 e0       	ldi	r24, 0x02	; 2
    3d7a:	65 e0       	ldi	r22, 0x05	; 5
    3d7c:	49 2f       	mov	r20, r25
    3d7e:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    3d82:	fe 01       	movw	r30, r28
    3d84:	ed 59       	subi	r30, 0x9D	; 157
    3d86:	ff 4f       	sbci	r31, 0xFF	; 255
    3d88:	80 81       	ld	r24, Z
    3d8a:	98 2f       	mov	r25, r24
    3d8c:	99 1f       	adc	r25, r25
    3d8e:	99 27       	eor	r25, r25
    3d90:	99 1f       	adc	r25, r25
    3d92:	82 e0       	ldi	r24, 0x02	; 2
    3d94:	66 e0       	ldi	r22, 0x06	; 6
    3d96:	49 2f       	mov	r20, r25
    3d98:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    3d9c:	fe 01       	movw	r30, r28
    3d9e:	ed 5b       	subi	r30, 0xBD	; 189
    3da0:	ff 4f       	sbci	r31, 0xFF	; 255
    3da2:	80 e0       	ldi	r24, 0x00	; 0
    3da4:	90 e0       	ldi	r25, 0x00	; 0
    3da6:	a0 e8       	ldi	r26, 0x80	; 128
    3da8:	bf e3       	ldi	r27, 0x3F	; 63
    3daa:	80 83       	st	Z, r24
    3dac:	91 83       	std	Z+1, r25	; 0x01
    3dae:	a2 83       	std	Z+2, r26	; 0x02
    3db0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3db2:	8e 01       	movw	r16, r28
    3db4:	01 5c       	subi	r16, 0xC1	; 193
    3db6:	1f 4f       	sbci	r17, 0xFF	; 255
    3db8:	fe 01       	movw	r30, r28
    3dba:	ed 5b       	subi	r30, 0xBD	; 189
    3dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dbe:	60 81       	ld	r22, Z
    3dc0:	71 81       	ldd	r23, Z+1	; 0x01
    3dc2:	82 81       	ldd	r24, Z+2	; 0x02
    3dc4:	93 81       	ldd	r25, Z+3	; 0x03
    3dc6:	20 e0       	ldi	r18, 0x00	; 0
    3dc8:	30 e0       	ldi	r19, 0x00	; 0
    3dca:	4a e7       	ldi	r20, 0x7A	; 122
    3dcc:	55 e4       	ldi	r21, 0x45	; 69
    3dce:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3dd2:	dc 01       	movw	r26, r24
    3dd4:	cb 01       	movw	r24, r22
    3dd6:	f8 01       	movw	r30, r16
    3dd8:	80 83       	st	Z, r24
    3dda:	91 83       	std	Z+1, r25	; 0x01
    3ddc:	a2 83       	std	Z+2, r26	; 0x02
    3dde:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3de0:	fe 01       	movw	r30, r28
    3de2:	ff 96       	adiw	r30, 0x3f	; 63
    3de4:	60 81       	ld	r22, Z
    3de6:	71 81       	ldd	r23, Z+1	; 0x01
    3de8:	82 81       	ldd	r24, Z+2	; 0x02
    3dea:	93 81       	ldd	r25, Z+3	; 0x03
    3dec:	20 e0       	ldi	r18, 0x00	; 0
    3dee:	30 e0       	ldi	r19, 0x00	; 0
    3df0:	40 e8       	ldi	r20, 0x80	; 128
    3df2:	5f e3       	ldi	r21, 0x3F	; 63
    3df4:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3df8:	88 23       	and	r24, r24
    3dfa:	2c f4       	brge	.+10     	; 0x3e06 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    3dfc:	81 e0       	ldi	r24, 0x01	; 1
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	9e af       	std	Y+62, r25	; 0x3e
    3e02:	8d af       	std	Y+61, r24	; 0x3d
    3e04:	46 c0       	rjmp	.+140    	; 0x3e92 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    3e06:	fe 01       	movw	r30, r28
    3e08:	ff 96       	adiw	r30, 0x3f	; 63
    3e0a:	60 81       	ld	r22, Z
    3e0c:	71 81       	ldd	r23, Z+1	; 0x01
    3e0e:	82 81       	ldd	r24, Z+2	; 0x02
    3e10:	93 81       	ldd	r25, Z+3	; 0x03
    3e12:	20 e0       	ldi	r18, 0x00	; 0
    3e14:	3f ef       	ldi	r19, 0xFF	; 255
    3e16:	4f e7       	ldi	r20, 0x7F	; 127
    3e18:	57 e4       	ldi	r21, 0x47	; 71
    3e1a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3e1e:	18 16       	cp	r1, r24
    3e20:	64 f5       	brge	.+88     	; 0x3e7a <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e22:	fe 01       	movw	r30, r28
    3e24:	ed 5b       	subi	r30, 0xBD	; 189
    3e26:	ff 4f       	sbci	r31, 0xFF	; 255
    3e28:	60 81       	ld	r22, Z
    3e2a:	71 81       	ldd	r23, Z+1	; 0x01
    3e2c:	82 81       	ldd	r24, Z+2	; 0x02
    3e2e:	93 81       	ldd	r25, Z+3	; 0x03
    3e30:	20 e0       	ldi	r18, 0x00	; 0
    3e32:	30 e0       	ldi	r19, 0x00	; 0
    3e34:	40 e2       	ldi	r20, 0x20	; 32
    3e36:	51 e4       	ldi	r21, 0x41	; 65
    3e38:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3e3c:	dc 01       	movw	r26, r24
    3e3e:	cb 01       	movw	r24, r22
    3e40:	bc 01       	movw	r22, r24
    3e42:	cd 01       	movw	r24, r26
    3e44:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3e48:	dc 01       	movw	r26, r24
    3e4a:	cb 01       	movw	r24, r22
    3e4c:	9e af       	std	Y+62, r25	; 0x3e
    3e4e:	8d af       	std	Y+61, r24	; 0x3d
    3e50:	0f c0       	rjmp	.+30     	; 0x3e70 <LCD_displayCharacter+0x478>
    3e52:	80 e9       	ldi	r24, 0x90	; 144
    3e54:	91 e0       	ldi	r25, 0x01	; 1
    3e56:	9c af       	std	Y+60, r25	; 0x3c
    3e58:	8b af       	std	Y+59, r24	; 0x3b
    3e5a:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e5c:	9c ad       	ldd	r25, Y+60	; 0x3c
    3e5e:	01 97       	sbiw	r24, 0x01	; 1
    3e60:	f1 f7       	brne	.-4      	; 0x3e5e <LCD_displayCharacter+0x466>
    3e62:	9c af       	std	Y+60, r25	; 0x3c
    3e64:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e66:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e68:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e6a:	01 97       	sbiw	r24, 0x01	; 1
    3e6c:	9e af       	std	Y+62, r25	; 0x3e
    3e6e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e70:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e72:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e74:	00 97       	sbiw	r24, 0x00	; 0
    3e76:	69 f7       	brne	.-38     	; 0x3e52 <LCD_displayCharacter+0x45a>
    3e78:	16 c0       	rjmp	.+44     	; 0x3ea6 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e7a:	fe 01       	movw	r30, r28
    3e7c:	ff 96       	adiw	r30, 0x3f	; 63
    3e7e:	60 81       	ld	r22, Z
    3e80:	71 81       	ldd	r23, Z+1	; 0x01
    3e82:	82 81       	ldd	r24, Z+2	; 0x02
    3e84:	93 81       	ldd	r25, Z+3	; 0x03
    3e86:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3e8a:	dc 01       	movw	r26, r24
    3e8c:	cb 01       	movw	r24, r22
    3e8e:	9e af       	std	Y+62, r25	; 0x3e
    3e90:	8d af       	std	Y+61, r24	; 0x3d
    3e92:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e94:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e96:	9a af       	std	Y+58, r25	; 0x3a
    3e98:	89 af       	std	Y+57, r24	; 0x39
    3e9a:	89 ad       	ldd	r24, Y+57	; 0x39
    3e9c:	9a ad       	ldd	r25, Y+58	; 0x3a
    3e9e:	01 97       	sbiw	r24, 0x01	; 1
    3ea0:	f1 f7       	brne	.-4      	; 0x3e9e <LCD_displayCharacter+0x4a6>
    3ea2:	9a af       	std	Y+58, r25	; 0x3a
    3ea4:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3ea6:	82 e0       	ldi	r24, 0x02	; 2
    3ea8:	62 e0       	ldi	r22, 0x02	; 2
    3eaa:	40 e0       	ldi	r20, 0x00	; 0
    3eac:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    3eb0:	80 e0       	ldi	r24, 0x00	; 0
    3eb2:	90 e0       	ldi	r25, 0x00	; 0
    3eb4:	a0 e8       	ldi	r26, 0x80	; 128
    3eb6:	bf e3       	ldi	r27, 0x3F	; 63
    3eb8:	8d ab       	std	Y+53, r24	; 0x35
    3eba:	9e ab       	std	Y+54, r25	; 0x36
    3ebc:	af ab       	std	Y+55, r26	; 0x37
    3ebe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ec0:	6d a9       	ldd	r22, Y+53	; 0x35
    3ec2:	7e a9       	ldd	r23, Y+54	; 0x36
    3ec4:	8f a9       	ldd	r24, Y+55	; 0x37
    3ec6:	98 ad       	ldd	r25, Y+56	; 0x38
    3ec8:	20 e0       	ldi	r18, 0x00	; 0
    3eca:	30 e0       	ldi	r19, 0x00	; 0
    3ecc:	4a e7       	ldi	r20, 0x7A	; 122
    3ece:	55 e4       	ldi	r21, 0x45	; 69
    3ed0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3ed4:	dc 01       	movw	r26, r24
    3ed6:	cb 01       	movw	r24, r22
    3ed8:	89 ab       	std	Y+49, r24	; 0x31
    3eda:	9a ab       	std	Y+50, r25	; 0x32
    3edc:	ab ab       	std	Y+51, r26	; 0x33
    3ede:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3ee0:	69 a9       	ldd	r22, Y+49	; 0x31
    3ee2:	7a a9       	ldd	r23, Y+50	; 0x32
    3ee4:	8b a9       	ldd	r24, Y+51	; 0x33
    3ee6:	9c a9       	ldd	r25, Y+52	; 0x34
    3ee8:	20 e0       	ldi	r18, 0x00	; 0
    3eea:	30 e0       	ldi	r19, 0x00	; 0
    3eec:	40 e8       	ldi	r20, 0x80	; 128
    3eee:	5f e3       	ldi	r21, 0x3F	; 63
    3ef0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3ef4:	88 23       	and	r24, r24
    3ef6:	2c f4       	brge	.+10     	; 0x3f02 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    3ef8:	81 e0       	ldi	r24, 0x01	; 1
    3efa:	90 e0       	ldi	r25, 0x00	; 0
    3efc:	98 ab       	std	Y+48, r25	; 0x30
    3efe:	8f a7       	std	Y+47, r24	; 0x2f
    3f00:	3f c0       	rjmp	.+126    	; 0x3f80 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    3f02:	69 a9       	ldd	r22, Y+49	; 0x31
    3f04:	7a a9       	ldd	r23, Y+50	; 0x32
    3f06:	8b a9       	ldd	r24, Y+51	; 0x33
    3f08:	9c a9       	ldd	r25, Y+52	; 0x34
    3f0a:	20 e0       	ldi	r18, 0x00	; 0
    3f0c:	3f ef       	ldi	r19, 0xFF	; 255
    3f0e:	4f e7       	ldi	r20, 0x7F	; 127
    3f10:	57 e4       	ldi	r21, 0x47	; 71
    3f12:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3f16:	18 16       	cp	r1, r24
    3f18:	4c f5       	brge	.+82     	; 0x3f6c <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f1a:	6d a9       	ldd	r22, Y+53	; 0x35
    3f1c:	7e a9       	ldd	r23, Y+54	; 0x36
    3f1e:	8f a9       	ldd	r24, Y+55	; 0x37
    3f20:	98 ad       	ldd	r25, Y+56	; 0x38
    3f22:	20 e0       	ldi	r18, 0x00	; 0
    3f24:	30 e0       	ldi	r19, 0x00	; 0
    3f26:	40 e2       	ldi	r20, 0x20	; 32
    3f28:	51 e4       	ldi	r21, 0x41	; 65
    3f2a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3f2e:	dc 01       	movw	r26, r24
    3f30:	cb 01       	movw	r24, r22
    3f32:	bc 01       	movw	r22, r24
    3f34:	cd 01       	movw	r24, r26
    3f36:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3f3a:	dc 01       	movw	r26, r24
    3f3c:	cb 01       	movw	r24, r22
    3f3e:	98 ab       	std	Y+48, r25	; 0x30
    3f40:	8f a7       	std	Y+47, r24	; 0x2f
    3f42:	0f c0       	rjmp	.+30     	; 0x3f62 <LCD_displayCharacter+0x56a>
    3f44:	80 e9       	ldi	r24, 0x90	; 144
    3f46:	91 e0       	ldi	r25, 0x01	; 1
    3f48:	9e a7       	std	Y+46, r25	; 0x2e
    3f4a:	8d a7       	std	Y+45, r24	; 0x2d
    3f4c:	8d a5       	ldd	r24, Y+45	; 0x2d
    3f4e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3f50:	01 97       	sbiw	r24, 0x01	; 1
    3f52:	f1 f7       	brne	.-4      	; 0x3f50 <LCD_displayCharacter+0x558>
    3f54:	9e a7       	std	Y+46, r25	; 0x2e
    3f56:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f58:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f5a:	98 a9       	ldd	r25, Y+48	; 0x30
    3f5c:	01 97       	sbiw	r24, 0x01	; 1
    3f5e:	98 ab       	std	Y+48, r25	; 0x30
    3f60:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f62:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f64:	98 a9       	ldd	r25, Y+48	; 0x30
    3f66:	00 97       	sbiw	r24, 0x00	; 0
    3f68:	69 f7       	brne	.-38     	; 0x3f44 <LCD_displayCharacter+0x54c>
    3f6a:	14 c0       	rjmp	.+40     	; 0x3f94 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f6c:	69 a9       	ldd	r22, Y+49	; 0x31
    3f6e:	7a a9       	ldd	r23, Y+50	; 0x32
    3f70:	8b a9       	ldd	r24, Y+51	; 0x33
    3f72:	9c a9       	ldd	r25, Y+52	; 0x34
    3f74:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3f78:	dc 01       	movw	r26, r24
    3f7a:	cb 01       	movw	r24, r22
    3f7c:	98 ab       	std	Y+48, r25	; 0x30
    3f7e:	8f a7       	std	Y+47, r24	; 0x2f
    3f80:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f82:	98 a9       	ldd	r25, Y+48	; 0x30
    3f84:	9c a7       	std	Y+44, r25	; 0x2c
    3f86:	8b a7       	std	Y+43, r24	; 0x2b
    3f88:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f8a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f8c:	01 97       	sbiw	r24, 0x01	; 1
    3f8e:	f1 f7       	brne	.-4      	; 0x3f8c <LCD_displayCharacter+0x594>
    3f90:	9c a7       	std	Y+44, r25	; 0x2c
    3f92:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3f94:	82 e0       	ldi	r24, 0x02	; 2
    3f96:	62 e0       	ldi	r22, 0x02	; 2
    3f98:	41 e0       	ldi	r20, 0x01	; 1
    3f9a:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    3f9e:	80 e0       	ldi	r24, 0x00	; 0
    3fa0:	90 e0       	ldi	r25, 0x00	; 0
    3fa2:	a0 e8       	ldi	r26, 0x80	; 128
    3fa4:	bf e3       	ldi	r27, 0x3F	; 63
    3fa6:	8f a3       	std	Y+39, r24	; 0x27
    3fa8:	98 a7       	std	Y+40, r25	; 0x28
    3faa:	a9 a7       	std	Y+41, r26	; 0x29
    3fac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fae:	6f a1       	ldd	r22, Y+39	; 0x27
    3fb0:	78 a5       	ldd	r23, Y+40	; 0x28
    3fb2:	89 a5       	ldd	r24, Y+41	; 0x29
    3fb4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fb6:	20 e0       	ldi	r18, 0x00	; 0
    3fb8:	30 e0       	ldi	r19, 0x00	; 0
    3fba:	4a e7       	ldi	r20, 0x7A	; 122
    3fbc:	55 e4       	ldi	r21, 0x45	; 69
    3fbe:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3fc2:	dc 01       	movw	r26, r24
    3fc4:	cb 01       	movw	r24, r22
    3fc6:	8b a3       	std	Y+35, r24	; 0x23
    3fc8:	9c a3       	std	Y+36, r25	; 0x24
    3fca:	ad a3       	std	Y+37, r26	; 0x25
    3fcc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3fce:	6b a1       	ldd	r22, Y+35	; 0x23
    3fd0:	7c a1       	ldd	r23, Y+36	; 0x24
    3fd2:	8d a1       	ldd	r24, Y+37	; 0x25
    3fd4:	9e a1       	ldd	r25, Y+38	; 0x26
    3fd6:	20 e0       	ldi	r18, 0x00	; 0
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	40 e8       	ldi	r20, 0x80	; 128
    3fdc:	5f e3       	ldi	r21, 0x3F	; 63
    3fde:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3fe2:	88 23       	and	r24, r24
    3fe4:	2c f4       	brge	.+10     	; 0x3ff0 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    3fe6:	81 e0       	ldi	r24, 0x01	; 1
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	9a a3       	std	Y+34, r25	; 0x22
    3fec:	89 a3       	std	Y+33, r24	; 0x21
    3fee:	3f c0       	rjmp	.+126    	; 0x406e <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    3ff0:	6b a1       	ldd	r22, Y+35	; 0x23
    3ff2:	7c a1       	ldd	r23, Y+36	; 0x24
    3ff4:	8d a1       	ldd	r24, Y+37	; 0x25
    3ff6:	9e a1       	ldd	r25, Y+38	; 0x26
    3ff8:	20 e0       	ldi	r18, 0x00	; 0
    3ffa:	3f ef       	ldi	r19, 0xFF	; 255
    3ffc:	4f e7       	ldi	r20, 0x7F	; 127
    3ffe:	57 e4       	ldi	r21, 0x47	; 71
    4000:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4004:	18 16       	cp	r1, r24
    4006:	4c f5       	brge	.+82     	; 0x405a <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4008:	6f a1       	ldd	r22, Y+39	; 0x27
    400a:	78 a5       	ldd	r23, Y+40	; 0x28
    400c:	89 a5       	ldd	r24, Y+41	; 0x29
    400e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4010:	20 e0       	ldi	r18, 0x00	; 0
    4012:	30 e0       	ldi	r19, 0x00	; 0
    4014:	40 e2       	ldi	r20, 0x20	; 32
    4016:	51 e4       	ldi	r21, 0x41	; 65
    4018:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    401c:	dc 01       	movw	r26, r24
    401e:	cb 01       	movw	r24, r22
    4020:	bc 01       	movw	r22, r24
    4022:	cd 01       	movw	r24, r26
    4024:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4028:	dc 01       	movw	r26, r24
    402a:	cb 01       	movw	r24, r22
    402c:	9a a3       	std	Y+34, r25	; 0x22
    402e:	89 a3       	std	Y+33, r24	; 0x21
    4030:	0f c0       	rjmp	.+30     	; 0x4050 <LCD_displayCharacter+0x658>
    4032:	80 e9       	ldi	r24, 0x90	; 144
    4034:	91 e0       	ldi	r25, 0x01	; 1
    4036:	98 a3       	std	Y+32, r25	; 0x20
    4038:	8f 8f       	std	Y+31, r24	; 0x1f
    403a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    403c:	98 a1       	ldd	r25, Y+32	; 0x20
    403e:	01 97       	sbiw	r24, 0x01	; 1
    4040:	f1 f7       	brne	.-4      	; 0x403e <LCD_displayCharacter+0x646>
    4042:	98 a3       	std	Y+32, r25	; 0x20
    4044:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4046:	89 a1       	ldd	r24, Y+33	; 0x21
    4048:	9a a1       	ldd	r25, Y+34	; 0x22
    404a:	01 97       	sbiw	r24, 0x01	; 1
    404c:	9a a3       	std	Y+34, r25	; 0x22
    404e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4050:	89 a1       	ldd	r24, Y+33	; 0x21
    4052:	9a a1       	ldd	r25, Y+34	; 0x22
    4054:	00 97       	sbiw	r24, 0x00	; 0
    4056:	69 f7       	brne	.-38     	; 0x4032 <LCD_displayCharacter+0x63a>
    4058:	14 c0       	rjmp	.+40     	; 0x4082 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    405a:	6b a1       	ldd	r22, Y+35	; 0x23
    405c:	7c a1       	ldd	r23, Y+36	; 0x24
    405e:	8d a1       	ldd	r24, Y+37	; 0x25
    4060:	9e a1       	ldd	r25, Y+38	; 0x26
    4062:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4066:	dc 01       	movw	r26, r24
    4068:	cb 01       	movw	r24, r22
    406a:	9a a3       	std	Y+34, r25	; 0x22
    406c:	89 a3       	std	Y+33, r24	; 0x21
    406e:	89 a1       	ldd	r24, Y+33	; 0x21
    4070:	9a a1       	ldd	r25, Y+34	; 0x22
    4072:	9e 8f       	std	Y+30, r25	; 0x1e
    4074:	8d 8f       	std	Y+29, r24	; 0x1d
    4076:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4078:	9e 8d       	ldd	r25, Y+30	; 0x1e
    407a:	01 97       	sbiw	r24, 0x01	; 1
    407c:	f1 f7       	brne	.-4      	; 0x407a <LCD_displayCharacter+0x682>
    407e:	9e 8f       	std	Y+30, r25	; 0x1e
    4080:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    4082:	fe 01       	movw	r30, r28
    4084:	ed 59       	subi	r30, 0x9D	; 157
    4086:	ff 4f       	sbci	r31, 0xFF	; 255
    4088:	80 81       	ld	r24, Z
    408a:	98 2f       	mov	r25, r24
    408c:	91 70       	andi	r25, 0x01	; 1
    408e:	82 e0       	ldi	r24, 0x02	; 2
    4090:	63 e0       	ldi	r22, 0x03	; 3
    4092:	49 2f       	mov	r20, r25
    4094:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    4098:	fe 01       	movw	r30, r28
    409a:	ed 59       	subi	r30, 0x9D	; 157
    409c:	ff 4f       	sbci	r31, 0xFF	; 255
    409e:	80 81       	ld	r24, Z
    40a0:	88 2f       	mov	r24, r24
    40a2:	90 e0       	ldi	r25, 0x00	; 0
    40a4:	82 70       	andi	r24, 0x02	; 2
    40a6:	90 70       	andi	r25, 0x00	; 0
    40a8:	95 95       	asr	r25
    40aa:	87 95       	ror	r24
    40ac:	98 2f       	mov	r25, r24
    40ae:	82 e0       	ldi	r24, 0x02	; 2
    40b0:	64 e0       	ldi	r22, 0x04	; 4
    40b2:	49 2f       	mov	r20, r25
    40b4:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    40b8:	fe 01       	movw	r30, r28
    40ba:	ed 59       	subi	r30, 0x9D	; 157
    40bc:	ff 4f       	sbci	r31, 0xFF	; 255
    40be:	80 81       	ld	r24, Z
    40c0:	88 2f       	mov	r24, r24
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	84 70       	andi	r24, 0x04	; 4
    40c6:	90 70       	andi	r25, 0x00	; 0
    40c8:	95 95       	asr	r25
    40ca:	87 95       	ror	r24
    40cc:	95 95       	asr	r25
    40ce:	87 95       	ror	r24
    40d0:	98 2f       	mov	r25, r24
    40d2:	82 e0       	ldi	r24, 0x02	; 2
    40d4:	65 e0       	ldi	r22, 0x05	; 5
    40d6:	49 2f       	mov	r20, r25
    40d8:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    40dc:	fe 01       	movw	r30, r28
    40de:	ed 59       	subi	r30, 0x9D	; 157
    40e0:	ff 4f       	sbci	r31, 0xFF	; 255
    40e2:	80 81       	ld	r24, Z
    40e4:	88 2f       	mov	r24, r24
    40e6:	90 e0       	ldi	r25, 0x00	; 0
    40e8:	88 70       	andi	r24, 0x08	; 8
    40ea:	90 70       	andi	r25, 0x00	; 0
    40ec:	95 95       	asr	r25
    40ee:	87 95       	ror	r24
    40f0:	95 95       	asr	r25
    40f2:	87 95       	ror	r24
    40f4:	95 95       	asr	r25
    40f6:	87 95       	ror	r24
    40f8:	98 2f       	mov	r25, r24
    40fa:	82 e0       	ldi	r24, 0x02	; 2
    40fc:	66 e0       	ldi	r22, 0x06	; 6
    40fe:	49 2f       	mov	r20, r25
    4100:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    4104:	80 e0       	ldi	r24, 0x00	; 0
    4106:	90 e0       	ldi	r25, 0x00	; 0
    4108:	a0 e8       	ldi	r26, 0x80	; 128
    410a:	bf e3       	ldi	r27, 0x3F	; 63
    410c:	89 8f       	std	Y+25, r24	; 0x19
    410e:	9a 8f       	std	Y+26, r25	; 0x1a
    4110:	ab 8f       	std	Y+27, r26	; 0x1b
    4112:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4114:	69 8d       	ldd	r22, Y+25	; 0x19
    4116:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4118:	8b 8d       	ldd	r24, Y+27	; 0x1b
    411a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    411c:	20 e0       	ldi	r18, 0x00	; 0
    411e:	30 e0       	ldi	r19, 0x00	; 0
    4120:	4a e7       	ldi	r20, 0x7A	; 122
    4122:	55 e4       	ldi	r21, 0x45	; 69
    4124:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4128:	dc 01       	movw	r26, r24
    412a:	cb 01       	movw	r24, r22
    412c:	8d 8b       	std	Y+21, r24	; 0x15
    412e:	9e 8b       	std	Y+22, r25	; 0x16
    4130:	af 8b       	std	Y+23, r26	; 0x17
    4132:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4134:	6d 89       	ldd	r22, Y+21	; 0x15
    4136:	7e 89       	ldd	r23, Y+22	; 0x16
    4138:	8f 89       	ldd	r24, Y+23	; 0x17
    413a:	98 8d       	ldd	r25, Y+24	; 0x18
    413c:	20 e0       	ldi	r18, 0x00	; 0
    413e:	30 e0       	ldi	r19, 0x00	; 0
    4140:	40 e8       	ldi	r20, 0x80	; 128
    4142:	5f e3       	ldi	r21, 0x3F	; 63
    4144:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4148:	88 23       	and	r24, r24
    414a:	2c f4       	brge	.+10     	; 0x4156 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    414c:	81 e0       	ldi	r24, 0x01	; 1
    414e:	90 e0       	ldi	r25, 0x00	; 0
    4150:	9c 8b       	std	Y+20, r25	; 0x14
    4152:	8b 8b       	std	Y+19, r24	; 0x13
    4154:	3f c0       	rjmp	.+126    	; 0x41d4 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    4156:	6d 89       	ldd	r22, Y+21	; 0x15
    4158:	7e 89       	ldd	r23, Y+22	; 0x16
    415a:	8f 89       	ldd	r24, Y+23	; 0x17
    415c:	98 8d       	ldd	r25, Y+24	; 0x18
    415e:	20 e0       	ldi	r18, 0x00	; 0
    4160:	3f ef       	ldi	r19, 0xFF	; 255
    4162:	4f e7       	ldi	r20, 0x7F	; 127
    4164:	57 e4       	ldi	r21, 0x47	; 71
    4166:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    416a:	18 16       	cp	r1, r24
    416c:	4c f5       	brge	.+82     	; 0x41c0 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    416e:	69 8d       	ldd	r22, Y+25	; 0x19
    4170:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4172:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4174:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4176:	20 e0       	ldi	r18, 0x00	; 0
    4178:	30 e0       	ldi	r19, 0x00	; 0
    417a:	40 e2       	ldi	r20, 0x20	; 32
    417c:	51 e4       	ldi	r21, 0x41	; 65
    417e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4182:	dc 01       	movw	r26, r24
    4184:	cb 01       	movw	r24, r22
    4186:	bc 01       	movw	r22, r24
    4188:	cd 01       	movw	r24, r26
    418a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    418e:	dc 01       	movw	r26, r24
    4190:	cb 01       	movw	r24, r22
    4192:	9c 8b       	std	Y+20, r25	; 0x14
    4194:	8b 8b       	std	Y+19, r24	; 0x13
    4196:	0f c0       	rjmp	.+30     	; 0x41b6 <LCD_displayCharacter+0x7be>
    4198:	80 e9       	ldi	r24, 0x90	; 144
    419a:	91 e0       	ldi	r25, 0x01	; 1
    419c:	9a 8b       	std	Y+18, r25	; 0x12
    419e:	89 8b       	std	Y+17, r24	; 0x11
    41a0:	89 89       	ldd	r24, Y+17	; 0x11
    41a2:	9a 89       	ldd	r25, Y+18	; 0x12
    41a4:	01 97       	sbiw	r24, 0x01	; 1
    41a6:	f1 f7       	brne	.-4      	; 0x41a4 <LCD_displayCharacter+0x7ac>
    41a8:	9a 8b       	std	Y+18, r25	; 0x12
    41aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41ac:	8b 89       	ldd	r24, Y+19	; 0x13
    41ae:	9c 89       	ldd	r25, Y+20	; 0x14
    41b0:	01 97       	sbiw	r24, 0x01	; 1
    41b2:	9c 8b       	std	Y+20, r25	; 0x14
    41b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41b6:	8b 89       	ldd	r24, Y+19	; 0x13
    41b8:	9c 89       	ldd	r25, Y+20	; 0x14
    41ba:	00 97       	sbiw	r24, 0x00	; 0
    41bc:	69 f7       	brne	.-38     	; 0x4198 <LCD_displayCharacter+0x7a0>
    41be:	14 c0       	rjmp	.+40     	; 0x41e8 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41c0:	6d 89       	ldd	r22, Y+21	; 0x15
    41c2:	7e 89       	ldd	r23, Y+22	; 0x16
    41c4:	8f 89       	ldd	r24, Y+23	; 0x17
    41c6:	98 8d       	ldd	r25, Y+24	; 0x18
    41c8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    41cc:	dc 01       	movw	r26, r24
    41ce:	cb 01       	movw	r24, r22
    41d0:	9c 8b       	std	Y+20, r25	; 0x14
    41d2:	8b 8b       	std	Y+19, r24	; 0x13
    41d4:	8b 89       	ldd	r24, Y+19	; 0x13
    41d6:	9c 89       	ldd	r25, Y+20	; 0x14
    41d8:	98 8b       	std	Y+16, r25	; 0x10
    41da:	8f 87       	std	Y+15, r24	; 0x0f
    41dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    41de:	98 89       	ldd	r25, Y+16	; 0x10
    41e0:	01 97       	sbiw	r24, 0x01	; 1
    41e2:	f1 f7       	brne	.-4      	; 0x41e0 <LCD_displayCharacter+0x7e8>
    41e4:	98 8b       	std	Y+16, r25	; 0x10
    41e6:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    41e8:	82 e0       	ldi	r24, 0x02	; 2
    41ea:	62 e0       	ldi	r22, 0x02	; 2
    41ec:	40 e0       	ldi	r20, 0x00	; 0
    41ee:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    41f2:	80 e0       	ldi	r24, 0x00	; 0
    41f4:	90 e0       	ldi	r25, 0x00	; 0
    41f6:	a0 e8       	ldi	r26, 0x80	; 128
    41f8:	bf e3       	ldi	r27, 0x3F	; 63
    41fa:	8b 87       	std	Y+11, r24	; 0x0b
    41fc:	9c 87       	std	Y+12, r25	; 0x0c
    41fe:	ad 87       	std	Y+13, r26	; 0x0d
    4200:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4202:	6b 85       	ldd	r22, Y+11	; 0x0b
    4204:	7c 85       	ldd	r23, Y+12	; 0x0c
    4206:	8d 85       	ldd	r24, Y+13	; 0x0d
    4208:	9e 85       	ldd	r25, Y+14	; 0x0e
    420a:	20 e0       	ldi	r18, 0x00	; 0
    420c:	30 e0       	ldi	r19, 0x00	; 0
    420e:	4a e7       	ldi	r20, 0x7A	; 122
    4210:	55 e4       	ldi	r21, 0x45	; 69
    4212:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4216:	dc 01       	movw	r26, r24
    4218:	cb 01       	movw	r24, r22
    421a:	8f 83       	std	Y+7, r24	; 0x07
    421c:	98 87       	std	Y+8, r25	; 0x08
    421e:	a9 87       	std	Y+9, r26	; 0x09
    4220:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4222:	6f 81       	ldd	r22, Y+7	; 0x07
    4224:	78 85       	ldd	r23, Y+8	; 0x08
    4226:	89 85       	ldd	r24, Y+9	; 0x09
    4228:	9a 85       	ldd	r25, Y+10	; 0x0a
    422a:	20 e0       	ldi	r18, 0x00	; 0
    422c:	30 e0       	ldi	r19, 0x00	; 0
    422e:	40 e8       	ldi	r20, 0x80	; 128
    4230:	5f e3       	ldi	r21, 0x3F	; 63
    4232:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4236:	88 23       	and	r24, r24
    4238:	2c f4       	brge	.+10     	; 0x4244 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    423a:	81 e0       	ldi	r24, 0x01	; 1
    423c:	90 e0       	ldi	r25, 0x00	; 0
    423e:	9e 83       	std	Y+6, r25	; 0x06
    4240:	8d 83       	std	Y+5, r24	; 0x05
    4242:	3f c0       	rjmp	.+126    	; 0x42c2 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    4244:	6f 81       	ldd	r22, Y+7	; 0x07
    4246:	78 85       	ldd	r23, Y+8	; 0x08
    4248:	89 85       	ldd	r24, Y+9	; 0x09
    424a:	9a 85       	ldd	r25, Y+10	; 0x0a
    424c:	20 e0       	ldi	r18, 0x00	; 0
    424e:	3f ef       	ldi	r19, 0xFF	; 255
    4250:	4f e7       	ldi	r20, 0x7F	; 127
    4252:	57 e4       	ldi	r21, 0x47	; 71
    4254:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4258:	18 16       	cp	r1, r24
    425a:	4c f5       	brge	.+82     	; 0x42ae <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    425c:	6b 85       	ldd	r22, Y+11	; 0x0b
    425e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4260:	8d 85       	ldd	r24, Y+13	; 0x0d
    4262:	9e 85       	ldd	r25, Y+14	; 0x0e
    4264:	20 e0       	ldi	r18, 0x00	; 0
    4266:	30 e0       	ldi	r19, 0x00	; 0
    4268:	40 e2       	ldi	r20, 0x20	; 32
    426a:	51 e4       	ldi	r21, 0x41	; 65
    426c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4270:	dc 01       	movw	r26, r24
    4272:	cb 01       	movw	r24, r22
    4274:	bc 01       	movw	r22, r24
    4276:	cd 01       	movw	r24, r26
    4278:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    427c:	dc 01       	movw	r26, r24
    427e:	cb 01       	movw	r24, r22
    4280:	9e 83       	std	Y+6, r25	; 0x06
    4282:	8d 83       	std	Y+5, r24	; 0x05
    4284:	0f c0       	rjmp	.+30     	; 0x42a4 <LCD_displayCharacter+0x8ac>
    4286:	80 e9       	ldi	r24, 0x90	; 144
    4288:	91 e0       	ldi	r25, 0x01	; 1
    428a:	9c 83       	std	Y+4, r25	; 0x04
    428c:	8b 83       	std	Y+3, r24	; 0x03
    428e:	8b 81       	ldd	r24, Y+3	; 0x03
    4290:	9c 81       	ldd	r25, Y+4	; 0x04
    4292:	01 97       	sbiw	r24, 0x01	; 1
    4294:	f1 f7       	brne	.-4      	; 0x4292 <LCD_displayCharacter+0x89a>
    4296:	9c 83       	std	Y+4, r25	; 0x04
    4298:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    429a:	8d 81       	ldd	r24, Y+5	; 0x05
    429c:	9e 81       	ldd	r25, Y+6	; 0x06
    429e:	01 97       	sbiw	r24, 0x01	; 1
    42a0:	9e 83       	std	Y+6, r25	; 0x06
    42a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42a4:	8d 81       	ldd	r24, Y+5	; 0x05
    42a6:	9e 81       	ldd	r25, Y+6	; 0x06
    42a8:	00 97       	sbiw	r24, 0x00	; 0
    42aa:	69 f7       	brne	.-38     	; 0x4286 <LCD_displayCharacter+0x88e>
    42ac:	14 c0       	rjmp	.+40     	; 0x42d6 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42ae:	6f 81       	ldd	r22, Y+7	; 0x07
    42b0:	78 85       	ldd	r23, Y+8	; 0x08
    42b2:	89 85       	ldd	r24, Y+9	; 0x09
    42b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    42b6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    42ba:	dc 01       	movw	r26, r24
    42bc:	cb 01       	movw	r24, r22
    42be:	9e 83       	std	Y+6, r25	; 0x06
    42c0:	8d 83       	std	Y+5, r24	; 0x05
    42c2:	8d 81       	ldd	r24, Y+5	; 0x05
    42c4:	9e 81       	ldd	r25, Y+6	; 0x06
    42c6:	9a 83       	std	Y+2, r25	; 0x02
    42c8:	89 83       	std	Y+1, r24	; 0x01
    42ca:	89 81       	ldd	r24, Y+1	; 0x01
    42cc:	9a 81       	ldd	r25, Y+2	; 0x02
    42ce:	01 97       	sbiw	r24, 0x01	; 1
    42d0:	f1 f7       	brne	.-4      	; 0x42ce <LCD_displayCharacter+0x8d6>
    42d2:	9a 83       	std	Y+2, r25	; 0x02
    42d4:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    42d6:	cd 59       	subi	r28, 0x9D	; 157
    42d8:	df 4f       	sbci	r29, 0xFF	; 255
    42da:	0f b6       	in	r0, 0x3f	; 63
    42dc:	f8 94       	cli
    42de:	de bf       	out	0x3e, r29	; 62
    42e0:	0f be       	out	0x3f, r0	; 63
    42e2:	cd bf       	out	0x3d, r28	; 61
    42e4:	cf 91       	pop	r28
    42e6:	df 91       	pop	r29
    42e8:	1f 91       	pop	r17
    42ea:	0f 91       	pop	r16
    42ec:	08 95       	ret

000042ee <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    42ee:	df 93       	push	r29
    42f0:	cf 93       	push	r28
    42f2:	00 d0       	rcall	.+0      	; 0x42f4 <LCD_displayString+0x6>
    42f4:	0f 92       	push	r0
    42f6:	cd b7       	in	r28, 0x3d	; 61
    42f8:	de b7       	in	r29, 0x3e	; 62
    42fa:	9b 83       	std	Y+3, r25	; 0x03
    42fc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    42fe:	19 82       	std	Y+1, r1	; 0x01
    4300:	0e c0       	rjmp	.+28     	; 0x431e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    4302:	89 81       	ldd	r24, Y+1	; 0x01
    4304:	28 2f       	mov	r18, r24
    4306:	30 e0       	ldi	r19, 0x00	; 0
    4308:	8a 81       	ldd	r24, Y+2	; 0x02
    430a:	9b 81       	ldd	r25, Y+3	; 0x03
    430c:	fc 01       	movw	r30, r24
    430e:	e2 0f       	add	r30, r18
    4310:	f3 1f       	adc	r31, r19
    4312:	80 81       	ld	r24, Z
    4314:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <LCD_displayCharacter>
		i++;
    4318:	89 81       	ldd	r24, Y+1	; 0x01
    431a:	8f 5f       	subi	r24, 0xFF	; 255
    431c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    431e:	89 81       	ldd	r24, Y+1	; 0x01
    4320:	28 2f       	mov	r18, r24
    4322:	30 e0       	ldi	r19, 0x00	; 0
    4324:	8a 81       	ldd	r24, Y+2	; 0x02
    4326:	9b 81       	ldd	r25, Y+3	; 0x03
    4328:	fc 01       	movw	r30, r24
    432a:	e2 0f       	add	r30, r18
    432c:	f3 1f       	adc	r31, r19
    432e:	80 81       	ld	r24, Z
    4330:	88 23       	and	r24, r24
    4332:	39 f7       	brne	.-50     	; 0x4302 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    4334:	0f 90       	pop	r0
    4336:	0f 90       	pop	r0
    4338:	0f 90       	pop	r0
    433a:	cf 91       	pop	r28
    433c:	df 91       	pop	r29
    433e:	08 95       	ret

00004340 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    4340:	df 93       	push	r29
    4342:	cf 93       	push	r28
    4344:	00 d0       	rcall	.+0      	; 0x4346 <LCD_moveCursor+0x6>
    4346:	00 d0       	rcall	.+0      	; 0x4348 <LCD_moveCursor+0x8>
    4348:	0f 92       	push	r0
    434a:	cd b7       	in	r28, 0x3d	; 61
    434c:	de b7       	in	r29, 0x3e	; 62
    434e:	8a 83       	std	Y+2, r24	; 0x02
    4350:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    4352:	8a 81       	ldd	r24, Y+2	; 0x02
    4354:	28 2f       	mov	r18, r24
    4356:	30 e0       	ldi	r19, 0x00	; 0
    4358:	3d 83       	std	Y+5, r19	; 0x05
    435a:	2c 83       	std	Y+4, r18	; 0x04
    435c:	8c 81       	ldd	r24, Y+4	; 0x04
    435e:	9d 81       	ldd	r25, Y+5	; 0x05
    4360:	81 30       	cpi	r24, 0x01	; 1
    4362:	91 05       	cpc	r25, r1
    4364:	c1 f0       	breq	.+48     	; 0x4396 <LCD_moveCursor+0x56>
    4366:	2c 81       	ldd	r18, Y+4	; 0x04
    4368:	3d 81       	ldd	r19, Y+5	; 0x05
    436a:	22 30       	cpi	r18, 0x02	; 2
    436c:	31 05       	cpc	r19, r1
    436e:	2c f4       	brge	.+10     	; 0x437a <LCD_moveCursor+0x3a>
    4370:	8c 81       	ldd	r24, Y+4	; 0x04
    4372:	9d 81       	ldd	r25, Y+5	; 0x05
    4374:	00 97       	sbiw	r24, 0x00	; 0
    4376:	61 f0       	breq	.+24     	; 0x4390 <LCD_moveCursor+0x50>
    4378:	19 c0       	rjmp	.+50     	; 0x43ac <LCD_moveCursor+0x6c>
    437a:	2c 81       	ldd	r18, Y+4	; 0x04
    437c:	3d 81       	ldd	r19, Y+5	; 0x05
    437e:	22 30       	cpi	r18, 0x02	; 2
    4380:	31 05       	cpc	r19, r1
    4382:	69 f0       	breq	.+26     	; 0x439e <LCD_moveCursor+0x5e>
    4384:	8c 81       	ldd	r24, Y+4	; 0x04
    4386:	9d 81       	ldd	r25, Y+5	; 0x05
    4388:	83 30       	cpi	r24, 0x03	; 3
    438a:	91 05       	cpc	r25, r1
    438c:	61 f0       	breq	.+24     	; 0x43a6 <LCD_moveCursor+0x66>
    438e:	0e c0       	rjmp	.+28     	; 0x43ac <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    4390:	8b 81       	ldd	r24, Y+3	; 0x03
    4392:	89 83       	std	Y+1, r24	; 0x01
    4394:	0b c0       	rjmp	.+22     	; 0x43ac <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    4396:	8b 81       	ldd	r24, Y+3	; 0x03
    4398:	80 5c       	subi	r24, 0xC0	; 192
    439a:	89 83       	std	Y+1, r24	; 0x01
    439c:	07 c0       	rjmp	.+14     	; 0x43ac <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    439e:	8b 81       	ldd	r24, Y+3	; 0x03
    43a0:	80 5f       	subi	r24, 0xF0	; 240
    43a2:	89 83       	std	Y+1, r24	; 0x01
    43a4:	03 c0       	rjmp	.+6      	; 0x43ac <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    43a6:	8b 81       	ldd	r24, Y+3	; 0x03
    43a8:	80 5b       	subi	r24, 0xB0	; 176
    43aa:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    43ac:	89 81       	ldd	r24, Y+1	; 0x01
    43ae:	80 68       	ori	r24, 0x80	; 128
    43b0:	0e 94 81 18 	call	0x3102	; 0x3102 <LCD_sendCommand>
}
    43b4:	0f 90       	pop	r0
    43b6:	0f 90       	pop	r0
    43b8:	0f 90       	pop	r0
    43ba:	0f 90       	pop	r0
    43bc:	0f 90       	pop	r0
    43be:	cf 91       	pop	r28
    43c0:	df 91       	pop	r29
    43c2:	08 95       	ret

000043c4 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    43c4:	df 93       	push	r29
    43c6:	cf 93       	push	r28
    43c8:	00 d0       	rcall	.+0      	; 0x43ca <LCD_displayStringRowColumn+0x6>
    43ca:	00 d0       	rcall	.+0      	; 0x43cc <LCD_displayStringRowColumn+0x8>
    43cc:	cd b7       	in	r28, 0x3d	; 61
    43ce:	de b7       	in	r29, 0x3e	; 62
    43d0:	89 83       	std	Y+1, r24	; 0x01
    43d2:	6a 83       	std	Y+2, r22	; 0x02
    43d4:	5c 83       	std	Y+4, r21	; 0x04
    43d6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    43d8:	89 81       	ldd	r24, Y+1	; 0x01
    43da:	6a 81       	ldd	r22, Y+2	; 0x02
    43dc:	0e 94 a0 21 	call	0x4340	; 0x4340 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    43e0:	8b 81       	ldd	r24, Y+3	; 0x03
    43e2:	9c 81       	ldd	r25, Y+4	; 0x04
    43e4:	0e 94 77 21 	call	0x42ee	; 0x42ee <LCD_displayString>
}
    43e8:	0f 90       	pop	r0
    43ea:	0f 90       	pop	r0
    43ec:	0f 90       	pop	r0
    43ee:	0f 90       	pop	r0
    43f0:	cf 91       	pop	r28
    43f2:	df 91       	pop	r29
    43f4:	08 95       	ret

000043f6 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    43f6:	df 93       	push	r29
    43f8:	cf 93       	push	r28
    43fa:	cd b7       	in	r28, 0x3d	; 61
    43fc:	de b7       	in	r29, 0x3e	; 62
    43fe:	62 97       	sbiw	r28, 0x12	; 18
    4400:	0f b6       	in	r0, 0x3f	; 63
    4402:	f8 94       	cli
    4404:	de bf       	out	0x3e, r29	; 62
    4406:	0f be       	out	0x3f, r0	; 63
    4408:	cd bf       	out	0x3d, r28	; 61
    440a:	9a 8b       	std	Y+18, r25	; 0x12
    440c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    440e:	89 89       	ldd	r24, Y+17	; 0x11
    4410:	9a 89       	ldd	r25, Y+18	; 0x12
    4412:	9e 01       	movw	r18, r28
    4414:	2f 5f       	subi	r18, 0xFF	; 255
    4416:	3f 4f       	sbci	r19, 0xFF	; 255
    4418:	b9 01       	movw	r22, r18
    441a:	4a e0       	ldi	r20, 0x0A	; 10
    441c:	50 e0       	ldi	r21, 0x00	; 0
    441e:	0e 94 3f 23 	call	0x467e	; 0x467e <itoa>
   LCD_displayString(buff); /* Display the string */
    4422:	ce 01       	movw	r24, r28
    4424:	01 96       	adiw	r24, 0x01	; 1
    4426:	0e 94 77 21 	call	0x42ee	; 0x42ee <LCD_displayString>
}
    442a:	62 96       	adiw	r28, 0x12	; 18
    442c:	0f b6       	in	r0, 0x3f	; 63
    442e:	f8 94       	cli
    4430:	de bf       	out	0x3e, r29	; 62
    4432:	0f be       	out	0x3f, r0	; 63
    4434:	cd bf       	out	0x3d, r28	; 61
    4436:	cf 91       	pop	r28
    4438:	df 91       	pop	r29
    443a:	08 95       	ret

0000443c <LCD_floatToString>:
/*
 * Description :
 * Display the required float value on the screen
 */
void LCD_floatToString(float32 data)
{
    443c:	0f 93       	push	r16
    443e:	1f 93       	push	r17
    4440:	df 93       	push	r29
    4442:	cf 93       	push	r28
    4444:	cd b7       	in	r28, 0x3d	; 61
    4446:	de b7       	in	r29, 0x3e	; 62
    4448:	64 97       	sbiw	r28, 0x14	; 20
    444a:	0f b6       	in	r0, 0x3f	; 63
    444c:	f8 94       	cli
    444e:	de bf       	out	0x3e, r29	; 62
    4450:	0f be       	out	0x3f, r0	; 63
    4452:	cd bf       	out	0x3d, r28	; 61
    4454:	69 8b       	std	Y+17, r22	; 0x11
    4456:	7a 8b       	std	Y+18, r23	; 0x12
    4458:	8b 8b       	std	Y+19, r24	; 0x13
    445a:	9c 8b       	std	Y+20, r25	; 0x14
   sint8 buff[16]; /* String to hold the ascii result */
   dtostrf(data,5,3,buff);
    445c:	89 89       	ldd	r24, Y+17	; 0x11
    445e:	9a 89       	ldd	r25, Y+18	; 0x12
    4460:	ab 89       	ldd	r26, Y+19	; 0x13
    4462:	bc 89       	ldd	r27, Y+20	; 0x14
    4464:	bc 01       	movw	r22, r24
    4466:	cd 01       	movw	r24, r26
    4468:	45 e0       	ldi	r20, 0x05	; 5
    446a:	50 e0       	ldi	r21, 0x00	; 0
    446c:	23 e0       	ldi	r18, 0x03	; 3
    446e:	30 e0       	ldi	r19, 0x00	; 0
    4470:	fe 01       	movw	r30, r28
    4472:	31 96       	adiw	r30, 0x01	; 1
    4474:	8f 01       	movw	r16, r30
    4476:	0e 94 bd 22 	call	0x457a	; 0x457a <dtostrf>
   LCD_displayString(buff); /* Display the string */
    447a:	ce 01       	movw	r24, r28
    447c:	01 96       	adiw	r24, 0x01	; 1
    447e:	0e 94 77 21 	call	0x42ee	; 0x42ee <LCD_displayString>
}
    4482:	64 96       	adiw	r28, 0x14	; 20
    4484:	0f b6       	in	r0, 0x3f	; 63
    4486:	f8 94       	cli
    4488:	de bf       	out	0x3e, r29	; 62
    448a:	0f be       	out	0x3f, r0	; 63
    448c:	cd bf       	out	0x3d, r28	; 61
    448e:	cf 91       	pop	r28
    4490:	df 91       	pop	r29
    4492:	1f 91       	pop	r17
    4494:	0f 91       	pop	r16
    4496:	08 95       	ret

00004498 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    4498:	df 93       	push	r29
    449a:	cf 93       	push	r28
    449c:	cd b7       	in	r28, 0x3d	; 61
    449e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    44a0:	81 e0       	ldi	r24, 0x01	; 1
    44a2:	0e 94 81 18 	call	0x3102	; 0x3102 <LCD_sendCommand>
}
    44a6:	cf 91       	pop	r28
    44a8:	df 91       	pop	r29
    44aa:	08 95       	ret

000044ac <main>:
 ============================================================================
 */

#include "../HAL/calc.h"
int main(void)
{
    44ac:	df 93       	push	r29
    44ae:	cf 93       	push	r28
    44b0:	cd b7       	in	r28, 0x3d	; 61
    44b2:	de b7       	in	r29, 0x3e	; 62


	start(); //Start interface
    44b4:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <start>

	for(;;)
	{
		Do_Caclulations();//Start program (Calculations)
    44b8:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <Do_Caclulations>
    44bc:	fd cf       	rjmp	.-6      	; 0x44b8 <main+0xc>

000044be <__divmodhi4>:
    44be:	97 fb       	bst	r25, 7
    44c0:	09 2e       	mov	r0, r25
    44c2:	07 26       	eor	r0, r23
    44c4:	0a d0       	rcall	.+20     	; 0x44da <__divmodhi4_neg1>
    44c6:	77 fd       	sbrc	r23, 7
    44c8:	04 d0       	rcall	.+8      	; 0x44d2 <__divmodhi4_neg2>
    44ca:	0c d0       	rcall	.+24     	; 0x44e4 <__udivmodhi4>
    44cc:	06 d0       	rcall	.+12     	; 0x44da <__divmodhi4_neg1>
    44ce:	00 20       	and	r0, r0
    44d0:	1a f4       	brpl	.+6      	; 0x44d8 <__divmodhi4_exit>

000044d2 <__divmodhi4_neg2>:
    44d2:	70 95       	com	r23
    44d4:	61 95       	neg	r22
    44d6:	7f 4f       	sbci	r23, 0xFF	; 255

000044d8 <__divmodhi4_exit>:
    44d8:	08 95       	ret

000044da <__divmodhi4_neg1>:
    44da:	f6 f7       	brtc	.-4      	; 0x44d8 <__divmodhi4_exit>
    44dc:	90 95       	com	r25
    44de:	81 95       	neg	r24
    44e0:	9f 4f       	sbci	r25, 0xFF	; 255
    44e2:	08 95       	ret

000044e4 <__udivmodhi4>:
    44e4:	aa 1b       	sub	r26, r26
    44e6:	bb 1b       	sub	r27, r27
    44e8:	51 e1       	ldi	r21, 0x11	; 17
    44ea:	07 c0       	rjmp	.+14     	; 0x44fa <__udivmodhi4_ep>

000044ec <__udivmodhi4_loop>:
    44ec:	aa 1f       	adc	r26, r26
    44ee:	bb 1f       	adc	r27, r27
    44f0:	a6 17       	cp	r26, r22
    44f2:	b7 07       	cpc	r27, r23
    44f4:	10 f0       	brcs	.+4      	; 0x44fa <__udivmodhi4_ep>
    44f6:	a6 1b       	sub	r26, r22
    44f8:	b7 0b       	sbc	r27, r23

000044fa <__udivmodhi4_ep>:
    44fa:	88 1f       	adc	r24, r24
    44fc:	99 1f       	adc	r25, r25
    44fe:	5a 95       	dec	r21
    4500:	a9 f7       	brne	.-22     	; 0x44ec <__udivmodhi4_loop>
    4502:	80 95       	com	r24
    4504:	90 95       	com	r25
    4506:	bc 01       	movw	r22, r24
    4508:	cd 01       	movw	r24, r26
    450a:	08 95       	ret

0000450c <__prologue_saves__>:
    450c:	2f 92       	push	r2
    450e:	3f 92       	push	r3
    4510:	4f 92       	push	r4
    4512:	5f 92       	push	r5
    4514:	6f 92       	push	r6
    4516:	7f 92       	push	r7
    4518:	8f 92       	push	r8
    451a:	9f 92       	push	r9
    451c:	af 92       	push	r10
    451e:	bf 92       	push	r11
    4520:	cf 92       	push	r12
    4522:	df 92       	push	r13
    4524:	ef 92       	push	r14
    4526:	ff 92       	push	r15
    4528:	0f 93       	push	r16
    452a:	1f 93       	push	r17
    452c:	cf 93       	push	r28
    452e:	df 93       	push	r29
    4530:	cd b7       	in	r28, 0x3d	; 61
    4532:	de b7       	in	r29, 0x3e	; 62
    4534:	ca 1b       	sub	r28, r26
    4536:	db 0b       	sbc	r29, r27
    4538:	0f b6       	in	r0, 0x3f	; 63
    453a:	f8 94       	cli
    453c:	de bf       	out	0x3e, r29	; 62
    453e:	0f be       	out	0x3f, r0	; 63
    4540:	cd bf       	out	0x3d, r28	; 61
    4542:	09 94       	ijmp

00004544 <__epilogue_restores__>:
    4544:	2a 88       	ldd	r2, Y+18	; 0x12
    4546:	39 88       	ldd	r3, Y+17	; 0x11
    4548:	48 88       	ldd	r4, Y+16	; 0x10
    454a:	5f 84       	ldd	r5, Y+15	; 0x0f
    454c:	6e 84       	ldd	r6, Y+14	; 0x0e
    454e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4550:	8c 84       	ldd	r8, Y+12	; 0x0c
    4552:	9b 84       	ldd	r9, Y+11	; 0x0b
    4554:	aa 84       	ldd	r10, Y+10	; 0x0a
    4556:	b9 84       	ldd	r11, Y+9	; 0x09
    4558:	c8 84       	ldd	r12, Y+8	; 0x08
    455a:	df 80       	ldd	r13, Y+7	; 0x07
    455c:	ee 80       	ldd	r14, Y+6	; 0x06
    455e:	fd 80       	ldd	r15, Y+5	; 0x05
    4560:	0c 81       	ldd	r16, Y+4	; 0x04
    4562:	1b 81       	ldd	r17, Y+3	; 0x03
    4564:	aa 81       	ldd	r26, Y+2	; 0x02
    4566:	b9 81       	ldd	r27, Y+1	; 0x01
    4568:	ce 0f       	add	r28, r30
    456a:	d1 1d       	adc	r29, r1
    456c:	0f b6       	in	r0, 0x3f	; 63
    456e:	f8 94       	cli
    4570:	de bf       	out	0x3e, r29	; 62
    4572:	0f be       	out	0x3f, r0	; 63
    4574:	cd bf       	out	0x3d, r28	; 61
    4576:	ed 01       	movw	r28, r26
    4578:	08 95       	ret

0000457a <dtostrf>:
    457a:	ef 92       	push	r14
    457c:	ff 92       	push	r15
    457e:	0f 93       	push	r16
    4580:	1f 93       	push	r17
    4582:	f2 2f       	mov	r31, r18
    4584:	f0 2e       	mov	r15, r16
    4586:	47 fd       	sbrc	r20, 7
    4588:	02 c0       	rjmp	.+4      	; 0x458e <dtostrf+0x14>
    458a:	e4 e0       	ldi	r30, 0x04	; 4
    458c:	01 c0       	rjmp	.+2      	; 0x4590 <dtostrf+0x16>
    458e:	e4 e1       	ldi	r30, 0x14	; 20
    4590:	24 2f       	mov	r18, r20
    4592:	33 27       	eor	r19, r19
    4594:	27 fd       	sbrc	r18, 7
    4596:	30 95       	com	r19
    4598:	37 ff       	sbrs	r19, 7
    459a:	03 c0       	rjmp	.+6      	; 0x45a2 <dtostrf+0x28>
    459c:	30 95       	com	r19
    459e:	21 95       	neg	r18
    45a0:	3f 4f       	sbci	r19, 0xFF	; 255
    45a2:	4f 2d       	mov	r20, r15
    45a4:	51 2f       	mov	r21, r17
    45a6:	0f 2f       	mov	r16, r31
    45a8:	ee 2e       	mov	r14, r30
    45aa:	0e 94 a2 23 	call	0x4744	; 0x4744 <dtoa_prf>
    45ae:	8f 2d       	mov	r24, r15
    45b0:	91 2f       	mov	r25, r17
    45b2:	1f 91       	pop	r17
    45b4:	0f 91       	pop	r16
    45b6:	ff 90       	pop	r15
    45b8:	ef 90       	pop	r14
    45ba:	08 95       	ret

000045bc <do_rand>:
    45bc:	a0 e0       	ldi	r26, 0x00	; 0
    45be:	b0 e0       	ldi	r27, 0x00	; 0
    45c0:	e4 ee       	ldi	r30, 0xE4	; 228
    45c2:	f2 e2       	ldi	r31, 0x22	; 34
    45c4:	0c 94 8e 22 	jmp	0x451c	; 0x451c <__prologue_saves__+0x10>
    45c8:	ec 01       	movw	r28, r24
    45ca:	a8 80       	ld	r10, Y
    45cc:	b9 80       	ldd	r11, Y+1	; 0x01
    45ce:	ca 80       	ldd	r12, Y+2	; 0x02
    45d0:	db 80       	ldd	r13, Y+3	; 0x03
    45d2:	a1 14       	cp	r10, r1
    45d4:	b1 04       	cpc	r11, r1
    45d6:	c1 04       	cpc	r12, r1
    45d8:	d1 04       	cpc	r13, r1
    45da:	41 f4       	brne	.+16     	; 0x45ec <do_rand+0x30>
    45dc:	84 e2       	ldi	r24, 0x24	; 36
    45de:	a8 2e       	mov	r10, r24
    45e0:	89 ed       	ldi	r24, 0xD9	; 217
    45e2:	b8 2e       	mov	r11, r24
    45e4:	8b e5       	ldi	r24, 0x5B	; 91
    45e6:	c8 2e       	mov	r12, r24
    45e8:	87 e0       	ldi	r24, 0x07	; 7
    45ea:	d8 2e       	mov	r13, r24
    45ec:	c6 01       	movw	r24, r12
    45ee:	b5 01       	movw	r22, r10
    45f0:	2d e1       	ldi	r18, 0x1D	; 29
    45f2:	33 ef       	ldi	r19, 0xF3	; 243
    45f4:	41 e0       	ldi	r20, 0x01	; 1
    45f6:	50 e0       	ldi	r21, 0x00	; 0
    45f8:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__divmodsi4>
    45fc:	27 ea       	ldi	r18, 0xA7	; 167
    45fe:	31 e4       	ldi	r19, 0x41	; 65
    4600:	40 e0       	ldi	r20, 0x00	; 0
    4602:	50 e0       	ldi	r21, 0x00	; 0
    4604:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <__mulsi3>
    4608:	7b 01       	movw	r14, r22
    460a:	8c 01       	movw	r16, r24
    460c:	c6 01       	movw	r24, r12
    460e:	b5 01       	movw	r22, r10
    4610:	2d e1       	ldi	r18, 0x1D	; 29
    4612:	33 ef       	ldi	r19, 0xF3	; 243
    4614:	41 e0       	ldi	r20, 0x01	; 1
    4616:	50 e0       	ldi	r21, 0x00	; 0
    4618:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__divmodsi4>
    461c:	ca 01       	movw	r24, r20
    461e:	b9 01       	movw	r22, r18
    4620:	2c ee       	ldi	r18, 0xEC	; 236
    4622:	34 ef       	ldi	r19, 0xF4	; 244
    4624:	4f ef       	ldi	r20, 0xFF	; 255
    4626:	5f ef       	ldi	r21, 0xFF	; 255
    4628:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <__mulsi3>
    462c:	6e 0d       	add	r22, r14
    462e:	7f 1d       	adc	r23, r15
    4630:	80 1f       	adc	r24, r16
    4632:	91 1f       	adc	r25, r17
    4634:	97 ff       	sbrs	r25, 7
    4636:	04 c0       	rjmp	.+8      	; 0x4640 <do_rand+0x84>
    4638:	61 50       	subi	r22, 0x01	; 1
    463a:	70 40       	sbci	r23, 0x00	; 0
    463c:	80 40       	sbci	r24, 0x00	; 0
    463e:	90 48       	sbci	r25, 0x80	; 128
    4640:	68 83       	st	Y, r22
    4642:	79 83       	std	Y+1, r23	; 0x01
    4644:	8a 83       	std	Y+2, r24	; 0x02
    4646:	9b 83       	std	Y+3, r25	; 0x03
    4648:	9b 01       	movw	r18, r22
    464a:	3f 77       	andi	r19, 0x7F	; 127
    464c:	c9 01       	movw	r24, r18
    464e:	cd b7       	in	r28, 0x3d	; 61
    4650:	de b7       	in	r29, 0x3e	; 62
    4652:	ea e0       	ldi	r30, 0x0A	; 10
    4654:	0c 94 aa 22 	jmp	0x4554	; 0x4554 <__epilogue_restores__+0x10>

00004658 <rand_r>:
    4658:	0e 94 de 22 	call	0x45bc	; 0x45bc <do_rand>
    465c:	08 95       	ret

0000465e <rand>:
    465e:	87 e7       	ldi	r24, 0x77	; 119
    4660:	91 e0       	ldi	r25, 0x01	; 1
    4662:	0e 94 de 22 	call	0x45bc	; 0x45bc <do_rand>
    4666:	08 95       	ret

00004668 <srand>:
    4668:	a0 e0       	ldi	r26, 0x00	; 0
    466a:	b0 e0       	ldi	r27, 0x00	; 0
    466c:	80 93 77 01 	sts	0x0177, r24
    4670:	90 93 78 01 	sts	0x0178, r25
    4674:	a0 93 79 01 	sts	0x0179, r26
    4678:	b0 93 7a 01 	sts	0x017A, r27
    467c:	08 95       	ret

0000467e <itoa>:
    467e:	fb 01       	movw	r30, r22
    4680:	9f 01       	movw	r18, r30
    4682:	e8 94       	clt
    4684:	42 30       	cpi	r20, 0x02	; 2
    4686:	c4 f0       	brlt	.+48     	; 0x46b8 <itoa+0x3a>
    4688:	45 32       	cpi	r20, 0x25	; 37
    468a:	b4 f4       	brge	.+44     	; 0x46b8 <itoa+0x3a>
    468c:	4a 30       	cpi	r20, 0x0A	; 10
    468e:	29 f4       	brne	.+10     	; 0x469a <itoa+0x1c>
    4690:	97 fb       	bst	r25, 7
    4692:	1e f4       	brtc	.+6      	; 0x469a <itoa+0x1c>
    4694:	90 95       	com	r25
    4696:	81 95       	neg	r24
    4698:	9f 4f       	sbci	r25, 0xFF	; 255
    469a:	64 2f       	mov	r22, r20
    469c:	77 27       	eor	r23, r23
    469e:	0e 94 72 22 	call	0x44e4	; 0x44e4 <__udivmodhi4>
    46a2:	80 5d       	subi	r24, 0xD0	; 208
    46a4:	8a 33       	cpi	r24, 0x3A	; 58
    46a6:	0c f0       	brlt	.+2      	; 0x46aa <itoa+0x2c>
    46a8:	89 5d       	subi	r24, 0xD9	; 217
    46aa:	81 93       	st	Z+, r24
    46ac:	cb 01       	movw	r24, r22
    46ae:	00 97       	sbiw	r24, 0x00	; 0
    46b0:	a1 f7       	brne	.-24     	; 0x469a <itoa+0x1c>
    46b2:	16 f4       	brtc	.+4      	; 0x46b8 <itoa+0x3a>
    46b4:	5d e2       	ldi	r21, 0x2D	; 45
    46b6:	51 93       	st	Z+, r21
    46b8:	10 82       	st	Z, r1
    46ba:	c9 01       	movw	r24, r18
    46bc:	0c 94 dc 25 	jmp	0x4bb8	; 0x4bb8 <strrev>
    46c0:	11 f4       	brne	.+4      	; 0x46c6 <itoa+0x48>
    46c2:	0e f4       	brtc	.+2      	; 0x46c6 <itoa+0x48>
    46c4:	97 c2       	rjmp	.+1326   	; 0x4bf4 <__fp_nan>
    46c6:	88 c2       	rjmp	.+1296   	; 0x4bd8 <__fp_mpack>

000046c8 <sqrt>:
    46c8:	a7 d2       	rcall	.+1358   	; 0x4c18 <__fp_splitA>
    46ca:	d0 f3       	brcs	.-12     	; 0x46c0 <itoa+0x42>
    46cc:	99 23       	and	r25, r25
    46ce:	d9 f3       	breq	.-10     	; 0x46c6 <itoa+0x48>
    46d0:	ce f3       	brts	.-14     	; 0x46c4 <itoa+0x46>
    46d2:	9f 57       	subi	r25, 0x7F	; 127
    46d4:	55 0b       	sbc	r21, r21
    46d6:	87 ff       	sbrs	r24, 7
    46d8:	90 d2       	rcall	.+1312   	; 0x4bfa <__fp_norm2>
    46da:	00 24       	eor	r0, r0
    46dc:	a0 e6       	ldi	r26, 0x60	; 96
    46de:	40 ea       	ldi	r20, 0xA0	; 160
    46e0:	90 01       	movw	r18, r0
    46e2:	80 58       	subi	r24, 0x80	; 128
    46e4:	56 95       	lsr	r21
    46e6:	97 95       	ror	r25
    46e8:	28 f4       	brcc	.+10     	; 0x46f4 <sqrt+0x2c>
    46ea:	80 5c       	subi	r24, 0xC0	; 192
    46ec:	66 0f       	add	r22, r22
    46ee:	77 1f       	adc	r23, r23
    46f0:	88 1f       	adc	r24, r24
    46f2:	20 f0       	brcs	.+8      	; 0x46fc <sqrt+0x34>
    46f4:	26 17       	cp	r18, r22
    46f6:	37 07       	cpc	r19, r23
    46f8:	48 07       	cpc	r20, r24
    46fa:	30 f4       	brcc	.+12     	; 0x4708 <sqrt+0x40>
    46fc:	62 1b       	sub	r22, r18
    46fe:	73 0b       	sbc	r23, r19
    4700:	84 0b       	sbc	r24, r20
    4702:	20 29       	or	r18, r0
    4704:	31 29       	or	r19, r1
    4706:	4a 2b       	or	r20, r26
    4708:	a6 95       	lsr	r26
    470a:	17 94       	ror	r1
    470c:	07 94       	ror	r0
    470e:	20 25       	eor	r18, r0
    4710:	31 25       	eor	r19, r1
    4712:	4a 27       	eor	r20, r26
    4714:	58 f7       	brcc	.-42     	; 0x46ec <sqrt+0x24>
    4716:	66 0f       	add	r22, r22
    4718:	77 1f       	adc	r23, r23
    471a:	88 1f       	adc	r24, r24
    471c:	20 f0       	brcs	.+8      	; 0x4726 <sqrt+0x5e>
    471e:	26 17       	cp	r18, r22
    4720:	37 07       	cpc	r19, r23
    4722:	48 07       	cpc	r20, r24
    4724:	30 f4       	brcc	.+12     	; 0x4732 <sqrt+0x6a>
    4726:	62 0b       	sbc	r22, r18
    4728:	73 0b       	sbc	r23, r19
    472a:	84 0b       	sbc	r24, r20
    472c:	20 0d       	add	r18, r0
    472e:	31 1d       	adc	r19, r1
    4730:	41 1d       	adc	r20, r1
    4732:	a0 95       	com	r26
    4734:	81 f7       	brne	.-32     	; 0x4716 <sqrt+0x4e>
    4736:	b9 01       	movw	r22, r18
    4738:	84 2f       	mov	r24, r20
    473a:	91 58       	subi	r25, 0x81	; 129
    473c:	88 0f       	add	r24, r24
    473e:	96 95       	lsr	r25
    4740:	87 95       	ror	r24
    4742:	08 95       	ret

00004744 <dtoa_prf>:
    4744:	a9 e0       	ldi	r26, 0x09	; 9
    4746:	b0 e0       	ldi	r27, 0x00	; 0
    4748:	e8 ea       	ldi	r30, 0xA8	; 168
    474a:	f3 e2       	ldi	r31, 0x23	; 35
    474c:	0c 94 8a 22 	jmp	0x4514	; 0x4514 <__prologue_saves__+0x8>
    4750:	6a 01       	movw	r12, r20
    4752:	12 2f       	mov	r17, r18
    4754:	a0 2e       	mov	r10, r16
    4756:	be 2c       	mov	r11, r14
    4758:	2b e3       	ldi	r18, 0x3B	; 59
    475a:	20 17       	cp	r18, r16
    475c:	18 f4       	brcc	.+6      	; 0x4764 <dtoa_prf+0x20>
    475e:	2c e3       	ldi	r18, 0x3C	; 60
    4760:	92 2e       	mov	r9, r18
    4762:	02 c0       	rjmp	.+4      	; 0x4768 <dtoa_prf+0x24>
    4764:	90 2e       	mov	r9, r16
    4766:	93 94       	inc	r9
    4768:	ae 01       	movw	r20, r28
    476a:	4f 5f       	subi	r20, 0xFF	; 255
    476c:	5f 4f       	sbci	r21, 0xFF	; 255
    476e:	27 e0       	ldi	r18, 0x07	; 7
    4770:	09 2d       	mov	r16, r9
    4772:	0e 94 04 25 	call	0x4a08	; 0x4a08 <__ftoa_engine>
    4776:	bc 01       	movw	r22, r24
    4778:	89 81       	ldd	r24, Y+1	; 0x01
    477a:	e8 2e       	mov	r14, r24
    477c:	ff 24       	eor	r15, r15
    477e:	c7 01       	movw	r24, r14
    4780:	89 70       	andi	r24, 0x09	; 9
    4782:	90 70       	andi	r25, 0x00	; 0
    4784:	01 97       	sbiw	r24, 0x01	; 1
    4786:	11 f4       	brne	.+4      	; 0x478c <dtoa_prf+0x48>
    4788:	ad e2       	ldi	r26, 0x2D	; 45
    478a:	09 c0       	rjmp	.+18     	; 0x479e <dtoa_prf+0x5a>
    478c:	b1 fe       	sbrs	r11, 1
    478e:	02 c0       	rjmp	.+4      	; 0x4794 <dtoa_prf+0x50>
    4790:	ab e2       	ldi	r26, 0x2B	; 43
    4792:	05 c0       	rjmp	.+10     	; 0x479e <dtoa_prf+0x5a>
    4794:	b0 fc       	sbrc	r11, 0
    4796:	02 c0       	rjmp	.+4      	; 0x479c <dtoa_prf+0x58>
    4798:	a0 e0       	ldi	r26, 0x00	; 0
    479a:	01 c0       	rjmp	.+2      	; 0x479e <dtoa_prf+0x5a>
    479c:	a0 e2       	ldi	r26, 0x20	; 32
    479e:	e3 fe       	sbrs	r14, 3
    47a0:	3b c0       	rjmp	.+118    	; 0x4818 <dtoa_prf+0xd4>
    47a2:	aa 23       	and	r26, r26
    47a4:	11 f4       	brne	.+4      	; 0x47aa <dtoa_prf+0x66>
    47a6:	23 e0       	ldi	r18, 0x03	; 3
    47a8:	01 c0       	rjmp	.+2      	; 0x47ac <dtoa_prf+0x68>
    47aa:	24 e0       	ldi	r18, 0x04	; 4
    47ac:	21 17       	cp	r18, r17
    47ae:	10 f0       	brcs	.+4      	; 0x47b4 <dtoa_prf+0x70>
    47b0:	20 e0       	ldi	r18, 0x00	; 0
    47b2:	02 c0       	rjmp	.+4      	; 0x47b8 <dtoa_prf+0x74>
    47b4:	12 1b       	sub	r17, r18
    47b6:	21 2f       	mov	r18, r17
    47b8:	eb 2c       	mov	r14, r11
    47ba:	b4 fe       	sbrs	r11, 4
    47bc:	02 c0       	rjmp	.+4      	; 0x47c2 <dtoa_prf+0x7e>
    47be:	32 2f       	mov	r19, r18
    47c0:	0a c0       	rjmp	.+20     	; 0x47d6 <dtoa_prf+0x92>
    47c2:	f6 01       	movw	r30, r12
    47c4:	32 2f       	mov	r19, r18
    47c6:	80 e2       	ldi	r24, 0x20	; 32
    47c8:	02 c0       	rjmp	.+4      	; 0x47ce <dtoa_prf+0x8a>
    47ca:	81 93       	st	Z+, r24
    47cc:	31 50       	subi	r19, 0x01	; 1
    47ce:	33 23       	and	r19, r19
    47d0:	e1 f7       	brne	.-8      	; 0x47ca <dtoa_prf+0x86>
    47d2:	c2 0e       	add	r12, r18
    47d4:	d1 1c       	adc	r13, r1
    47d6:	aa 23       	and	r26, r26
    47d8:	19 f0       	breq	.+6      	; 0x47e0 <dtoa_prf+0x9c>
    47da:	f6 01       	movw	r30, r12
    47dc:	a1 93       	st	Z+, r26
    47de:	6f 01       	movw	r12, r30
    47e0:	f6 01       	movw	r30, r12
    47e2:	31 96       	adiw	r30, 0x01	; 1
    47e4:	e2 fe       	sbrs	r14, 2
    47e6:	05 c0       	rjmp	.+10     	; 0x47f2 <dtoa_prf+0xae>
    47e8:	9e e4       	ldi	r25, 0x4E	; 78
    47ea:	d6 01       	movw	r26, r12
    47ec:	9c 93       	st	X, r25
    47ee:	81 e4       	ldi	r24, 0x41	; 65
    47f0:	04 c0       	rjmp	.+8      	; 0x47fa <dtoa_prf+0xb6>
    47f2:	9e e6       	ldi	r25, 0x6E	; 110
    47f4:	d6 01       	movw	r26, r12
    47f6:	9c 93       	st	X, r25
    47f8:	81 e6       	ldi	r24, 0x61	; 97
    47fa:	11 96       	adiw	r26, 0x01	; 1
    47fc:	8c 93       	st	X, r24
    47fe:	91 83       	std	Z+1, r25	; 0x01
    4800:	32 96       	adiw	r30, 0x02	; 2
    4802:	df 01       	movw	r26, r30
    4804:	83 2f       	mov	r24, r19
    4806:	90 e2       	ldi	r25, 0x20	; 32
    4808:	02 c0       	rjmp	.+4      	; 0x480e <dtoa_prf+0xca>
    480a:	9d 93       	st	X+, r25
    480c:	81 50       	subi	r24, 0x01	; 1
    480e:	88 23       	and	r24, r24
    4810:	e1 f7       	brne	.-8      	; 0x480a <dtoa_prf+0xc6>
    4812:	e3 0f       	add	r30, r19
    4814:	f1 1d       	adc	r31, r1
    4816:	40 c0       	rjmp	.+128    	; 0x4898 <dtoa_prf+0x154>
    4818:	e2 fe       	sbrs	r14, 2
    481a:	42 c0       	rjmp	.+132    	; 0x48a0 <dtoa_prf+0x15c>
    481c:	aa 23       	and	r26, r26
    481e:	11 f4       	brne	.+4      	; 0x4824 <dtoa_prf+0xe0>
    4820:	23 e0       	ldi	r18, 0x03	; 3
    4822:	01 c0       	rjmp	.+2      	; 0x4826 <dtoa_prf+0xe2>
    4824:	24 e0       	ldi	r18, 0x04	; 4
    4826:	21 17       	cp	r18, r17
    4828:	10 f0       	brcs	.+4      	; 0x482e <dtoa_prf+0xea>
    482a:	20 e0       	ldi	r18, 0x00	; 0
    482c:	02 c0       	rjmp	.+4      	; 0x4832 <dtoa_prf+0xee>
    482e:	12 1b       	sub	r17, r18
    4830:	21 2f       	mov	r18, r17
    4832:	eb 2c       	mov	r14, r11
    4834:	b4 fe       	sbrs	r11, 4
    4836:	02 c0       	rjmp	.+4      	; 0x483c <dtoa_prf+0xf8>
    4838:	92 2f       	mov	r25, r18
    483a:	0a c0       	rjmp	.+20     	; 0x4850 <dtoa_prf+0x10c>
    483c:	f6 01       	movw	r30, r12
    483e:	92 2f       	mov	r25, r18
    4840:	80 e2       	ldi	r24, 0x20	; 32
    4842:	02 c0       	rjmp	.+4      	; 0x4848 <dtoa_prf+0x104>
    4844:	81 93       	st	Z+, r24
    4846:	91 50       	subi	r25, 0x01	; 1
    4848:	99 23       	and	r25, r25
    484a:	e1 f7       	brne	.-8      	; 0x4844 <dtoa_prf+0x100>
    484c:	c2 0e       	add	r12, r18
    484e:	d1 1c       	adc	r13, r1
    4850:	aa 23       	and	r26, r26
    4852:	19 f0       	breq	.+6      	; 0x485a <dtoa_prf+0x116>
    4854:	f6 01       	movw	r30, r12
    4856:	a1 93       	st	Z+, r26
    4858:	6f 01       	movw	r12, r30
    485a:	f6 01       	movw	r30, r12
    485c:	31 96       	adiw	r30, 0x01	; 1
    485e:	e2 fe       	sbrs	r14, 2
    4860:	08 c0       	rjmp	.+16     	; 0x4872 <dtoa_prf+0x12e>
    4862:	89 e4       	ldi	r24, 0x49	; 73
    4864:	d6 01       	movw	r26, r12
    4866:	8c 93       	st	X, r24
    4868:	8e e4       	ldi	r24, 0x4E	; 78
    486a:	11 96       	adiw	r26, 0x01	; 1
    486c:	8c 93       	st	X, r24
    486e:	86 e4       	ldi	r24, 0x46	; 70
    4870:	07 c0       	rjmp	.+14     	; 0x4880 <dtoa_prf+0x13c>
    4872:	89 e6       	ldi	r24, 0x69	; 105
    4874:	d6 01       	movw	r26, r12
    4876:	8c 93       	st	X, r24
    4878:	8e e6       	ldi	r24, 0x6E	; 110
    487a:	11 96       	adiw	r26, 0x01	; 1
    487c:	8c 93       	st	X, r24
    487e:	86 e6       	ldi	r24, 0x66	; 102
    4880:	81 83       	std	Z+1, r24	; 0x01
    4882:	32 96       	adiw	r30, 0x02	; 2
    4884:	df 01       	movw	r26, r30
    4886:	89 2f       	mov	r24, r25
    4888:	20 e2       	ldi	r18, 0x20	; 32
    488a:	02 c0       	rjmp	.+4      	; 0x4890 <dtoa_prf+0x14c>
    488c:	2d 93       	st	X+, r18
    488e:	81 50       	subi	r24, 0x01	; 1
    4890:	88 23       	and	r24, r24
    4892:	e1 f7       	brne	.-8      	; 0x488c <dtoa_prf+0x148>
    4894:	e9 0f       	add	r30, r25
    4896:	f1 1d       	adc	r31, r1
    4898:	10 82       	st	Z, r1
    489a:	2e ef       	ldi	r18, 0xFE	; 254
    489c:	3f ef       	ldi	r19, 0xFF	; 255
    489e:	af c0       	rjmp	.+350    	; 0x49fe <dtoa_prf+0x2ba>
    48a0:	16 16       	cp	r1, r22
    48a2:	17 06       	cpc	r1, r23
    48a4:	1c f0       	brlt	.+6      	; 0x48ac <dtoa_prf+0x168>
    48a6:	41 e0       	ldi	r20, 0x01	; 1
    48a8:	50 e0       	ldi	r21, 0x00	; 0
    48aa:	03 c0       	rjmp	.+6      	; 0x48b2 <dtoa_prf+0x16e>
    48ac:	ab 01       	movw	r20, r22
    48ae:	4f 5f       	subi	r20, 0xFF	; 255
    48b0:	5f 4f       	sbci	r21, 0xFF	; 255
    48b2:	aa 20       	and	r10, r10
    48b4:	19 f4       	brne	.+6      	; 0x48bc <dtoa_prf+0x178>
    48b6:	80 e0       	ldi	r24, 0x00	; 0
    48b8:	90 e0       	ldi	r25, 0x00	; 0
    48ba:	03 c0       	rjmp	.+6      	; 0x48c2 <dtoa_prf+0x17e>
    48bc:	8a 2d       	mov	r24, r10
    48be:	90 e0       	ldi	r25, 0x00	; 0
    48c0:	01 96       	adiw	r24, 0x01	; 1
    48c2:	20 e0       	ldi	r18, 0x00	; 0
    48c4:	30 e0       	ldi	r19, 0x00	; 0
    48c6:	aa 23       	and	r26, r26
    48c8:	11 f0       	breq	.+4      	; 0x48ce <dtoa_prf+0x18a>
    48ca:	21 e0       	ldi	r18, 0x01	; 1
    48cc:	30 e0       	ldi	r19, 0x00	; 0
    48ce:	24 0f       	add	r18, r20
    48d0:	35 1f       	adc	r19, r21
    48d2:	28 0f       	add	r18, r24
    48d4:	39 1f       	adc	r19, r25
    48d6:	81 2f       	mov	r24, r17
    48d8:	90 e0       	ldi	r25, 0x00	; 0
    48da:	28 17       	cp	r18, r24
    48dc:	39 07       	cpc	r19, r25
    48de:	14 f0       	brlt	.+4      	; 0x48e4 <dtoa_prf+0x1a0>
    48e0:	20 e0       	ldi	r18, 0x00	; 0
    48e2:	02 c0       	rjmp	.+4      	; 0x48e8 <dtoa_prf+0x1a4>
    48e4:	12 1b       	sub	r17, r18
    48e6:	21 2f       	mov	r18, r17
    48e8:	4b 2d       	mov	r20, r11
    48ea:	50 e0       	ldi	r21, 0x00	; 0
    48ec:	ca 01       	movw	r24, r20
    48ee:	80 71       	andi	r24, 0x10	; 16
    48f0:	90 70       	andi	r25, 0x00	; 0
    48f2:	b4 fc       	sbrc	r11, 4
    48f4:	0d c0       	rjmp	.+26     	; 0x4910 <dtoa_prf+0x1cc>
    48f6:	b3 fc       	sbrc	r11, 3
    48f8:	0b c0       	rjmp	.+22     	; 0x4910 <dtoa_prf+0x1cc>
    48fa:	f6 01       	movw	r30, r12
    48fc:	32 2f       	mov	r19, r18
    48fe:	40 e2       	ldi	r20, 0x20	; 32
    4900:	02 c0       	rjmp	.+4      	; 0x4906 <dtoa_prf+0x1c2>
    4902:	41 93       	st	Z+, r20
    4904:	31 50       	subi	r19, 0x01	; 1
    4906:	33 23       	and	r19, r19
    4908:	e1 f7       	brne	.-8      	; 0x4902 <dtoa_prf+0x1be>
    490a:	c2 0e       	add	r12, r18
    490c:	d1 1c       	adc	r13, r1
    490e:	01 c0       	rjmp	.+2      	; 0x4912 <dtoa_prf+0x1ce>
    4910:	32 2f       	mov	r19, r18
    4912:	aa 23       	and	r26, r26
    4914:	19 f0       	breq	.+6      	; 0x491c <dtoa_prf+0x1d8>
    4916:	f6 01       	movw	r30, r12
    4918:	a1 93       	st	Z+, r26
    491a:	6f 01       	movw	r12, r30
    491c:	89 2b       	or	r24, r25
    491e:	11 f0       	breq	.+4      	; 0x4924 <dtoa_prf+0x1e0>
    4920:	13 2f       	mov	r17, r19
    4922:	0a c0       	rjmp	.+20     	; 0x4938 <dtoa_prf+0x1f4>
    4924:	f6 01       	movw	r30, r12
    4926:	13 2f       	mov	r17, r19
    4928:	80 e3       	ldi	r24, 0x30	; 48
    492a:	02 c0       	rjmp	.+4      	; 0x4930 <dtoa_prf+0x1ec>
    492c:	81 93       	st	Z+, r24
    492e:	11 50       	subi	r17, 0x01	; 1
    4930:	11 23       	and	r17, r17
    4932:	e1 f7       	brne	.-8      	; 0x492c <dtoa_prf+0x1e8>
    4934:	c3 0e       	add	r12, r19
    4936:	d1 1c       	adc	r13, r1
    4938:	09 2d       	mov	r16, r9
    493a:	06 0f       	add	r16, r22
    493c:	ba 80       	ldd	r11, Y+2	; 0x02
    493e:	90 e1       	ldi	r25, 0x10	; 16
    4940:	89 2e       	mov	r8, r25
    4942:	91 2c       	mov	r9, r1
    4944:	8e 20       	and	r8, r14
    4946:	9f 20       	and	r9, r15
    4948:	e4 fe       	sbrs	r14, 4
    494a:	04 c0       	rjmp	.+8      	; 0x4954 <dtoa_prf+0x210>
    494c:	f1 e3       	ldi	r31, 0x31	; 49
    494e:	bf 16       	cp	r11, r31
    4950:	09 f4       	brne	.+2      	; 0x4954 <dtoa_prf+0x210>
    4952:	01 50       	subi	r16, 0x01	; 1
    4954:	10 16       	cp	r1, r16
    4956:	14 f0       	brlt	.+4      	; 0x495c <dtoa_prf+0x218>
    4958:	01 e0       	ldi	r16, 0x01	; 1
    495a:	03 c0       	rjmp	.+6      	; 0x4962 <dtoa_prf+0x21e>
    495c:	09 30       	cpi	r16, 0x09	; 9
    495e:	08 f0       	brcs	.+2      	; 0x4962 <dtoa_prf+0x21e>
    4960:	08 e0       	ldi	r16, 0x08	; 8
    4962:	9b 01       	movw	r18, r22
    4964:	77 ff       	sbrs	r23, 7
    4966:	02 c0       	rjmp	.+4      	; 0x496c <dtoa_prf+0x228>
    4968:	20 e0       	ldi	r18, 0x00	; 0
    496a:	30 e0       	ldi	r19, 0x00	; 0
    496c:	cb 01       	movw	r24, r22
    496e:	01 96       	adiw	r24, 0x01	; 1
    4970:	82 1b       	sub	r24, r18
    4972:	93 0b       	sbc	r25, r19
    4974:	fe 01       	movw	r30, r28
    4976:	31 96       	adiw	r30, 0x01	; 1
    4978:	e8 0f       	add	r30, r24
    497a:	f9 1f       	adc	r31, r25
    497c:	8e e2       	ldi	r24, 0x2E	; 46
    497e:	f8 2e       	mov	r15, r24
    4980:	3b 01       	movw	r6, r22
    4982:	60 1a       	sub	r6, r16
    4984:	71 08       	sbc	r7, r1
    4986:	8a 2d       	mov	r24, r10
    4988:	90 e0       	ldi	r25, 0x00	; 0
    498a:	44 27       	eor	r20, r20
    498c:	55 27       	eor	r21, r21
    498e:	48 1b       	sub	r20, r24
    4990:	59 0b       	sbc	r21, r25
    4992:	8f ef       	ldi	r24, 0xFF	; 255
    4994:	2f 3f       	cpi	r18, 0xFF	; 255
    4996:	38 07       	cpc	r19, r24
    4998:	19 f4       	brne	.+6      	; 0x49a0 <dtoa_prf+0x25c>
    499a:	d6 01       	movw	r26, r12
    499c:	fd 92       	st	X+, r15
    499e:	6d 01       	movw	r12, r26
    49a0:	62 17       	cp	r22, r18
    49a2:	73 07       	cpc	r23, r19
    49a4:	2c f0       	brlt	.+10     	; 0x49b0 <dtoa_prf+0x26c>
    49a6:	62 16       	cp	r6, r18
    49a8:	73 06       	cpc	r7, r19
    49aa:	14 f4       	brge	.+4      	; 0x49b0 <dtoa_prf+0x26c>
    49ac:	80 81       	ld	r24, Z
    49ae:	01 c0       	rjmp	.+2      	; 0x49b2 <dtoa_prf+0x26e>
    49b0:	80 e3       	ldi	r24, 0x30	; 48
    49b2:	21 50       	subi	r18, 0x01	; 1
    49b4:	30 40       	sbci	r19, 0x00	; 0
    49b6:	31 96       	adiw	r30, 0x01	; 1
    49b8:	24 17       	cp	r18, r20
    49ba:	35 07       	cpc	r19, r21
    49bc:	24 f0       	brlt	.+8      	; 0x49c6 <dtoa_prf+0x282>
    49be:	d6 01       	movw	r26, r12
    49c0:	8d 93       	st	X+, r24
    49c2:	6d 01       	movw	r12, r26
    49c4:	e6 cf       	rjmp	.-52     	; 0x4992 <dtoa_prf+0x24e>
    49c6:	26 17       	cp	r18, r22
    49c8:	37 07       	cpc	r19, r23
    49ca:	49 f4       	brne	.+18     	; 0x49de <dtoa_prf+0x29a>
    49cc:	b5 e3       	ldi	r27, 0x35	; 53
    49ce:	bb 15       	cp	r27, r11
    49d0:	28 f0       	brcs	.+10     	; 0x49dc <dtoa_prf+0x298>
    49d2:	bb 16       	cp	r11, r27
    49d4:	21 f4       	brne	.+8      	; 0x49de <dtoa_prf+0x29a>
    49d6:	81 14       	cp	r8, r1
    49d8:	91 04       	cpc	r9, r1
    49da:	09 f4       	brne	.+2      	; 0x49de <dtoa_prf+0x29a>
    49dc:	81 e3       	ldi	r24, 0x31	; 49
    49de:	f6 01       	movw	r30, r12
    49e0:	81 93       	st	Z+, r24
    49e2:	d6 01       	movw	r26, r12
    49e4:	81 2f       	mov	r24, r17
    49e6:	90 e2       	ldi	r25, 0x20	; 32
    49e8:	02 c0       	rjmp	.+4      	; 0x49ee <dtoa_prf+0x2aa>
    49ea:	9c 93       	st	X, r25
    49ec:	81 50       	subi	r24, 0x01	; 1
    49ee:	11 96       	adiw	r26, 0x01	; 1
    49f0:	88 23       	and	r24, r24
    49f2:	d9 f7       	brne	.-10     	; 0x49ea <dtoa_prf+0x2a6>
    49f4:	e1 0f       	add	r30, r17
    49f6:	f1 1d       	adc	r31, r1
    49f8:	10 82       	st	Z, r1
    49fa:	20 e0       	ldi	r18, 0x00	; 0
    49fc:	30 e0       	ldi	r19, 0x00	; 0
    49fe:	c9 01       	movw	r24, r18
    4a00:	29 96       	adiw	r28, 0x09	; 9
    4a02:	ee e0       	ldi	r30, 0x0E	; 14
    4a04:	0c 94 a6 22 	jmp	0x454c	; 0x454c <__epilogue_restores__+0x8>

00004a08 <__ftoa_engine>:
    4a08:	28 30       	cpi	r18, 0x08	; 8
    4a0a:	08 f0       	brcs	.+2      	; 0x4a0e <__ftoa_engine+0x6>
    4a0c:	27 e0       	ldi	r18, 0x07	; 7
    4a0e:	33 27       	eor	r19, r19
    4a10:	da 01       	movw	r26, r20
    4a12:	99 0f       	add	r25, r25
    4a14:	31 1d       	adc	r19, r1
    4a16:	87 fd       	sbrc	r24, 7
    4a18:	91 60       	ori	r25, 0x01	; 1
    4a1a:	00 96       	adiw	r24, 0x00	; 0
    4a1c:	61 05       	cpc	r22, r1
    4a1e:	71 05       	cpc	r23, r1
    4a20:	39 f4       	brne	.+14     	; 0x4a30 <__ftoa_engine+0x28>
    4a22:	32 60       	ori	r19, 0x02	; 2
    4a24:	2e 5f       	subi	r18, 0xFE	; 254
    4a26:	3d 93       	st	X+, r19
    4a28:	30 e3       	ldi	r19, 0x30	; 48
    4a2a:	2a 95       	dec	r18
    4a2c:	e1 f7       	brne	.-8      	; 0x4a26 <__ftoa_engine+0x1e>
    4a2e:	08 95       	ret
    4a30:	9f 3f       	cpi	r25, 0xFF	; 255
    4a32:	30 f0       	brcs	.+12     	; 0x4a40 <__ftoa_engine+0x38>
    4a34:	80 38       	cpi	r24, 0x80	; 128
    4a36:	71 05       	cpc	r23, r1
    4a38:	61 05       	cpc	r22, r1
    4a3a:	09 f0       	breq	.+2      	; 0x4a3e <__ftoa_engine+0x36>
    4a3c:	3c 5f       	subi	r19, 0xFC	; 252
    4a3e:	3c 5f       	subi	r19, 0xFC	; 252
    4a40:	3d 93       	st	X+, r19
    4a42:	91 30       	cpi	r25, 0x01	; 1
    4a44:	08 f0       	brcs	.+2      	; 0x4a48 <__ftoa_engine+0x40>
    4a46:	80 68       	ori	r24, 0x80	; 128
    4a48:	91 1d       	adc	r25, r1
    4a4a:	df 93       	push	r29
    4a4c:	cf 93       	push	r28
    4a4e:	1f 93       	push	r17
    4a50:	0f 93       	push	r16
    4a52:	ff 92       	push	r15
    4a54:	ef 92       	push	r14
    4a56:	19 2f       	mov	r17, r25
    4a58:	98 7f       	andi	r25, 0xF8	; 248
    4a5a:	96 95       	lsr	r25
    4a5c:	e9 2f       	mov	r30, r25
    4a5e:	96 95       	lsr	r25
    4a60:	96 95       	lsr	r25
    4a62:	e9 0f       	add	r30, r25
    4a64:	ff 27       	eor	r31, r31
    4a66:	e2 55       	subi	r30, 0x52	; 82
    4a68:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6a:	99 27       	eor	r25, r25
    4a6c:	33 27       	eor	r19, r19
    4a6e:	ee 24       	eor	r14, r14
    4a70:	ff 24       	eor	r15, r15
    4a72:	a7 01       	movw	r20, r14
    4a74:	e7 01       	movw	r28, r14
    4a76:	05 90       	lpm	r0, Z+
    4a78:	08 94       	sec
    4a7a:	07 94       	ror	r0
    4a7c:	28 f4       	brcc	.+10     	; 0x4a88 <__ftoa_engine+0x80>
    4a7e:	36 0f       	add	r19, r22
    4a80:	e7 1e       	adc	r14, r23
    4a82:	f8 1e       	adc	r15, r24
    4a84:	49 1f       	adc	r20, r25
    4a86:	51 1d       	adc	r21, r1
    4a88:	66 0f       	add	r22, r22
    4a8a:	77 1f       	adc	r23, r23
    4a8c:	88 1f       	adc	r24, r24
    4a8e:	99 1f       	adc	r25, r25
    4a90:	06 94       	lsr	r0
    4a92:	a1 f7       	brne	.-24     	; 0x4a7c <__ftoa_engine+0x74>
    4a94:	05 90       	lpm	r0, Z+
    4a96:	07 94       	ror	r0
    4a98:	28 f4       	brcc	.+10     	; 0x4aa4 <__ftoa_engine+0x9c>
    4a9a:	e7 0e       	add	r14, r23
    4a9c:	f8 1e       	adc	r15, r24
    4a9e:	49 1f       	adc	r20, r25
    4aa0:	56 1f       	adc	r21, r22
    4aa2:	c1 1d       	adc	r28, r1
    4aa4:	77 0f       	add	r23, r23
    4aa6:	88 1f       	adc	r24, r24
    4aa8:	99 1f       	adc	r25, r25
    4aaa:	66 1f       	adc	r22, r22
    4aac:	06 94       	lsr	r0
    4aae:	a1 f7       	brne	.-24     	; 0x4a98 <__ftoa_engine+0x90>
    4ab0:	05 90       	lpm	r0, Z+
    4ab2:	07 94       	ror	r0
    4ab4:	28 f4       	brcc	.+10     	; 0x4ac0 <__ftoa_engine+0xb8>
    4ab6:	f8 0e       	add	r15, r24
    4ab8:	49 1f       	adc	r20, r25
    4aba:	56 1f       	adc	r21, r22
    4abc:	c7 1f       	adc	r28, r23
    4abe:	d1 1d       	adc	r29, r1
    4ac0:	88 0f       	add	r24, r24
    4ac2:	99 1f       	adc	r25, r25
    4ac4:	66 1f       	adc	r22, r22
    4ac6:	77 1f       	adc	r23, r23
    4ac8:	06 94       	lsr	r0
    4aca:	a1 f7       	brne	.-24     	; 0x4ab4 <__ftoa_engine+0xac>
    4acc:	05 90       	lpm	r0, Z+
    4ace:	07 94       	ror	r0
    4ad0:	20 f4       	brcc	.+8      	; 0x4ada <__ftoa_engine+0xd2>
    4ad2:	49 0f       	add	r20, r25
    4ad4:	56 1f       	adc	r21, r22
    4ad6:	c7 1f       	adc	r28, r23
    4ad8:	d8 1f       	adc	r29, r24
    4ada:	99 0f       	add	r25, r25
    4adc:	66 1f       	adc	r22, r22
    4ade:	77 1f       	adc	r23, r23
    4ae0:	88 1f       	adc	r24, r24
    4ae2:	06 94       	lsr	r0
    4ae4:	a9 f7       	brne	.-22     	; 0x4ad0 <__ftoa_engine+0xc8>
    4ae6:	84 91       	lpm	r24, Z+
    4ae8:	10 95       	com	r17
    4aea:	17 70       	andi	r17, 0x07	; 7
    4aec:	41 f0       	breq	.+16     	; 0x4afe <__ftoa_engine+0xf6>
    4aee:	d6 95       	lsr	r29
    4af0:	c7 95       	ror	r28
    4af2:	57 95       	ror	r21
    4af4:	47 95       	ror	r20
    4af6:	f7 94       	ror	r15
    4af8:	e7 94       	ror	r14
    4afa:	1a 95       	dec	r17
    4afc:	c1 f7       	brne	.-16     	; 0x4aee <__ftoa_engine+0xe6>
    4afe:	e4 e5       	ldi	r30, 0x54	; 84
    4b00:	f0 e0       	ldi	r31, 0x00	; 0
    4b02:	68 94       	set
    4b04:	15 90       	lpm	r1, Z+
    4b06:	15 91       	lpm	r17, Z+
    4b08:	35 91       	lpm	r19, Z+
    4b0a:	65 91       	lpm	r22, Z+
    4b0c:	95 91       	lpm	r25, Z+
    4b0e:	05 90       	lpm	r0, Z+
    4b10:	7f e2       	ldi	r23, 0x2F	; 47
    4b12:	73 95       	inc	r23
    4b14:	e1 18       	sub	r14, r1
    4b16:	f1 0a       	sbc	r15, r17
    4b18:	43 0b       	sbc	r20, r19
    4b1a:	56 0b       	sbc	r21, r22
    4b1c:	c9 0b       	sbc	r28, r25
    4b1e:	d0 09       	sbc	r29, r0
    4b20:	c0 f7       	brcc	.-16     	; 0x4b12 <__ftoa_engine+0x10a>
    4b22:	e1 0c       	add	r14, r1
    4b24:	f1 1e       	adc	r15, r17
    4b26:	43 1f       	adc	r20, r19
    4b28:	56 1f       	adc	r21, r22
    4b2a:	c9 1f       	adc	r28, r25
    4b2c:	d0 1d       	adc	r29, r0
    4b2e:	7e f4       	brtc	.+30     	; 0x4b4e <__ftoa_engine+0x146>
    4b30:	70 33       	cpi	r23, 0x30	; 48
    4b32:	11 f4       	brne	.+4      	; 0x4b38 <__ftoa_engine+0x130>
    4b34:	8a 95       	dec	r24
    4b36:	e6 cf       	rjmp	.-52     	; 0x4b04 <__ftoa_engine+0xfc>
    4b38:	e8 94       	clt
    4b3a:	01 50       	subi	r16, 0x01	; 1
    4b3c:	30 f0       	brcs	.+12     	; 0x4b4a <__ftoa_engine+0x142>
    4b3e:	08 0f       	add	r16, r24
    4b40:	0a f4       	brpl	.+2      	; 0x4b44 <__ftoa_engine+0x13c>
    4b42:	00 27       	eor	r16, r16
    4b44:	02 17       	cp	r16, r18
    4b46:	08 f4       	brcc	.+2      	; 0x4b4a <__ftoa_engine+0x142>
    4b48:	20 2f       	mov	r18, r16
    4b4a:	23 95       	inc	r18
    4b4c:	02 2f       	mov	r16, r18
    4b4e:	7a 33       	cpi	r23, 0x3A	; 58
    4b50:	28 f0       	brcs	.+10     	; 0x4b5c <__ftoa_engine+0x154>
    4b52:	79 e3       	ldi	r23, 0x39	; 57
    4b54:	7d 93       	st	X+, r23
    4b56:	2a 95       	dec	r18
    4b58:	e9 f7       	brne	.-6      	; 0x4b54 <__ftoa_engine+0x14c>
    4b5a:	10 c0       	rjmp	.+32     	; 0x4b7c <__ftoa_engine+0x174>
    4b5c:	7d 93       	st	X+, r23
    4b5e:	2a 95       	dec	r18
    4b60:	89 f6       	brne	.-94     	; 0x4b04 <__ftoa_engine+0xfc>
    4b62:	06 94       	lsr	r0
    4b64:	97 95       	ror	r25
    4b66:	67 95       	ror	r22
    4b68:	37 95       	ror	r19
    4b6a:	17 95       	ror	r17
    4b6c:	17 94       	ror	r1
    4b6e:	e1 18       	sub	r14, r1
    4b70:	f1 0a       	sbc	r15, r17
    4b72:	43 0b       	sbc	r20, r19
    4b74:	56 0b       	sbc	r21, r22
    4b76:	c9 0b       	sbc	r28, r25
    4b78:	d0 09       	sbc	r29, r0
    4b7a:	98 f0       	brcs	.+38     	; 0x4ba2 <__ftoa_engine+0x19a>
    4b7c:	23 95       	inc	r18
    4b7e:	7e 91       	ld	r23, -X
    4b80:	73 95       	inc	r23
    4b82:	7a 33       	cpi	r23, 0x3A	; 58
    4b84:	08 f0       	brcs	.+2      	; 0x4b88 <__ftoa_engine+0x180>
    4b86:	70 e3       	ldi	r23, 0x30	; 48
    4b88:	7c 93       	st	X, r23
    4b8a:	20 13       	cpse	r18, r16
    4b8c:	b8 f7       	brcc	.-18     	; 0x4b7c <__ftoa_engine+0x174>
    4b8e:	7e 91       	ld	r23, -X
    4b90:	70 61       	ori	r23, 0x10	; 16
    4b92:	7d 93       	st	X+, r23
    4b94:	30 f0       	brcs	.+12     	; 0x4ba2 <__ftoa_engine+0x19a>
    4b96:	83 95       	inc	r24
    4b98:	71 e3       	ldi	r23, 0x31	; 49
    4b9a:	7d 93       	st	X+, r23
    4b9c:	70 e3       	ldi	r23, 0x30	; 48
    4b9e:	2a 95       	dec	r18
    4ba0:	e1 f7       	brne	.-8      	; 0x4b9a <__ftoa_engine+0x192>
    4ba2:	11 24       	eor	r1, r1
    4ba4:	ef 90       	pop	r14
    4ba6:	ff 90       	pop	r15
    4ba8:	0f 91       	pop	r16
    4baa:	1f 91       	pop	r17
    4bac:	cf 91       	pop	r28
    4bae:	df 91       	pop	r29
    4bb0:	99 27       	eor	r25, r25
    4bb2:	87 fd       	sbrc	r24, 7
    4bb4:	90 95       	com	r25
    4bb6:	08 95       	ret

00004bb8 <strrev>:
    4bb8:	dc 01       	movw	r26, r24
    4bba:	fc 01       	movw	r30, r24
    4bbc:	67 2f       	mov	r22, r23
    4bbe:	71 91       	ld	r23, Z+
    4bc0:	77 23       	and	r23, r23
    4bc2:	e1 f7       	brne	.-8      	; 0x4bbc <strrev+0x4>
    4bc4:	32 97       	sbiw	r30, 0x02	; 2
    4bc6:	04 c0       	rjmp	.+8      	; 0x4bd0 <strrev+0x18>
    4bc8:	7c 91       	ld	r23, X
    4bca:	6d 93       	st	X+, r22
    4bcc:	70 83       	st	Z, r23
    4bce:	62 91       	ld	r22, -Z
    4bd0:	ae 17       	cp	r26, r30
    4bd2:	bf 07       	cpc	r27, r31
    4bd4:	c8 f3       	brcs	.-14     	; 0x4bc8 <strrev+0x10>
    4bd6:	08 95       	ret

00004bd8 <__fp_mpack>:
    4bd8:	9f 3f       	cpi	r25, 0xFF	; 255
    4bda:	31 f0       	breq	.+12     	; 0x4be8 <__fp_mpack_finite+0xc>

00004bdc <__fp_mpack_finite>:
    4bdc:	91 50       	subi	r25, 0x01	; 1
    4bde:	20 f4       	brcc	.+8      	; 0x4be8 <__fp_mpack_finite+0xc>
    4be0:	87 95       	ror	r24
    4be2:	77 95       	ror	r23
    4be4:	67 95       	ror	r22
    4be6:	b7 95       	ror	r27
    4be8:	88 0f       	add	r24, r24
    4bea:	91 1d       	adc	r25, r1
    4bec:	96 95       	lsr	r25
    4bee:	87 95       	ror	r24
    4bf0:	97 f9       	bld	r25, 7
    4bf2:	08 95       	ret

00004bf4 <__fp_nan>:
    4bf4:	9f ef       	ldi	r25, 0xFF	; 255
    4bf6:	80 ec       	ldi	r24, 0xC0	; 192
    4bf8:	08 95       	ret

00004bfa <__fp_norm2>:
    4bfa:	91 50       	subi	r25, 0x01	; 1
    4bfc:	50 40       	sbci	r21, 0x00	; 0
    4bfe:	66 0f       	add	r22, r22
    4c00:	77 1f       	adc	r23, r23
    4c02:	88 1f       	adc	r24, r24
    4c04:	d2 f7       	brpl	.-12     	; 0x4bfa <__fp_norm2>
    4c06:	08 95       	ret

00004c08 <__fp_split3>:
    4c08:	57 fd       	sbrc	r21, 7
    4c0a:	90 58       	subi	r25, 0x80	; 128
    4c0c:	44 0f       	add	r20, r20
    4c0e:	55 1f       	adc	r21, r21
    4c10:	59 f0       	breq	.+22     	; 0x4c28 <__fp_splitA+0x10>
    4c12:	5f 3f       	cpi	r21, 0xFF	; 255
    4c14:	71 f0       	breq	.+28     	; 0x4c32 <__fp_splitA+0x1a>
    4c16:	47 95       	ror	r20

00004c18 <__fp_splitA>:
    4c18:	88 0f       	add	r24, r24
    4c1a:	97 fb       	bst	r25, 7
    4c1c:	99 1f       	adc	r25, r25
    4c1e:	61 f0       	breq	.+24     	; 0x4c38 <__fp_splitA+0x20>
    4c20:	9f 3f       	cpi	r25, 0xFF	; 255
    4c22:	79 f0       	breq	.+30     	; 0x4c42 <__fp_splitA+0x2a>
    4c24:	87 95       	ror	r24
    4c26:	08 95       	ret
    4c28:	12 16       	cp	r1, r18
    4c2a:	13 06       	cpc	r1, r19
    4c2c:	14 06       	cpc	r1, r20
    4c2e:	55 1f       	adc	r21, r21
    4c30:	f2 cf       	rjmp	.-28     	; 0x4c16 <__fp_split3+0xe>
    4c32:	46 95       	lsr	r20
    4c34:	f1 df       	rcall	.-30     	; 0x4c18 <__fp_splitA>
    4c36:	08 c0       	rjmp	.+16     	; 0x4c48 <__fp_splitA+0x30>
    4c38:	16 16       	cp	r1, r22
    4c3a:	17 06       	cpc	r1, r23
    4c3c:	18 06       	cpc	r1, r24
    4c3e:	99 1f       	adc	r25, r25
    4c40:	f1 cf       	rjmp	.-30     	; 0x4c24 <__fp_splitA+0xc>
    4c42:	86 95       	lsr	r24
    4c44:	71 05       	cpc	r23, r1
    4c46:	61 05       	cpc	r22, r1
    4c48:	08 94       	sec
    4c4a:	08 95       	ret

00004c4c <__mulsi3>:
    4c4c:	62 9f       	mul	r22, r18
    4c4e:	d0 01       	movw	r26, r0
    4c50:	73 9f       	mul	r23, r19
    4c52:	f0 01       	movw	r30, r0
    4c54:	82 9f       	mul	r24, r18
    4c56:	e0 0d       	add	r30, r0
    4c58:	f1 1d       	adc	r31, r1
    4c5a:	64 9f       	mul	r22, r20
    4c5c:	e0 0d       	add	r30, r0
    4c5e:	f1 1d       	adc	r31, r1
    4c60:	92 9f       	mul	r25, r18
    4c62:	f0 0d       	add	r31, r0
    4c64:	83 9f       	mul	r24, r19
    4c66:	f0 0d       	add	r31, r0
    4c68:	74 9f       	mul	r23, r20
    4c6a:	f0 0d       	add	r31, r0
    4c6c:	65 9f       	mul	r22, r21
    4c6e:	f0 0d       	add	r31, r0
    4c70:	99 27       	eor	r25, r25
    4c72:	72 9f       	mul	r23, r18
    4c74:	b0 0d       	add	r27, r0
    4c76:	e1 1d       	adc	r30, r1
    4c78:	f9 1f       	adc	r31, r25
    4c7a:	63 9f       	mul	r22, r19
    4c7c:	b0 0d       	add	r27, r0
    4c7e:	e1 1d       	adc	r30, r1
    4c80:	f9 1f       	adc	r31, r25
    4c82:	bd 01       	movw	r22, r26
    4c84:	cf 01       	movw	r24, r30
    4c86:	11 24       	eor	r1, r1
    4c88:	08 95       	ret

00004c8a <__divmodsi4>:
    4c8a:	97 fb       	bst	r25, 7
    4c8c:	09 2e       	mov	r0, r25
    4c8e:	05 26       	eor	r0, r21
    4c90:	0e d0       	rcall	.+28     	; 0x4cae <__divmodsi4_neg1>
    4c92:	57 fd       	sbrc	r21, 7
    4c94:	04 d0       	rcall	.+8      	; 0x4c9e <__divmodsi4_neg2>
    4c96:	14 d0       	rcall	.+40     	; 0x4cc0 <__udivmodsi4>
    4c98:	0a d0       	rcall	.+20     	; 0x4cae <__divmodsi4_neg1>
    4c9a:	00 1c       	adc	r0, r0
    4c9c:	38 f4       	brcc	.+14     	; 0x4cac <__divmodsi4_exit>

00004c9e <__divmodsi4_neg2>:
    4c9e:	50 95       	com	r21
    4ca0:	40 95       	com	r20
    4ca2:	30 95       	com	r19
    4ca4:	21 95       	neg	r18
    4ca6:	3f 4f       	sbci	r19, 0xFF	; 255
    4ca8:	4f 4f       	sbci	r20, 0xFF	; 255
    4caa:	5f 4f       	sbci	r21, 0xFF	; 255

00004cac <__divmodsi4_exit>:
    4cac:	08 95       	ret

00004cae <__divmodsi4_neg1>:
    4cae:	f6 f7       	brtc	.-4      	; 0x4cac <__divmodsi4_exit>
    4cb0:	90 95       	com	r25
    4cb2:	80 95       	com	r24
    4cb4:	70 95       	com	r23
    4cb6:	61 95       	neg	r22
    4cb8:	7f 4f       	sbci	r23, 0xFF	; 255
    4cba:	8f 4f       	sbci	r24, 0xFF	; 255
    4cbc:	9f 4f       	sbci	r25, 0xFF	; 255
    4cbe:	08 95       	ret

00004cc0 <__udivmodsi4>:
    4cc0:	a1 e2       	ldi	r26, 0x21	; 33
    4cc2:	1a 2e       	mov	r1, r26
    4cc4:	aa 1b       	sub	r26, r26
    4cc6:	bb 1b       	sub	r27, r27
    4cc8:	fd 01       	movw	r30, r26
    4cca:	0d c0       	rjmp	.+26     	; 0x4ce6 <__udivmodsi4_ep>

00004ccc <__udivmodsi4_loop>:
    4ccc:	aa 1f       	adc	r26, r26
    4cce:	bb 1f       	adc	r27, r27
    4cd0:	ee 1f       	adc	r30, r30
    4cd2:	ff 1f       	adc	r31, r31
    4cd4:	a2 17       	cp	r26, r18
    4cd6:	b3 07       	cpc	r27, r19
    4cd8:	e4 07       	cpc	r30, r20
    4cda:	f5 07       	cpc	r31, r21
    4cdc:	20 f0       	brcs	.+8      	; 0x4ce6 <__udivmodsi4_ep>
    4cde:	a2 1b       	sub	r26, r18
    4ce0:	b3 0b       	sbc	r27, r19
    4ce2:	e4 0b       	sbc	r30, r20
    4ce4:	f5 0b       	sbc	r31, r21

00004ce6 <__udivmodsi4_ep>:
    4ce6:	66 1f       	adc	r22, r22
    4ce8:	77 1f       	adc	r23, r23
    4cea:	88 1f       	adc	r24, r24
    4cec:	99 1f       	adc	r25, r25
    4cee:	1a 94       	dec	r1
    4cf0:	69 f7       	brne	.-38     	; 0x4ccc <__udivmodsi4_loop>
    4cf2:	60 95       	com	r22
    4cf4:	70 95       	com	r23
    4cf6:	80 95       	com	r24
    4cf8:	90 95       	com	r25
    4cfa:	9b 01       	movw	r18, r22
    4cfc:	ac 01       	movw	r20, r24
    4cfe:	bd 01       	movw	r22, r26
    4d00:	cf 01       	movw	r24, r30
    4d02:	08 95       	ret

00004d04 <_exit>:
    4d04:	f8 94       	cli

00004d06 <__stop_program>:
    4d06:	ff cf       	rjmp	.-2      	; 0x4d06 <__stop_program>
