
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000048fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  000048fa  0000498e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005e  0080017a  0080017a  00004aa8  2**0
                  ALLOC
  3 .stab         00003540  00000000  00000000  00004aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013dd  00000000  00000000  00007fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000093c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00009565  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00009757  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000bb62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000cee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e0c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000e280  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000e576  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000eee4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 94 07 	jmp	0xf28	; 0xf28 <__vector_1>
       8:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <__vector_2>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__vector_18>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__fixsfsi+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d4 e0       	ldi	r29, 0x04	; 4
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ea ef       	ldi	r30, 0xFA	; 250
     162:	f8 e4       	ldi	r31, 0x48	; 72
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	aa 37       	cpi	r26, 0x7A	; 122
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	aa e7       	ldi	r26, 0x7A	; 122
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a8 3d       	cpi	r26, 0xD8	; 216
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 cb 20 	call	0x4196	; 0x4196 <main>
     184:	0c 94 7b 24 	jmp	0x48f6	; 0x48f6 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 fb 20 	jmp	0x41f6	; 0x41f6 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <__stack+0x11>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <__stack+0xf>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <__stack+0x11>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <__stack+0x11>
     220:	aa e6       	ldi	r26, 0x6A	; 106
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <__stack+0x11>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <__stack+0xf>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <__stack+0x11>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <__stack+0xb>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <__stack+0xf>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <__stack+0xb>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <__stack+0x11>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 17 21 	jmp	0x422e	; 0x422e <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 07 21 	jmp	0x420e	; 0x420e <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 23 21 	jmp	0x4246	; 0x4246 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 07 21 	jmp	0x420e	; 0x420e <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 23 21 	jmp	0x4246	; 0x4246 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 fb 20 	jmp	0x41f6	; 0x41f6 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	8a e6       	ldi	r24, 0x6A	; 106
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 17 21 	jmp	0x422e	; 0x422e <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 03 21 	jmp	0x4206	; 0x4206 <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__divsf3+0x144>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__divsf3+0x14a>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__divsf3+0x144>
     794:	6a e6       	ldi	r22, 0x6A	; 106
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__divsf3+0x14a>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__divsf3+0x14a>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__divsf3+0x13c>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__divsf3+0x13c>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__divsf3+0x13c>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 1f 21 	jmp	0x423e	; 0x423e <__epilogue_restores__+0x10>

00000884 <__gtsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 07 21 	jmp	0x420e	; 0x420e <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__gtsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__gtsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__gtsf2+0x58>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 23 21 	jmp	0x4246	; 0x4246 <__epilogue_restores__+0x18>

000008e4 <__gesf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 07 21 	jmp	0x420e	; 0x420e <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gesf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gesf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gesf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 23 21 	jmp	0x4246	; 0x4246 <__epilogue_restores__+0x18>

00000944 <__ltsf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 07 21 	jmp	0x420e	; 0x420e <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__ltsf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__ltsf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__ltsf2+0x58>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 23 21 	jmp	0x4246	; 0x4246 <__epilogue_restores__+0x18>

000009a4 <__fixsfsi>:
     9a4:	ac e0       	ldi	r26, 0x0C	; 12
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__prologue_saves__+0x20>
     9b0:	69 83       	std	Y+1, r22	; 0x01
     9b2:	7a 83       	std	Y+2, r23	; 0x02
     9b4:	8b 83       	std	Y+3, r24	; 0x03
     9b6:	9c 83       	std	Y+4, r25	; 0x04
     9b8:	ce 01       	movw	r24, r28
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	be 01       	movw	r22, r28
     9be:	6b 5f       	subi	r22, 0xFB	; 251
     9c0:	7f 4f       	sbci	r23, 0xFF	; 255
     9c2:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     9c6:	8d 81       	ldd	r24, Y+5	; 0x05
     9c8:	82 30       	cpi	r24, 0x02	; 2
     9ca:	61 f1       	breq	.+88     	; 0xa24 <__fixsfsi+0x80>
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	50 f1       	brcs	.+84     	; 0xa24 <__fixsfsi+0x80>
     9d0:	84 30       	cpi	r24, 0x04	; 4
     9d2:	21 f4       	brne	.+8      	; 0x9dc <__fixsfsi+0x38>
     9d4:	8e 81       	ldd	r24, Y+6	; 0x06
     9d6:	88 23       	and	r24, r24
     9d8:	51 f1       	breq	.+84     	; 0xa2e <__fixsfsi+0x8a>
     9da:	2e c0       	rjmp	.+92     	; 0xa38 <__fixsfsi+0x94>
     9dc:	2f 81       	ldd	r18, Y+7	; 0x07
     9de:	38 85       	ldd	r19, Y+8	; 0x08
     9e0:	37 fd       	sbrc	r19, 7
     9e2:	20 c0       	rjmp	.+64     	; 0xa24 <__fixsfsi+0x80>
     9e4:	6e 81       	ldd	r22, Y+6	; 0x06
     9e6:	2f 31       	cpi	r18, 0x1F	; 31
     9e8:	31 05       	cpc	r19, r1
     9ea:	1c f0       	brlt	.+6      	; 0x9f2 <__fixsfsi+0x4e>
     9ec:	66 23       	and	r22, r22
     9ee:	f9 f0       	breq	.+62     	; 0xa2e <__fixsfsi+0x8a>
     9f0:	23 c0       	rjmp	.+70     	; 0xa38 <__fixsfsi+0x94>
     9f2:	8e e1       	ldi	r24, 0x1E	; 30
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	82 1b       	sub	r24, r18
     9f8:	93 0b       	sbc	r25, r19
     9fa:	29 85       	ldd	r18, Y+9	; 0x09
     9fc:	3a 85       	ldd	r19, Y+10	; 0x0a
     9fe:	4b 85       	ldd	r20, Y+11	; 0x0b
     a00:	5c 85       	ldd	r21, Y+12	; 0x0c
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__fixsfsi+0x68>
     a04:	56 95       	lsr	r21
     a06:	47 95       	ror	r20
     a08:	37 95       	ror	r19
     a0a:	27 95       	ror	r18
     a0c:	8a 95       	dec	r24
     a0e:	d2 f7       	brpl	.-12     	; 0xa04 <__fixsfsi+0x60>
     a10:	66 23       	and	r22, r22
     a12:	b1 f0       	breq	.+44     	; 0xa40 <__fixsfsi+0x9c>
     a14:	50 95       	com	r21
     a16:	40 95       	com	r20
     a18:	30 95       	com	r19
     a1a:	21 95       	neg	r18
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	4f 4f       	sbci	r20, 0xFF	; 255
     a20:	5f 4f       	sbci	r21, 0xFF	; 255
     a22:	0e c0       	rjmp	.+28     	; 0xa40 <__fixsfsi+0x9c>
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	09 c0       	rjmp	.+18     	; 0xa40 <__fixsfsi+0x9c>
     a2e:	2f ef       	ldi	r18, 0xFF	; 255
     a30:	3f ef       	ldi	r19, 0xFF	; 255
     a32:	4f ef       	ldi	r20, 0xFF	; 255
     a34:	5f e7       	ldi	r21, 0x7F	; 127
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <__fixsfsi+0x9c>
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	50 e8       	ldi	r21, 0x80	; 128
     a40:	b9 01       	movw	r22, r18
     a42:	ca 01       	movw	r24, r20
     a44:	2c 96       	adiw	r28, 0x0c	; 12
     a46:	e2 e0       	ldi	r30, 0x02	; 2
     a48:	0c 94 27 21 	jmp	0x424e	; 0x424e <__epilogue_restores__+0x20>

00000a4c <__floatunsisf>:
     a4c:	a8 e0       	ldi	r26, 0x08	; 8
     a4e:	b0 e0       	ldi	r27, 0x00	; 0
     a50:	ec e2       	ldi	r30, 0x2C	; 44
     a52:	f5 e0       	ldi	r31, 0x05	; 5
     a54:	0c 94 03 21 	jmp	0x4206	; 0x4206 <__prologue_saves__+0x10>
     a58:	7b 01       	movw	r14, r22
     a5a:	8c 01       	movw	r16, r24
     a5c:	61 15       	cp	r22, r1
     a5e:	71 05       	cpc	r23, r1
     a60:	81 05       	cpc	r24, r1
     a62:	91 05       	cpc	r25, r1
     a64:	19 f4       	brne	.+6      	; 0xa6c <__floatunsisf+0x20>
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	89 83       	std	Y+1, r24	; 0x01
     a6a:	60 c0       	rjmp	.+192    	; 0xb2c <__floatunsisf+0xe0>
     a6c:	83 e0       	ldi	r24, 0x03	; 3
     a6e:	89 83       	std	Y+1, r24	; 0x01
     a70:	8e e1       	ldi	r24, 0x1E	; 30
     a72:	c8 2e       	mov	r12, r24
     a74:	d1 2c       	mov	r13, r1
     a76:	dc 82       	std	Y+4, r13	; 0x04
     a78:	cb 82       	std	Y+3, r12	; 0x03
     a7a:	ed 82       	std	Y+5, r14	; 0x05
     a7c:	fe 82       	std	Y+6, r15	; 0x06
     a7e:	0f 83       	std	Y+7, r16	; 0x07
     a80:	18 87       	std	Y+8, r17	; 0x08
     a82:	c8 01       	movw	r24, r16
     a84:	b7 01       	movw	r22, r14
     a86:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__clzsi2>
     a8a:	fc 01       	movw	r30, r24
     a8c:	31 97       	sbiw	r30, 0x01	; 1
     a8e:	f7 ff       	sbrs	r31, 7
     a90:	3b c0       	rjmp	.+118    	; 0xb08 <__floatunsisf+0xbc>
     a92:	22 27       	eor	r18, r18
     a94:	33 27       	eor	r19, r19
     a96:	2e 1b       	sub	r18, r30
     a98:	3f 0b       	sbc	r19, r31
     a9a:	57 01       	movw	r10, r14
     a9c:	68 01       	movw	r12, r16
     a9e:	02 2e       	mov	r0, r18
     aa0:	04 c0       	rjmp	.+8      	; 0xaaa <__floatunsisf+0x5e>
     aa2:	d6 94       	lsr	r13
     aa4:	c7 94       	ror	r12
     aa6:	b7 94       	ror	r11
     aa8:	a7 94       	ror	r10
     aaa:	0a 94       	dec	r0
     aac:	d2 f7       	brpl	.-12     	; 0xaa2 <__floatunsisf+0x56>
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	50 e0       	ldi	r21, 0x00	; 0
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	a0 e0       	ldi	r26, 0x00	; 0
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__floatunsisf+0x7c>
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	aa 1f       	adc	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	2a 95       	dec	r18
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__floatunsisf+0x74>
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	a1 09       	sbc	r26, r1
     ad0:	b1 09       	sbc	r27, r1
     ad2:	8e 21       	and	r24, r14
     ad4:	9f 21       	and	r25, r15
     ad6:	a0 23       	and	r26, r16
     ad8:	b1 23       	and	r27, r17
     ada:	00 97       	sbiw	r24, 0x00	; 0
     adc:	a1 05       	cpc	r26, r1
     ade:	b1 05       	cpc	r27, r1
     ae0:	21 f0       	breq	.+8      	; 0xaea <__floatunsisf+0x9e>
     ae2:	41 e0       	ldi	r20, 0x01	; 1
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	4a 29       	or	r20, r10
     aec:	5b 29       	or	r21, r11
     aee:	6c 29       	or	r22, r12
     af0:	7d 29       	or	r23, r13
     af2:	4d 83       	std	Y+5, r20	; 0x05
     af4:	5e 83       	std	Y+6, r21	; 0x06
     af6:	6f 83       	std	Y+7, r22	; 0x07
     af8:	78 87       	std	Y+8, r23	; 0x08
     afa:	8e e1       	ldi	r24, 0x1E	; 30
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	8e 1b       	sub	r24, r30
     b00:	9f 0b       	sbc	r25, r31
     b02:	9c 83       	std	Y+4, r25	; 0x04
     b04:	8b 83       	std	Y+3, r24	; 0x03
     b06:	12 c0       	rjmp	.+36     	; 0xb2c <__floatunsisf+0xe0>
     b08:	30 97       	sbiw	r30, 0x00	; 0
     b0a:	81 f0       	breq	.+32     	; 0xb2c <__floatunsisf+0xe0>
     b0c:	0e 2e       	mov	r0, r30
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__floatunsisf+0xcc>
     b10:	ee 0c       	add	r14, r14
     b12:	ff 1c       	adc	r15, r15
     b14:	00 1f       	adc	r16, r16
     b16:	11 1f       	adc	r17, r17
     b18:	0a 94       	dec	r0
     b1a:	d2 f7       	brpl	.-12     	; 0xb10 <__floatunsisf+0xc4>
     b1c:	ed 82       	std	Y+5, r14	; 0x05
     b1e:	fe 82       	std	Y+6, r15	; 0x06
     b20:	0f 83       	std	Y+7, r16	; 0x07
     b22:	18 87       	std	Y+8, r17	; 0x08
     b24:	ce 1a       	sub	r12, r30
     b26:	df 0a       	sbc	r13, r31
     b28:	dc 82       	std	Y+4, r13	; 0x04
     b2a:	cb 82       	std	Y+3, r12	; 0x03
     b2c:	1a 82       	std	Y+2, r1	; 0x02
     b2e:	ce 01       	movw	r24, r28
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     b36:	28 96       	adiw	r28, 0x08	; 8
     b38:	ea e0       	ldi	r30, 0x0A	; 10
     b3a:	0c 94 1f 21 	jmp	0x423e	; 0x423e <__epilogue_restores__+0x10>

00000b3e <__clzsi2>:
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	7b 01       	movw	r14, r22
     b48:	8c 01       	movw	r16, r24
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	e8 16       	cp	r14, r24
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	f8 06       	cpc	r15, r24
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	08 07       	cpc	r16, r24
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	18 07       	cpc	r17, r24
     b5a:	88 f4       	brcc	.+34     	; 0xb7e <__clzsi2+0x40>
     b5c:	8f ef       	ldi	r24, 0xFF	; 255
     b5e:	e8 16       	cp	r14, r24
     b60:	f1 04       	cpc	r15, r1
     b62:	01 05       	cpc	r16, r1
     b64:	11 05       	cpc	r17, r1
     b66:	31 f0       	breq	.+12     	; 0xb74 <__clzsi2+0x36>
     b68:	28 f0       	brcs	.+10     	; 0xb74 <__clzsi2+0x36>
     b6a:	88 e0       	ldi	r24, 0x08	; 8
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	a0 e0       	ldi	r26, 0x00	; 0
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	17 c0       	rjmp	.+46     	; 0xba2 <__clzsi2+0x64>
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	a0 e0       	ldi	r26, 0x00	; 0
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	12 c0       	rjmp	.+36     	; 0xba2 <__clzsi2+0x64>
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	e8 16       	cp	r14, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	f8 06       	cpc	r15, r24
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	08 07       	cpc	r16, r24
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	18 07       	cpc	r17, r24
     b8e:	28 f0       	brcs	.+10     	; 0xb9a <__clzsi2+0x5c>
     b90:	88 e1       	ldi	r24, 0x18	; 24
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	a0 e0       	ldi	r26, 0x00	; 0
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__clzsi2+0x64>
     b9a:	80 e1       	ldi	r24, 0x10	; 16
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	a0 e0       	ldi	r26, 0x00	; 0
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	20 e2       	ldi	r18, 0x20	; 32
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	28 1b       	sub	r18, r24
     bac:	39 0b       	sbc	r19, r25
     bae:	4a 0b       	sbc	r20, r26
     bb0:	5b 0b       	sbc	r21, r27
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <__clzsi2+0x7e>
     bb4:	16 95       	lsr	r17
     bb6:	07 95       	ror	r16
     bb8:	f7 94       	ror	r15
     bba:	e7 94       	ror	r14
     bbc:	8a 95       	dec	r24
     bbe:	d2 f7       	brpl	.-12     	; 0xbb4 <__clzsi2+0x76>
     bc0:	f7 01       	movw	r30, r14
     bc2:	ee 58       	subi	r30, 0x8E	; 142
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	80 81       	ld	r24, Z
     bc8:	28 1b       	sub	r18, r24
     bca:	31 09       	sbc	r19, r1
     bcc:	41 09       	sbc	r20, r1
     bce:	51 09       	sbc	r21, r1
     bd0:	c9 01       	movw	r24, r18
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	ff 90       	pop	r15
     bd8:	ef 90       	pop	r14
     bda:	08 95       	ret

00000bdc <__pack_f>:
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	fc 01       	movw	r30, r24
     be8:	e4 80       	ldd	r14, Z+4	; 0x04
     bea:	f5 80       	ldd	r15, Z+5	; 0x05
     bec:	06 81       	ldd	r16, Z+6	; 0x06
     bee:	17 81       	ldd	r17, Z+7	; 0x07
     bf0:	d1 80       	ldd	r13, Z+1	; 0x01
     bf2:	80 81       	ld	r24, Z
     bf4:	82 30       	cpi	r24, 0x02	; 2
     bf6:	48 f4       	brcc	.+18     	; 0xc0a <__pack_f+0x2e>
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e1       	ldi	r26, 0x10	; 16
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e8 2a       	or	r14, r24
     c02:	f9 2a       	or	r15, r25
     c04:	0a 2b       	or	r16, r26
     c06:	1b 2b       	or	r17, r27
     c08:	a5 c0       	rjmp	.+330    	; 0xd54 <__pack_f+0x178>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	09 f4       	brne	.+2      	; 0xc10 <__pack_f+0x34>
     c0e:	9f c0       	rjmp	.+318    	; 0xd4e <__pack_f+0x172>
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	21 f4       	brne	.+8      	; 0xc1c <__pack_f+0x40>
     c14:	ee 24       	eor	r14, r14
     c16:	ff 24       	eor	r15, r15
     c18:	87 01       	movw	r16, r14
     c1a:	05 c0       	rjmp	.+10     	; 0xc26 <__pack_f+0x4a>
     c1c:	e1 14       	cp	r14, r1
     c1e:	f1 04       	cpc	r15, r1
     c20:	01 05       	cpc	r16, r1
     c22:	11 05       	cpc	r17, r1
     c24:	19 f4       	brne	.+6      	; 0xc2c <__pack_f+0x50>
     c26:	e0 e0       	ldi	r30, 0x00	; 0
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	96 c0       	rjmp	.+300    	; 0xd58 <__pack_f+0x17c>
     c2c:	62 81       	ldd	r22, Z+2	; 0x02
     c2e:	73 81       	ldd	r23, Z+3	; 0x03
     c30:	9f ef       	ldi	r25, 0xFF	; 255
     c32:	62 38       	cpi	r22, 0x82	; 130
     c34:	79 07       	cpc	r23, r25
     c36:	0c f0       	brlt	.+2      	; 0xc3a <__pack_f+0x5e>
     c38:	5b c0       	rjmp	.+182    	; 0xcf0 <__pack_f+0x114>
     c3a:	22 e8       	ldi	r18, 0x82	; 130
     c3c:	3f ef       	ldi	r19, 0xFF	; 255
     c3e:	26 1b       	sub	r18, r22
     c40:	37 0b       	sbc	r19, r23
     c42:	2a 31       	cpi	r18, 0x1A	; 26
     c44:	31 05       	cpc	r19, r1
     c46:	2c f0       	brlt	.+10     	; 0xc52 <__pack_f+0x76>
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	2a c0       	rjmp	.+84     	; 0xca6 <__pack_f+0xca>
     c52:	b8 01       	movw	r22, r16
     c54:	a7 01       	movw	r20, r14
     c56:	02 2e       	mov	r0, r18
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <__pack_f+0x86>
     c5a:	76 95       	lsr	r23
     c5c:	67 95       	ror	r22
     c5e:	57 95       	ror	r21
     c60:	47 95       	ror	r20
     c62:	0a 94       	dec	r0
     c64:	d2 f7       	brpl	.-12     	; 0xc5a <__pack_f+0x7e>
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	a0 e0       	ldi	r26, 0x00	; 0
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <__pack_f+0x9c>
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	aa 1f       	adc	r26, r26
     c76:	bb 1f       	adc	r27, r27
     c78:	2a 95       	dec	r18
     c7a:	d2 f7       	brpl	.-12     	; 0xc70 <__pack_f+0x94>
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	a1 09       	sbc	r26, r1
     c80:	b1 09       	sbc	r27, r1
     c82:	8e 21       	and	r24, r14
     c84:	9f 21       	and	r25, r15
     c86:	a0 23       	and	r26, r16
     c88:	b1 23       	and	r27, r17
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	a1 05       	cpc	r26, r1
     c8e:	b1 05       	cpc	r27, r1
     c90:	21 f0       	breq	.+8      	; 0xc9a <__pack_f+0xbe>
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	a0 e0       	ldi	r26, 0x00	; 0
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	9a 01       	movw	r18, r20
     c9c:	ab 01       	movw	r20, r22
     c9e:	28 2b       	or	r18, r24
     ca0:	39 2b       	or	r19, r25
     ca2:	4a 2b       	or	r20, r26
     ca4:	5b 2b       	or	r21, r27
     ca6:	da 01       	movw	r26, r20
     ca8:	c9 01       	movw	r24, r18
     caa:	8f 77       	andi	r24, 0x7F	; 127
     cac:	90 70       	andi	r25, 0x00	; 0
     cae:	a0 70       	andi	r26, 0x00	; 0
     cb0:	b0 70       	andi	r27, 0x00	; 0
     cb2:	80 34       	cpi	r24, 0x40	; 64
     cb4:	91 05       	cpc	r25, r1
     cb6:	a1 05       	cpc	r26, r1
     cb8:	b1 05       	cpc	r27, r1
     cba:	39 f4       	brne	.+14     	; 0xcca <__pack_f+0xee>
     cbc:	27 ff       	sbrs	r18, 7
     cbe:	09 c0       	rjmp	.+18     	; 0xcd2 <__pack_f+0xf6>
     cc0:	20 5c       	subi	r18, 0xC0	; 192
     cc2:	3f 4f       	sbci	r19, 0xFF	; 255
     cc4:	4f 4f       	sbci	r20, 0xFF	; 255
     cc6:	5f 4f       	sbci	r21, 0xFF	; 255
     cc8:	04 c0       	rjmp	.+8      	; 0xcd2 <__pack_f+0xf6>
     cca:	21 5c       	subi	r18, 0xC1	; 193
     ccc:	3f 4f       	sbci	r19, 0xFF	; 255
     cce:	4f 4f       	sbci	r20, 0xFF	; 255
     cd0:	5f 4f       	sbci	r21, 0xFF	; 255
     cd2:	e0 e0       	ldi	r30, 0x00	; 0
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	a0 e0       	ldi	r26, 0x00	; 0
     cda:	3a 07       	cpc	r19, r26
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	4a 07       	cpc	r20, r26
     ce0:	a0 e4       	ldi	r26, 0x40	; 64
     ce2:	5a 07       	cpc	r21, r26
     ce4:	10 f0       	brcs	.+4      	; 0xcea <__pack_f+0x10e>
     ce6:	e1 e0       	ldi	r30, 0x01	; 1
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	79 01       	movw	r14, r18
     cec:	8a 01       	movw	r16, r20
     cee:	27 c0       	rjmp	.+78     	; 0xd3e <__pack_f+0x162>
     cf0:	60 38       	cpi	r22, 0x80	; 128
     cf2:	71 05       	cpc	r23, r1
     cf4:	64 f5       	brge	.+88     	; 0xd4e <__pack_f+0x172>
     cf6:	fb 01       	movw	r30, r22
     cf8:	e1 58       	subi	r30, 0x81	; 129
     cfa:	ff 4f       	sbci	r31, 0xFF	; 255
     cfc:	d8 01       	movw	r26, r16
     cfe:	c7 01       	movw	r24, r14
     d00:	8f 77       	andi	r24, 0x7F	; 127
     d02:	90 70       	andi	r25, 0x00	; 0
     d04:	a0 70       	andi	r26, 0x00	; 0
     d06:	b0 70       	andi	r27, 0x00	; 0
     d08:	80 34       	cpi	r24, 0x40	; 64
     d0a:	91 05       	cpc	r25, r1
     d0c:	a1 05       	cpc	r26, r1
     d0e:	b1 05       	cpc	r27, r1
     d10:	39 f4       	brne	.+14     	; 0xd20 <__pack_f+0x144>
     d12:	e7 fe       	sbrs	r14, 7
     d14:	0d c0       	rjmp	.+26     	; 0xd30 <__pack_f+0x154>
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	a0 e0       	ldi	r26, 0x00	; 0
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	04 c0       	rjmp	.+8      	; 0xd28 <__pack_f+0x14c>
     d20:	8f e3       	ldi	r24, 0x3F	; 63
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	a0 e0       	ldi	r26, 0x00	; 0
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e8 0e       	add	r14, r24
     d2a:	f9 1e       	adc	r15, r25
     d2c:	0a 1f       	adc	r16, r26
     d2e:	1b 1f       	adc	r17, r27
     d30:	17 ff       	sbrs	r17, 7
     d32:	05 c0       	rjmp	.+10     	; 0xd3e <__pack_f+0x162>
     d34:	16 95       	lsr	r17
     d36:	07 95       	ror	r16
     d38:	f7 94       	ror	r15
     d3a:	e7 94       	ror	r14
     d3c:	31 96       	adiw	r30, 0x01	; 1
     d3e:	87 e0       	ldi	r24, 0x07	; 7
     d40:	16 95       	lsr	r17
     d42:	07 95       	ror	r16
     d44:	f7 94       	ror	r15
     d46:	e7 94       	ror	r14
     d48:	8a 95       	dec	r24
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__pack_f+0x164>
     d4c:	05 c0       	rjmp	.+10     	; 0xd58 <__pack_f+0x17c>
     d4e:	ee 24       	eor	r14, r14
     d50:	ff 24       	eor	r15, r15
     d52:	87 01       	movw	r16, r14
     d54:	ef ef       	ldi	r30, 0xFF	; 255
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	6e 2f       	mov	r22, r30
     d5a:	67 95       	ror	r22
     d5c:	66 27       	eor	r22, r22
     d5e:	67 95       	ror	r22
     d60:	90 2f       	mov	r25, r16
     d62:	9f 77       	andi	r25, 0x7F	; 127
     d64:	d7 94       	ror	r13
     d66:	dd 24       	eor	r13, r13
     d68:	d7 94       	ror	r13
     d6a:	8e 2f       	mov	r24, r30
     d6c:	86 95       	lsr	r24
     d6e:	49 2f       	mov	r20, r25
     d70:	46 2b       	or	r20, r22
     d72:	58 2f       	mov	r21, r24
     d74:	5d 29       	or	r21, r13
     d76:	b7 01       	movw	r22, r14
     d78:	ca 01       	movw	r24, r20
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
     d82:	df 90       	pop	r13
     d84:	08 95       	ret

00000d86 <__unpack_f>:
     d86:	fc 01       	movw	r30, r24
     d88:	db 01       	movw	r26, r22
     d8a:	40 81       	ld	r20, Z
     d8c:	51 81       	ldd	r21, Z+1	; 0x01
     d8e:	22 81       	ldd	r18, Z+2	; 0x02
     d90:	62 2f       	mov	r22, r18
     d92:	6f 77       	andi	r22, 0x7F	; 127
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	22 1f       	adc	r18, r18
     d98:	22 27       	eor	r18, r18
     d9a:	22 1f       	adc	r18, r18
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
     d9e:	89 2f       	mov	r24, r25
     da0:	88 0f       	add	r24, r24
     da2:	82 2b       	or	r24, r18
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	99 1f       	adc	r25, r25
     daa:	99 27       	eor	r25, r25
     dac:	99 1f       	adc	r25, r25
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	9c 93       	st	X, r25
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	21 15       	cp	r18, r1
     db6:	31 05       	cpc	r19, r1
     db8:	a9 f5       	brne	.+106    	; 0xe24 <__unpack_f+0x9e>
     dba:	41 15       	cp	r20, r1
     dbc:	51 05       	cpc	r21, r1
     dbe:	61 05       	cpc	r22, r1
     dc0:	71 05       	cpc	r23, r1
     dc2:	11 f4       	brne	.+4      	; 0xdc8 <__unpack_f+0x42>
     dc4:	82 e0       	ldi	r24, 0x02	; 2
     dc6:	37 c0       	rjmp	.+110    	; 0xe36 <__unpack_f+0xb0>
     dc8:	82 e8       	ldi	r24, 0x82	; 130
     dca:	9f ef       	ldi	r25, 0xFF	; 255
     dcc:	13 96       	adiw	r26, 0x03	; 3
     dce:	9c 93       	st	X, r25
     dd0:	8e 93       	st	-X, r24
     dd2:	12 97       	sbiw	r26, 0x02	; 2
     dd4:	9a 01       	movw	r18, r20
     dd6:	ab 01       	movw	r20, r22
     dd8:	67 e0       	ldi	r22, 0x07	; 7
     dda:	22 0f       	add	r18, r18
     ddc:	33 1f       	adc	r19, r19
     dde:	44 1f       	adc	r20, r20
     de0:	55 1f       	adc	r21, r21
     de2:	6a 95       	dec	r22
     de4:	d1 f7       	brne	.-12     	; 0xdda <__unpack_f+0x54>
     de6:	83 e0       	ldi	r24, 0x03	; 3
     de8:	8c 93       	st	X, r24
     dea:	0d c0       	rjmp	.+26     	; 0xe06 <__unpack_f+0x80>
     dec:	22 0f       	add	r18, r18
     dee:	33 1f       	adc	r19, r19
     df0:	44 1f       	adc	r20, r20
     df2:	55 1f       	adc	r21, r21
     df4:	12 96       	adiw	r26, 0x02	; 2
     df6:	8d 91       	ld	r24, X+
     df8:	9c 91       	ld	r25, X
     dfa:	13 97       	sbiw	r26, 0x03	; 3
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	13 96       	adiw	r26, 0x03	; 3
     e00:	9c 93       	st	X, r25
     e02:	8e 93       	st	-X, r24
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	20 30       	cpi	r18, 0x00	; 0
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	38 07       	cpc	r19, r24
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	48 07       	cpc	r20, r24
     e10:	80 e4       	ldi	r24, 0x40	; 64
     e12:	58 07       	cpc	r21, r24
     e14:	58 f3       	brcs	.-42     	; 0xdec <__unpack_f+0x66>
     e16:	14 96       	adiw	r26, 0x04	; 4
     e18:	2d 93       	st	X+, r18
     e1a:	3d 93       	st	X+, r19
     e1c:	4d 93       	st	X+, r20
     e1e:	5c 93       	st	X, r21
     e20:	17 97       	sbiw	r26, 0x07	; 7
     e22:	08 95       	ret
     e24:	2f 3f       	cpi	r18, 0xFF	; 255
     e26:	31 05       	cpc	r19, r1
     e28:	79 f4       	brne	.+30     	; 0xe48 <__unpack_f+0xc2>
     e2a:	41 15       	cp	r20, r1
     e2c:	51 05       	cpc	r21, r1
     e2e:	61 05       	cpc	r22, r1
     e30:	71 05       	cpc	r23, r1
     e32:	19 f4       	brne	.+6      	; 0xe3a <__unpack_f+0xb4>
     e34:	84 e0       	ldi	r24, 0x04	; 4
     e36:	8c 93       	st	X, r24
     e38:	08 95       	ret
     e3a:	64 ff       	sbrs	r22, 4
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <__unpack_f+0xbe>
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	8c 93       	st	X, r24
     e42:	12 c0       	rjmp	.+36     	; 0xe68 <__unpack_f+0xe2>
     e44:	1c 92       	st	X, r1
     e46:	10 c0       	rjmp	.+32     	; 0xe68 <__unpack_f+0xe2>
     e48:	2f 57       	subi	r18, 0x7F	; 127
     e4a:	30 40       	sbci	r19, 0x00	; 0
     e4c:	13 96       	adiw	r26, 0x03	; 3
     e4e:	3c 93       	st	X, r19
     e50:	2e 93       	st	-X, r18
     e52:	12 97       	sbiw	r26, 0x02	; 2
     e54:	83 e0       	ldi	r24, 0x03	; 3
     e56:	8c 93       	st	X, r24
     e58:	87 e0       	ldi	r24, 0x07	; 7
     e5a:	44 0f       	add	r20, r20
     e5c:	55 1f       	adc	r21, r21
     e5e:	66 1f       	adc	r22, r22
     e60:	77 1f       	adc	r23, r23
     e62:	8a 95       	dec	r24
     e64:	d1 f7       	brne	.-12     	; 0xe5a <__unpack_f+0xd4>
     e66:	70 64       	ori	r23, 0x40	; 64
     e68:	14 96       	adiw	r26, 0x04	; 4
     e6a:	4d 93       	st	X+, r20
     e6c:	5d 93       	st	X+, r21
     e6e:	6d 93       	st	X+, r22
     e70:	7c 93       	st	X, r23
     e72:	17 97       	sbiw	r26, 0x07	; 7
     e74:	08 95       	ret

00000e76 <__fpcmp_parts_f>:
     e76:	1f 93       	push	r17
     e78:	dc 01       	movw	r26, r24
     e7a:	fb 01       	movw	r30, r22
     e7c:	9c 91       	ld	r25, X
     e7e:	92 30       	cpi	r25, 0x02	; 2
     e80:	08 f4       	brcc	.+2      	; 0xe84 <__fpcmp_parts_f+0xe>
     e82:	47 c0       	rjmp	.+142    	; 0xf12 <__fpcmp_parts_f+0x9c>
     e84:	80 81       	ld	r24, Z
     e86:	82 30       	cpi	r24, 0x02	; 2
     e88:	08 f4       	brcc	.+2      	; 0xe8c <__fpcmp_parts_f+0x16>
     e8a:	43 c0       	rjmp	.+134    	; 0xf12 <__fpcmp_parts_f+0x9c>
     e8c:	94 30       	cpi	r25, 0x04	; 4
     e8e:	51 f4       	brne	.+20     	; 0xea4 <__fpcmp_parts_f+0x2e>
     e90:	11 96       	adiw	r26, 0x01	; 1
     e92:	1c 91       	ld	r17, X
     e94:	84 30       	cpi	r24, 0x04	; 4
     e96:	99 f5       	brne	.+102    	; 0xefe <__fpcmp_parts_f+0x88>
     e98:	81 81       	ldd	r24, Z+1	; 0x01
     e9a:	68 2f       	mov	r22, r24
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	61 1b       	sub	r22, r17
     ea0:	71 09       	sbc	r23, r1
     ea2:	3f c0       	rjmp	.+126    	; 0xf22 <__fpcmp_parts_f+0xac>
     ea4:	84 30       	cpi	r24, 0x04	; 4
     ea6:	21 f0       	breq	.+8      	; 0xeb0 <__fpcmp_parts_f+0x3a>
     ea8:	92 30       	cpi	r25, 0x02	; 2
     eaa:	31 f4       	brne	.+12     	; 0xeb8 <__fpcmp_parts_f+0x42>
     eac:	82 30       	cpi	r24, 0x02	; 2
     eae:	b9 f1       	breq	.+110    	; 0xf1e <__fpcmp_parts_f+0xa8>
     eb0:	81 81       	ldd	r24, Z+1	; 0x01
     eb2:	88 23       	and	r24, r24
     eb4:	89 f1       	breq	.+98     	; 0xf18 <__fpcmp_parts_f+0xa2>
     eb6:	2d c0       	rjmp	.+90     	; 0xf12 <__fpcmp_parts_f+0x9c>
     eb8:	11 96       	adiw	r26, 0x01	; 1
     eba:	1c 91       	ld	r17, X
     ebc:	11 97       	sbiw	r26, 0x01	; 1
     ebe:	82 30       	cpi	r24, 0x02	; 2
     ec0:	f1 f0       	breq	.+60     	; 0xefe <__fpcmp_parts_f+0x88>
     ec2:	81 81       	ldd	r24, Z+1	; 0x01
     ec4:	18 17       	cp	r17, r24
     ec6:	d9 f4       	brne	.+54     	; 0xefe <__fpcmp_parts_f+0x88>
     ec8:	12 96       	adiw	r26, 0x02	; 2
     eca:	2d 91       	ld	r18, X+
     ecc:	3c 91       	ld	r19, X
     ece:	13 97       	sbiw	r26, 0x03	; 3
     ed0:	82 81       	ldd	r24, Z+2	; 0x02
     ed2:	93 81       	ldd	r25, Z+3	; 0x03
     ed4:	82 17       	cp	r24, r18
     ed6:	93 07       	cpc	r25, r19
     ed8:	94 f0       	brlt	.+36     	; 0xefe <__fpcmp_parts_f+0x88>
     eda:	28 17       	cp	r18, r24
     edc:	39 07       	cpc	r19, r25
     ede:	bc f0       	brlt	.+46     	; 0xf0e <__fpcmp_parts_f+0x98>
     ee0:	14 96       	adiw	r26, 0x04	; 4
     ee2:	8d 91       	ld	r24, X+
     ee4:	9d 91       	ld	r25, X+
     ee6:	0d 90       	ld	r0, X+
     ee8:	bc 91       	ld	r27, X
     eea:	a0 2d       	mov	r26, r0
     eec:	24 81       	ldd	r18, Z+4	; 0x04
     eee:	35 81       	ldd	r19, Z+5	; 0x05
     ef0:	46 81       	ldd	r20, Z+6	; 0x06
     ef2:	57 81       	ldd	r21, Z+7	; 0x07
     ef4:	28 17       	cp	r18, r24
     ef6:	39 07       	cpc	r19, r25
     ef8:	4a 07       	cpc	r20, r26
     efa:	5b 07       	cpc	r21, r27
     efc:	18 f4       	brcc	.+6      	; 0xf04 <__fpcmp_parts_f+0x8e>
     efe:	11 23       	and	r17, r17
     f00:	41 f0       	breq	.+16     	; 0xf12 <__fpcmp_parts_f+0x9c>
     f02:	0a c0       	rjmp	.+20     	; 0xf18 <__fpcmp_parts_f+0xa2>
     f04:	82 17       	cp	r24, r18
     f06:	93 07       	cpc	r25, r19
     f08:	a4 07       	cpc	r26, r20
     f0a:	b5 07       	cpc	r27, r21
     f0c:	40 f4       	brcc	.+16     	; 0xf1e <__fpcmp_parts_f+0xa8>
     f0e:	11 23       	and	r17, r17
     f10:	19 f0       	breq	.+6      	; 0xf18 <__fpcmp_parts_f+0xa2>
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	05 c0       	rjmp	.+10     	; 0xf22 <__fpcmp_parts_f+0xac>
     f18:	6f ef       	ldi	r22, 0xFF	; 255
     f1a:	7f ef       	ldi	r23, 0xFF	; 255
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <__fpcmp_parts_f+0xac>
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	cb 01       	movw	r24, r22
     f24:	1f 91       	pop	r17
     f26:	08 95       	ret

00000f28 <__vector_1>:
/*
 * External Interrupts ISR
 */

ISR(INT0_vect)
{
     f28:	1f 92       	push	r1
     f2a:	0f 92       	push	r0
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	0f 92       	push	r0
     f30:	11 24       	eor	r1, r1
     f32:	2f 93       	push	r18
     f34:	3f 93       	push	r19
     f36:	4f 93       	push	r20
     f38:	5f 93       	push	r21
     f3a:	6f 93       	push	r22
     f3c:	7f 93       	push	r23
     f3e:	8f 93       	push	r24
     f40:	9f 93       	push	r25
     f42:	af 93       	push	r26
     f44:	bf 93       	push	r27
     f46:	ef 93       	push	r30
     f48:	ff 93       	push	r31
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
     f52:	80 91 7a 01 	lds	r24, 0x017A
     f56:	90 91 7b 01 	lds	r25, 0x017B
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	29 f0       	breq	.+10     	; 0xf68 <__vector_1+0x40>
	{
		(*g_callBackPtr0)();
     f5e:	e0 91 7a 01 	lds	r30, 0x017A
     f62:	f0 91 7b 01 	lds	r31, 0x017B
     f66:	09 95       	icall
	}

}
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	ff 91       	pop	r31
     f6e:	ef 91       	pop	r30
     f70:	bf 91       	pop	r27
     f72:	af 91       	pop	r26
     f74:	9f 91       	pop	r25
     f76:	8f 91       	pop	r24
     f78:	7f 91       	pop	r23
     f7a:	6f 91       	pop	r22
     f7c:	5f 91       	pop	r21
     f7e:	4f 91       	pop	r20
     f80:	3f 91       	pop	r19
     f82:	2f 91       	pop	r18
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti

00000f8e <__vector_2>:

ISR(INT1_vect)
{
     f8e:	1f 92       	push	r1
     f90:	0f 92       	push	r0
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	0f 92       	push	r0
     f96:	11 24       	eor	r1, r1
     f98:	2f 93       	push	r18
     f9a:	3f 93       	push	r19
     f9c:	4f 93       	push	r20
     f9e:	5f 93       	push	r21
     fa0:	6f 93       	push	r22
     fa2:	7f 93       	push	r23
     fa4:	8f 93       	push	r24
     fa6:	9f 93       	push	r25
     fa8:	af 93       	push	r26
     faa:	bf 93       	push	r27
     fac:	ef 93       	push	r30
     fae:	ff 93       	push	r31
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
     fb8:	80 91 7c 01 	lds	r24, 0x017C
     fbc:	90 91 7d 01 	lds	r25, 0x017D
     fc0:	00 97       	sbiw	r24, 0x00	; 0
     fc2:	29 f0       	breq	.+10     	; 0xfce <__vector_2+0x40>
	{
		(*g_callBackPtr1)();
     fc4:	e0 91 7c 01 	lds	r30, 0x017C
     fc8:	f0 91 7d 01 	lds	r31, 0x017D
     fcc:	09 95       	icall
	}

}
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	ff 91       	pop	r31
     fd4:	ef 91       	pop	r30
     fd6:	bf 91       	pop	r27
     fd8:	af 91       	pop	r26
     fda:	9f 91       	pop	r25
     fdc:	8f 91       	pop	r24
     fde:	7f 91       	pop	r23
     fe0:	6f 91       	pop	r22
     fe2:	5f 91       	pop	r21
     fe4:	4f 91       	pop	r20
     fe6:	3f 91       	pop	r19
     fe8:	2f 91       	pop	r18
     fea:	0f 90       	pop	r0
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	0f 90       	pop	r0
     ff0:	1f 90       	pop	r1
     ff2:	18 95       	reti

00000ff4 <__vector_18>:

ISR(INT2_vect)
{
     ff4:	1f 92       	push	r1
     ff6:	0f 92       	push	r0
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	0f 92       	push	r0
     ffc:	11 24       	eor	r1, r1
     ffe:	2f 93       	push	r18
    1000:	3f 93       	push	r19
    1002:	4f 93       	push	r20
    1004:	5f 93       	push	r21
    1006:	6f 93       	push	r22
    1008:	7f 93       	push	r23
    100a:	8f 93       	push	r24
    100c:	9f 93       	push	r25
    100e:	af 93       	push	r26
    1010:	bf 93       	push	r27
    1012:	ef 93       	push	r30
    1014:	ff 93       	push	r31
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    101e:	80 91 7e 01 	lds	r24, 0x017E
    1022:	90 91 7f 01 	lds	r25, 0x017F
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	29 f0       	breq	.+10     	; 0x1034 <__vector_18+0x40>
	{
		(*g_callBackPtr2)();
    102a:	e0 91 7e 01 	lds	r30, 0x017E
    102e:	f0 91 7f 01 	lds	r31, 0x017F
    1032:	09 95       	icall
	}

}
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	ff 91       	pop	r31
    103a:	ef 91       	pop	r30
    103c:	bf 91       	pop	r27
    103e:	af 91       	pop	r26
    1040:	9f 91       	pop	r25
    1042:	8f 91       	pop	r24
    1044:	7f 91       	pop	r23
    1046:	6f 91       	pop	r22
    1048:	5f 91       	pop	r21
    104a:	4f 91       	pop	r20
    104c:	3f 91       	pop	r19
    104e:	2f 91       	pop	r18
    1050:	0f 90       	pop	r0
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	0f 90       	pop	r0
    1056:	1f 90       	pop	r1
    1058:	18 95       	reti

0000105a <Ex_INT_init>:

void Ex_INT_init(const Ex_INT_ConfigType *Config_Ptr)
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	28 97       	sbiw	r28, 0x08	; 8
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	f8 94       	cli
    1068:	de bf       	out	0x3e, r29	; 62
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	cd bf       	out	0x3d, r28	; 61
    106e:	9a 83       	std	Y+2, r25	; 0x02
    1070:	89 83       	std	Y+1, r24	; 0x01

	switch (Config_Ptr->INT)
    1072:	e9 81       	ldd	r30, Y+1	; 0x01
    1074:	fa 81       	ldd	r31, Y+2	; 0x02
    1076:	80 81       	ld	r24, Z
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	38 87       	std	Y+8, r19	; 0x08
    107e:	2f 83       	std	Y+7, r18	; 0x07
    1080:	8f 81       	ldd	r24, Y+7	; 0x07
    1082:	98 85       	ldd	r25, Y+8	; 0x08
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	91 05       	cpc	r25, r1
    1088:	09 f4       	brne	.+2      	; 0x108c <Ex_INT_init+0x32>
    108a:	84 c0       	rjmp	.+264    	; 0x1194 <Ex_INT_init+0x13a>
    108c:	2f 81       	ldd	r18, Y+7	; 0x07
    108e:	38 85       	ldd	r19, Y+8	; 0x08
    1090:	22 30       	cpi	r18, 0x02	; 2
    1092:	31 05       	cpc	r19, r1
    1094:	09 f4       	brne	.+2      	; 0x1098 <Ex_INT_init+0x3e>
    1096:	f7 c0       	rjmp	.+494    	; 0x1286 <Ex_INT_init+0x22c>
    1098:	8f 81       	ldd	r24, Y+7	; 0x07
    109a:	98 85       	ldd	r25, Y+8	; 0x08
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	09 f0       	breq	.+2      	; 0x10a2 <Ex_INT_init+0x48>
    10a0:	0e c1       	rjmp	.+540    	; 0x12be <Ex_INT_init+0x264>

		/*
		 * Setup Pin direction
		 * Enable External Interrupt 0
		 */
		GPIO_setupPinDirection(EX_INT0_PORT_ID, EX_INT0_PORT_ID, PIN_INPUT);
    10a2:	83 e0       	ldi	r24, 0x03	; 3
    10a4:	63 e0       	ldi	r22, 0x03	; 3
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
		SET_BIT(GICR,INT0);
    10ac:	ab e5       	ldi	r26, 0x5B	; 91
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	eb e5       	ldi	r30, 0x5B	; 91
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	80 64       	ori	r24, 0x40	; 64
    10b8:	8c 93       	st	X, r24


		/*
		 * Select Pin state (Flow or Full up)
		 */
		if((Config_Ptr->PIN)==PULLUP_EX_INT_PIN)
    10ba:	e9 81       	ldd	r30, Y+1	; 0x01
    10bc:	fa 81       	ldd	r31, Y+2	; 0x02
    10be:	82 81       	ldd	r24, Z+2	; 0x02
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	31 f4       	brne	.+12     	; 0x10d0 <Ex_INT_init+0x76>
		{
			GPIO_writePin(EX_INT0_PORT_ID, EX_INT0_PORT_ID, LOGIC_HIGH);
    10c4:	83 e0       	ldi	r24, 0x03	; 3
    10c6:	63 e0       	ldi	r22, 0x03	; 3
    10c8:	41 e0       	ldi	r20, 0x01	; 1
    10ca:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    10ce:	05 c0       	rjmp	.+10     	; 0x10da <Ex_INT_init+0x80>
		}
		else
		{
			GPIO_writePin(EX_INT0_PORT_ID, EX_INT0_PORT_ID, LOGIC_LOW);
    10d0:	83 e0       	ldi	r24, 0x03	; 3
    10d2:	63 e0       	ldi	r22, 0x03	; 3
    10d4:	40 e0       	ldi	r20, 0x00	; 0
    10d6:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
		}


		switch (Config_Ptr->option)
    10da:	e9 81       	ldd	r30, Y+1	; 0x01
    10dc:	fa 81       	ldd	r31, Y+2	; 0x02
    10de:	81 81       	ldd	r24, Z+1	; 0x01
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	3e 83       	std	Y+6, r19	; 0x06
    10e6:	2d 83       	std	Y+5, r18	; 0x05
    10e8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ea:	9e 81       	ldd	r25, Y+6	; 0x06
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	91 05       	cpc	r25, r1
    10f0:	21 f1       	breq	.+72     	; 0x113a <Ex_INT_init+0xe0>
    10f2:	2d 81       	ldd	r18, Y+5	; 0x05
    10f4:	3e 81       	ldd	r19, Y+6	; 0x06
    10f6:	22 30       	cpi	r18, 0x02	; 2
    10f8:	31 05       	cpc	r19, r1
    10fa:	2c f4       	brge	.+10     	; 0x1106 <Ex_INT_init+0xac>
    10fc:	8d 81       	ldd	r24, Y+5	; 0x05
    10fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	61 f0       	breq	.+24     	; 0x111c <Ex_INT_init+0xc2>
    1104:	dc c0       	rjmp	.+440    	; 0x12be <Ex_INT_init+0x264>
    1106:	2d 81       	ldd	r18, Y+5	; 0x05
    1108:	3e 81       	ldd	r19, Y+6	; 0x06
    110a:	22 30       	cpi	r18, 0x02	; 2
    110c:	31 05       	cpc	r19, r1
    110e:	21 f1       	breq	.+72     	; 0x1158 <Ex_INT_init+0xfe>
    1110:	8d 81       	ldd	r24, Y+5	; 0x05
    1112:	9e 81       	ldd	r25, Y+6	; 0x06
    1114:	83 30       	cpi	r24, 0x03	; 3
    1116:	91 05       	cpc	r25, r1
    1118:	71 f1       	breq	.+92     	; 0x1176 <Ex_INT_init+0x11c>
    111a:	d1 c0       	rjmp	.+418    	; 0x12be <Ex_INT_init+0x264>
		{
		case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC00);
    111c:	a5 e5       	ldi	r26, 0x55	; 85
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e5 e5       	ldi	r30, 0x55	; 85
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	8e 7f       	andi	r24, 0xFE	; 254
    1128:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC01);
    112a:	a5 e5       	ldi	r26, 0x55	; 85
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e5 e5       	ldi	r30, 0x55	; 85
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	8d 7f       	andi	r24, 0xFD	; 253
    1136:	8c 93       	st	X, r24
    1138:	c2 c0       	rjmp	.+388    	; 0x12be <Ex_INT_init+0x264>
			break;

		case ANY_LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC00);
    113a:	a5 e5       	ldi	r26, 0x55	; 85
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e5 e5       	ldi	r30, 0x55	; 85
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	81 60       	ori	r24, 0x01	; 1
    1146:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC01);
    1148:	a5 e5       	ldi	r26, 0x55	; 85
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e5 e5       	ldi	r30, 0x55	; 85
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	8d 7f       	andi	r24, 0xFD	; 253
    1154:	8c 93       	st	X, r24
    1156:	b3 c0       	rjmp	.+358    	; 0x12be <Ex_INT_init+0x264>
			break;
		case FALLING_EDGE:
			SET_BIT(MCUCR,ISC01);
    1158:	a5 e5       	ldi	r26, 0x55	; 85
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e5 e5       	ldi	r30, 0x55	; 85
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	82 60       	ori	r24, 0x02	; 2
    1164:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC00);
    1166:	a5 e5       	ldi	r26, 0x55	; 85
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e5 e5       	ldi	r30, 0x55	; 85
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	8e 7f       	andi	r24, 0xFE	; 254
    1172:	8c 93       	st	X, r24
    1174:	a4 c0       	rjmp	.+328    	; 0x12be <Ex_INT_init+0x264>
			break;
		case RAISING_EDGE:
			SET_BIT(MCUCR,ISC01);
    1176:	a5 e5       	ldi	r26, 0x55	; 85
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e5 e5       	ldi	r30, 0x55	; 85
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	82 60       	ori	r24, 0x02	; 2
    1182:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC00);
    1184:	a5 e5       	ldi	r26, 0x55	; 85
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e5 e5       	ldi	r30, 0x55	; 85
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	81 60       	ori	r24, 0x01	; 1
    1190:	8c 93       	st	X, r24
    1192:	95 c0       	rjmp	.+298    	; 0x12be <Ex_INT_init+0x264>
		case EX_INT1:
			/*
			 * Setup Pin direction
			 * Enable External Interrupt 1
			 */
			GPIO_setupPinDirection(EX_INT1_PORT_ID, EX_INT1_PORT_ID, PIN_INPUT);
    1194:	83 e0       	ldi	r24, 0x03	; 3
    1196:	63 e0       	ldi	r22, 0x03	; 3
    1198:	40 e0       	ldi	r20, 0x00	; 0
    119a:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
			SET_BIT(GICR,INT1);
    119e:	ab e5       	ldi	r26, 0x5B	; 91
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	eb e5       	ldi	r30, 0x5B	; 91
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	80 68       	ori	r24, 0x80	; 128
    11aa:	8c 93       	st	X, r24


			/*
			 * Select Pin state (Flow or Full up)
			 */
			if((Config_Ptr->PIN)==PULLUP_EX_INT_PIN)
    11ac:	e9 81       	ldd	r30, Y+1	; 0x01
    11ae:	fa 81       	ldd	r31, Y+2	; 0x02
    11b0:	82 81       	ldd	r24, Z+2	; 0x02
    11b2:	81 30       	cpi	r24, 0x01	; 1
    11b4:	31 f4       	brne	.+12     	; 0x11c2 <Ex_INT_init+0x168>
			{
				GPIO_writePin(EX_INT1_PORT_ID, EX_INT1_PORT_ID, LOGIC_HIGH);
    11b6:	83 e0       	ldi	r24, 0x03	; 3
    11b8:	63 e0       	ldi	r22, 0x03	; 3
    11ba:	41 e0       	ldi	r20, 0x01	; 1
    11bc:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    11c0:	05 c0       	rjmp	.+10     	; 0x11cc <Ex_INT_init+0x172>
			}
			else
			{
				GPIO_writePin(EX_INT1_PORT_ID, EX_INT1_PORT_ID, LOGIC_LOW);
    11c2:	83 e0       	ldi	r24, 0x03	; 3
    11c4:	63 e0       	ldi	r22, 0x03	; 3
    11c6:	40 e0       	ldi	r20, 0x00	; 0
    11c8:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
			}

			switch (Config_Ptr->option)
    11cc:	e9 81       	ldd	r30, Y+1	; 0x01
    11ce:	fa 81       	ldd	r31, Y+2	; 0x02
    11d0:	81 81       	ldd	r24, Z+1	; 0x01
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	3c 83       	std	Y+4, r19	; 0x04
    11d8:	2b 83       	std	Y+3, r18	; 0x03
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	9c 81       	ldd	r25, Y+4	; 0x04
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	91 05       	cpc	r25, r1
    11e2:	21 f1       	breq	.+72     	; 0x122c <Ex_INT_init+0x1d2>
    11e4:	2b 81       	ldd	r18, Y+3	; 0x03
    11e6:	3c 81       	ldd	r19, Y+4	; 0x04
    11e8:	22 30       	cpi	r18, 0x02	; 2
    11ea:	31 05       	cpc	r19, r1
    11ec:	2c f4       	brge	.+10     	; 0x11f8 <Ex_INT_init+0x19e>
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	9c 81       	ldd	r25, Y+4	; 0x04
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	61 f0       	breq	.+24     	; 0x120e <Ex_INT_init+0x1b4>
    11f6:	63 c0       	rjmp	.+198    	; 0x12be <Ex_INT_init+0x264>
    11f8:	2b 81       	ldd	r18, Y+3	; 0x03
    11fa:	3c 81       	ldd	r19, Y+4	; 0x04
    11fc:	22 30       	cpi	r18, 0x02	; 2
    11fe:	31 05       	cpc	r19, r1
    1200:	21 f1       	breq	.+72     	; 0x124a <Ex_INT_init+0x1f0>
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	9c 81       	ldd	r25, Y+4	; 0x04
    1206:	83 30       	cpi	r24, 0x03	; 3
    1208:	91 05       	cpc	r25, r1
    120a:	71 f1       	breq	.+92     	; 0x1268 <Ex_INT_init+0x20e>
    120c:	58 c0       	rjmp	.+176    	; 0x12be <Ex_INT_init+0x264>
			{
			case LOW_LEVEL:
				CLEAR_BIT(MCUCR,ISC10);
    120e:	a5 e5       	ldi	r26, 0x55	; 85
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e5 e5       	ldi	r30, 0x55	; 85
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	8b 7f       	andi	r24, 0xFB	; 251
    121a:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR,ISC11);
    121c:	a5 e5       	ldi	r26, 0x55	; 85
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e5 e5       	ldi	r30, 0x55	; 85
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	87 7f       	andi	r24, 0xF7	; 247
    1228:	8c 93       	st	X, r24
    122a:	49 c0       	rjmp	.+146    	; 0x12be <Ex_INT_init+0x264>
				break;

			case ANY_LOGICAL_CHANGE:
				SET_BIT(MCUCR,ISC10);
    122c:	a5 e5       	ldi	r26, 0x55	; 85
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e5 e5       	ldi	r30, 0x55	; 85
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	84 60       	ori	r24, 0x04	; 4
    1238:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR,ISC11);
    123a:	a5 e5       	ldi	r26, 0x55	; 85
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e5 e5       	ldi	r30, 0x55	; 85
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	87 7f       	andi	r24, 0xF7	; 247
    1246:	8c 93       	st	X, r24
    1248:	3a c0       	rjmp	.+116    	; 0x12be <Ex_INT_init+0x264>
				break;
			case FALLING_EDGE:
				SET_BIT(MCUCR,ISC11);
    124a:	a5 e5       	ldi	r26, 0x55	; 85
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e5 e5       	ldi	r30, 0x55	; 85
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	88 60       	ori	r24, 0x08	; 8
    1256:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR,ISC10);
    1258:	a5 e5       	ldi	r26, 0x55	; 85
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e5 e5       	ldi	r30, 0x55	; 85
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	8b 7f       	andi	r24, 0xFB	; 251
    1264:	8c 93       	st	X, r24
    1266:	2b c0       	rjmp	.+86     	; 0x12be <Ex_INT_init+0x264>
				break;
			case RAISING_EDGE:
				SET_BIT(MCUCR,ISC10);
    1268:	a5 e5       	ldi	r26, 0x55	; 85
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e5 e5       	ldi	r30, 0x55	; 85
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	84 60       	ori	r24, 0x04	; 4
    1274:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    1276:	a5 e5       	ldi	r26, 0x55	; 85
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e5 e5       	ldi	r30, 0x55	; 85
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	88 60       	ori	r24, 0x08	; 8
    1282:	8c 93       	st	X, r24
    1284:	1c c0       	rjmp	.+56     	; 0x12be <Ex_INT_init+0x264>

				/*
				 * Setup Pin direction
				 * Enable External Interrupt 2
				 */
				GPIO_setupPinDirection(EX_INT2_PORT_ID, EX_INT2_PORT_ID, PIN_INPUT);
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	61 e0       	ldi	r22, 0x01	; 1
    128a:	40 e0       	ldi	r20, 0x00	; 0
    128c:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
				SET_BIT(GICR,INT2);
    1290:	ab e5       	ldi	r26, 0x5B	; 91
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	eb e5       	ldi	r30, 0x5B	; 91
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	80 62       	ori	r24, 0x20	; 32
    129c:	8c 93       	st	X, r24


				/*
				 * Select Pin state (Flow or Full up)
				 */
				if((Config_Ptr->PIN)==PULLUP_EX_INT_PIN)
    129e:	e9 81       	ldd	r30, Y+1	; 0x01
    12a0:	fa 81       	ldd	r31, Y+2	; 0x02
    12a2:	82 81       	ldd	r24, Z+2	; 0x02
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	31 f4       	brne	.+12     	; 0x12b4 <Ex_INT_init+0x25a>
				{
					GPIO_writePin(EX_INT2_PORT_ID, EX_INT2_PORT_ID, LOGIC_HIGH);
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	61 e0       	ldi	r22, 0x01	; 1
    12ac:	41 e0       	ldi	r20, 0x01	; 1
    12ae:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    12b2:	05 c0       	rjmp	.+10     	; 0x12be <Ex_INT_init+0x264>
				}
				else
				{
					GPIO_writePin(EX_INT2_PORT_ID, EX_INT2_PORT_ID, LOGIC_LOW);
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	61 e0       	ldi	r22, 0x01	; 1
    12b8:	40 e0       	ldi	r20, 0x00	; 0
    12ba:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
				case RAISING_EDGE:
					SET_BIT(MCUCSR,ISC2);
					break;
				}
	}
}
    12be:	28 96       	adiw	r28, 0x08	; 8
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	cd bf       	out	0x3d, r28	; 61
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	08 95       	ret

000012d0 <INT0_setCallBack>:

/*
 * External Interrupts call back functions
 */
void INT0_setCallBack(void(*a_ptr)(void))
{
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <INT0_setCallBack+0x6>
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	9a 83       	std	Y+2, r25	; 0x02
    12dc:	89 83       	std	Y+1, r24	; 0x01

	g_callBackPtr0=a_ptr;
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	9a 81       	ldd	r25, Y+2	; 0x02
    12e2:	90 93 7b 01 	sts	0x017B, r25
    12e6:	80 93 7a 01 	sts	0x017A, r24
}
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <INT1_setCallBack>:


void INT1_setCallBack(void(*a_ptr)(void))
{
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <INT1_setCallBack+0x6>
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	9a 83       	std	Y+2, r25	; 0x02
    1300:	89 83       	std	Y+1, r24	; 0x01

	g_callBackPtr1=a_ptr;
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	9a 81       	ldd	r25, Y+2	; 0x02
    1306:	90 93 7d 01 	sts	0x017D, r25
    130a:	80 93 7c 01 	sts	0x017C, r24
}
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <INT2_setCallBack>:


void INT2_setCallBack(void(*a_ptr)(void))
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	00 d0       	rcall	.+0      	; 0x131e <INT2_setCallBack+0x6>
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	9a 83       	std	Y+2, r25	; 0x02
    1324:	89 83       	std	Y+1, r24	; 0x01

	g_callBackPtr2=a_ptr;
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	9a 81       	ldd	r25, Y+2	; 0x02
    132a:	90 93 7f 01 	sts	0x017F, r25
    132e:	80 93 7e 01 	sts	0x017E, r24
}
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	00 d0       	rcall	.+0      	; 0x1342 <GPIO_setupPinDirection+0x6>
    1342:	00 d0       	rcall	.+0      	; 0x1344 <GPIO_setupPinDirection+0x8>
    1344:	0f 92       	push	r0
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    134a:	89 83       	std	Y+1, r24	; 0x01
    134c:	6a 83       	std	Y+2, r22	; 0x02
    134e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	88 30       	cpi	r24, 0x08	; 8
    1354:	08 f0       	brcs	.+2      	; 0x1358 <GPIO_setupPinDirection+0x1c>
    1356:	d5 c0       	rjmp	.+426    	; 0x1502 <GPIO_setupPinDirection+0x1c6>
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	84 30       	cpi	r24, 0x04	; 4
    135c:	08 f0       	brcs	.+2      	; 0x1360 <GPIO_setupPinDirection+0x24>
    135e:	d1 c0       	rjmp	.+418    	; 0x1502 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	3d 83       	std	Y+5, r19	; 0x05
    1368:	2c 83       	std	Y+4, r18	; 0x04
    136a:	8c 81       	ldd	r24, Y+4	; 0x04
    136c:	9d 81       	ldd	r25, Y+5	; 0x05
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	91 05       	cpc	r25, r1
    1372:	09 f4       	brne	.+2      	; 0x1376 <GPIO_setupPinDirection+0x3a>
    1374:	43 c0       	rjmp	.+134    	; 0x13fc <GPIO_setupPinDirection+0xc0>
    1376:	2c 81       	ldd	r18, Y+4	; 0x04
    1378:	3d 81       	ldd	r19, Y+5	; 0x05
    137a:	22 30       	cpi	r18, 0x02	; 2
    137c:	31 05       	cpc	r19, r1
    137e:	2c f4       	brge	.+10     	; 0x138a <GPIO_setupPinDirection+0x4e>
    1380:	8c 81       	ldd	r24, Y+4	; 0x04
    1382:	9d 81       	ldd	r25, Y+5	; 0x05
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	71 f0       	breq	.+28     	; 0x13a4 <GPIO_setupPinDirection+0x68>
    1388:	bc c0       	rjmp	.+376    	; 0x1502 <GPIO_setupPinDirection+0x1c6>
    138a:	2c 81       	ldd	r18, Y+4	; 0x04
    138c:	3d 81       	ldd	r19, Y+5	; 0x05
    138e:	22 30       	cpi	r18, 0x02	; 2
    1390:	31 05       	cpc	r19, r1
    1392:	09 f4       	brne	.+2      	; 0x1396 <GPIO_setupPinDirection+0x5a>
    1394:	5f c0       	rjmp	.+190    	; 0x1454 <GPIO_setupPinDirection+0x118>
    1396:	8c 81       	ldd	r24, Y+4	; 0x04
    1398:	9d 81       	ldd	r25, Y+5	; 0x05
    139a:	83 30       	cpi	r24, 0x03	; 3
    139c:	91 05       	cpc	r25, r1
    139e:	09 f4       	brne	.+2      	; 0x13a2 <GPIO_setupPinDirection+0x66>
    13a0:	85 c0       	rjmp	.+266    	; 0x14ac <GPIO_setupPinDirection+0x170>
    13a2:	af c0       	rjmp	.+350    	; 0x1502 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	81 30       	cpi	r24, 0x01	; 1
    13a8:	a1 f4       	brne	.+40     	; 0x13d2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    13aa:	aa e3       	ldi	r26, 0x3A	; 58
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	ea e3       	ldi	r30, 0x3A	; 58
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	48 2f       	mov	r20, r24
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	02 2e       	mov	r0, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <GPIO_setupPinDirection+0x8c>
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	0a 94       	dec	r0
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <GPIO_setupPinDirection+0x88>
    13cc:	84 2b       	or	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	98 c0       	rjmp	.+304    	; 0x1502 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    13d2:	aa e3       	ldi	r26, 0x3A	; 58
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	ea e3       	ldi	r30, 0x3A	; 58
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <GPIO_setupPinDirection+0xb4>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <GPIO_setupPinDirection+0xb0>
    13f4:	80 95       	com	r24
    13f6:	84 23       	and	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	83 c0       	rjmp	.+262    	; 0x1502 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	81 30       	cpi	r24, 0x01	; 1
    1400:	a1 f4       	brne	.+40     	; 0x142a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1402:	a7 e3       	ldi	r26, 0x37	; 55
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e7 e3       	ldi	r30, 0x37	; 55
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	48 2f       	mov	r20, r24
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <GPIO_setupPinDirection+0xe4>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <GPIO_setupPinDirection+0xe0>
    1424:	84 2b       	or	r24, r20
    1426:	8c 93       	st	X, r24
    1428:	6c c0       	rjmp	.+216    	; 0x1502 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    142a:	a7 e3       	ldi	r26, 0x37	; 55
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e7 e3       	ldi	r30, 0x37	; 55
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	48 2f       	mov	r20, r24
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	02 2e       	mov	r0, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <GPIO_setupPinDirection+0x10c>
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	0a 94       	dec	r0
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <GPIO_setupPinDirection+0x108>
    144c:	80 95       	com	r24
    144e:	84 23       	and	r24, r20
    1450:	8c 93       	st	X, r24
    1452:	57 c0       	rjmp	.+174    	; 0x1502 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	81 30       	cpi	r24, 0x01	; 1
    1458:	a1 f4       	brne	.+40     	; 0x1482 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    145a:	a4 e3       	ldi	r26, 0x34	; 52
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e4 e3       	ldi	r30, 0x34	; 52
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	48 2f       	mov	r20, r24
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	02 2e       	mov	r0, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <GPIO_setupPinDirection+0x13c>
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	0a 94       	dec	r0
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <GPIO_setupPinDirection+0x138>
    147c:	84 2b       	or	r24, r20
    147e:	8c 93       	st	X, r24
    1480:	40 c0       	rjmp	.+128    	; 0x1502 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1482:	a4 e3       	ldi	r26, 0x34	; 52
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e4 e3       	ldi	r30, 0x34	; 52
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	48 2f       	mov	r20, r24
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 2e       	mov	r0, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <GPIO_setupPinDirection+0x164>
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	0a 94       	dec	r0
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <GPIO_setupPinDirection+0x160>
    14a4:	80 95       	com	r24
    14a6:	84 23       	and	r24, r20
    14a8:	8c 93       	st	X, r24
    14aa:	2b c0       	rjmp	.+86     	; 0x1502 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	81 30       	cpi	r24, 0x01	; 1
    14b0:	a1 f4       	brne	.+40     	; 0x14da <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    14b2:	a1 e3       	ldi	r26, 0x31	; 49
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e1 e3       	ldi	r30, 0x31	; 49
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	48 2f       	mov	r20, r24
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	02 2e       	mov	r0, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <GPIO_setupPinDirection+0x194>
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	0a 94       	dec	r0
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <GPIO_setupPinDirection+0x190>
    14d4:	84 2b       	or	r24, r20
    14d6:	8c 93       	st	X, r24
    14d8:	14 c0       	rjmp	.+40     	; 0x1502 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    14da:	a1 e3       	ldi	r26, 0x31	; 49
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e1 e3       	ldi	r30, 0x31	; 49
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	48 2f       	mov	r20, r24
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	02 2e       	mov	r0, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <GPIO_setupPinDirection+0x1bc>
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	0a 94       	dec	r0
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <GPIO_setupPinDirection+0x1b8>
    14fc:	80 95       	com	r24
    14fe:	84 23       	and	r24, r20
    1500:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	00 d0       	rcall	.+0      	; 0x1518 <GPIO_writePin+0x6>
    1518:	00 d0       	rcall	.+0      	; 0x151a <GPIO_writePin+0x8>
    151a:	0f 92       	push	r0
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	89 83       	std	Y+1, r24	; 0x01
    1522:	6a 83       	std	Y+2, r22	; 0x02
    1524:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	88 30       	cpi	r24, 0x08	; 8
    152a:	08 f0       	brcs	.+2      	; 0x152e <GPIO_writePin+0x1c>
    152c:	d5 c0       	rjmp	.+426    	; 0x16d8 <GPIO_writePin+0x1c6>
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	84 30       	cpi	r24, 0x04	; 4
    1532:	08 f0       	brcs	.+2      	; 0x1536 <GPIO_writePin+0x24>
    1534:	d1 c0       	rjmp	.+418    	; 0x16d8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	3d 83       	std	Y+5, r19	; 0x05
    153e:	2c 83       	std	Y+4, r18	; 0x04
    1540:	8c 81       	ldd	r24, Y+4	; 0x04
    1542:	9d 81       	ldd	r25, Y+5	; 0x05
    1544:	81 30       	cpi	r24, 0x01	; 1
    1546:	91 05       	cpc	r25, r1
    1548:	09 f4       	brne	.+2      	; 0x154c <GPIO_writePin+0x3a>
    154a:	43 c0       	rjmp	.+134    	; 0x15d2 <GPIO_writePin+0xc0>
    154c:	2c 81       	ldd	r18, Y+4	; 0x04
    154e:	3d 81       	ldd	r19, Y+5	; 0x05
    1550:	22 30       	cpi	r18, 0x02	; 2
    1552:	31 05       	cpc	r19, r1
    1554:	2c f4       	brge	.+10     	; 0x1560 <GPIO_writePin+0x4e>
    1556:	8c 81       	ldd	r24, Y+4	; 0x04
    1558:	9d 81       	ldd	r25, Y+5	; 0x05
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	71 f0       	breq	.+28     	; 0x157a <GPIO_writePin+0x68>
    155e:	bc c0       	rjmp	.+376    	; 0x16d8 <GPIO_writePin+0x1c6>
    1560:	2c 81       	ldd	r18, Y+4	; 0x04
    1562:	3d 81       	ldd	r19, Y+5	; 0x05
    1564:	22 30       	cpi	r18, 0x02	; 2
    1566:	31 05       	cpc	r19, r1
    1568:	09 f4       	brne	.+2      	; 0x156c <GPIO_writePin+0x5a>
    156a:	5f c0       	rjmp	.+190    	; 0x162a <GPIO_writePin+0x118>
    156c:	8c 81       	ldd	r24, Y+4	; 0x04
    156e:	9d 81       	ldd	r25, Y+5	; 0x05
    1570:	83 30       	cpi	r24, 0x03	; 3
    1572:	91 05       	cpc	r25, r1
    1574:	09 f4       	brne	.+2      	; 0x1578 <GPIO_writePin+0x66>
    1576:	85 c0       	rjmp	.+266    	; 0x1682 <GPIO_writePin+0x170>
    1578:	af c0       	rjmp	.+350    	; 0x16d8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	81 30       	cpi	r24, 0x01	; 1
    157e:	a1 f4       	brne	.+40     	; 0x15a8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1580:	ab e3       	ldi	r26, 0x3B	; 59
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	eb e3       	ldi	r30, 0x3B	; 59
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	48 2f       	mov	r20, r24
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	02 2e       	mov	r0, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <GPIO_writePin+0x8c>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	0a 94       	dec	r0
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <GPIO_writePin+0x88>
    15a2:	84 2b       	or	r24, r20
    15a4:	8c 93       	st	X, r24
    15a6:	98 c0       	rjmp	.+304    	; 0x16d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    15a8:	ab e3       	ldi	r26, 0x3B	; 59
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	eb e3       	ldi	r30, 0x3B	; 59
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <GPIO_writePin+0xb4>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <GPIO_writePin+0xb0>
    15ca:	80 95       	com	r24
    15cc:	84 23       	and	r24, r20
    15ce:	8c 93       	st	X, r24
    15d0:	83 c0       	rjmp	.+262    	; 0x16d8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	a1 f4       	brne	.+40     	; 0x1600 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    15d8:	a8 e3       	ldi	r26, 0x38	; 56
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e8 e3       	ldi	r30, 0x38	; 56
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	48 2f       	mov	r20, r24
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	02 2e       	mov	r0, r18
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <GPIO_writePin+0xe4>
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	0a 94       	dec	r0
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <GPIO_writePin+0xe0>
    15fa:	84 2b       	or	r24, r20
    15fc:	8c 93       	st	X, r24
    15fe:	6c c0       	rjmp	.+216    	; 0x16d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1600:	a8 e3       	ldi	r26, 0x38	; 56
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e8 e3       	ldi	r30, 0x38	; 56
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	48 2f       	mov	r20, r24
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	02 2e       	mov	r0, r18
    1618:	02 c0       	rjmp	.+4      	; 0x161e <GPIO_writePin+0x10c>
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	0a 94       	dec	r0
    1620:	e2 f7       	brpl	.-8      	; 0x161a <GPIO_writePin+0x108>
    1622:	80 95       	com	r24
    1624:	84 23       	and	r24, r20
    1626:	8c 93       	st	X, r24
    1628:	57 c0       	rjmp	.+174    	; 0x16d8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	81 30       	cpi	r24, 0x01	; 1
    162e:	a1 f4       	brne	.+40     	; 0x1658 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1630:	a5 e3       	ldi	r26, 0x35	; 53
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e5 e3       	ldi	r30, 0x35	; 53
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	48 2f       	mov	r20, r24
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	02 2e       	mov	r0, r18
    1648:	02 c0       	rjmp	.+4      	; 0x164e <GPIO_writePin+0x13c>
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	0a 94       	dec	r0
    1650:	e2 f7       	brpl	.-8      	; 0x164a <GPIO_writePin+0x138>
    1652:	84 2b       	or	r24, r20
    1654:	8c 93       	st	X, r24
    1656:	40 c0       	rjmp	.+128    	; 0x16d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1658:	a5 e3       	ldi	r26, 0x35	; 53
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e5 e3       	ldi	r30, 0x35	; 53
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	48 2f       	mov	r20, r24
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	02 2e       	mov	r0, r18
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <GPIO_writePin+0x164>
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	0a 94       	dec	r0
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <GPIO_writePin+0x160>
    167a:	80 95       	com	r24
    167c:	84 23       	and	r24, r20
    167e:	8c 93       	st	X, r24
    1680:	2b c0       	rjmp	.+86     	; 0x16d8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	81 30       	cpi	r24, 0x01	; 1
    1686:	a1 f4       	brne	.+40     	; 0x16b0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1688:	a2 e3       	ldi	r26, 0x32	; 50
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e2 e3       	ldi	r30, 0x32	; 50
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 2e       	mov	r0, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <GPIO_writePin+0x194>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <GPIO_writePin+0x190>
    16aa:	84 2b       	or	r24, r20
    16ac:	8c 93       	st	X, r24
    16ae:	14 c0       	rjmp	.+40     	; 0x16d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    16b0:	a2 e3       	ldi	r26, 0x32	; 50
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e2 e3       	ldi	r30, 0x32	; 50
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	48 2f       	mov	r20, r24
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	02 2e       	mov	r0, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <GPIO_writePin+0x1bc>
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	0a 94       	dec	r0
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <GPIO_writePin+0x1b8>
    16d2:	80 95       	com	r24
    16d4:	84 23       	and	r24, r20
    16d6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <GPIO_readPin+0x6>
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <GPIO_readPin+0x8>
    16f0:	0f 92       	push	r0
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	8a 83       	std	Y+2, r24	; 0x02
    16f8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    16fa:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	88 30       	cpi	r24, 0x08	; 8
    1700:	08 f0       	brcs	.+2      	; 0x1704 <GPIO_readPin+0x1c>
    1702:	84 c0       	rjmp	.+264    	; 0x180c <GPIO_readPin+0x124>
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	84 30       	cpi	r24, 0x04	; 4
    1708:	08 f0       	brcs	.+2      	; 0x170c <GPIO_readPin+0x24>
    170a:	80 c0       	rjmp	.+256    	; 0x180c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	3d 83       	std	Y+5, r19	; 0x05
    1714:	2c 83       	std	Y+4, r18	; 0x04
    1716:	4c 81       	ldd	r20, Y+4	; 0x04
    1718:	5d 81       	ldd	r21, Y+5	; 0x05
    171a:	41 30       	cpi	r20, 0x01	; 1
    171c:	51 05       	cpc	r21, r1
    171e:	79 f1       	breq	.+94     	; 0x177e <GPIO_readPin+0x96>
    1720:	8c 81       	ldd	r24, Y+4	; 0x04
    1722:	9d 81       	ldd	r25, Y+5	; 0x05
    1724:	82 30       	cpi	r24, 0x02	; 2
    1726:	91 05       	cpc	r25, r1
    1728:	34 f4       	brge	.+12     	; 0x1736 <GPIO_readPin+0x4e>
    172a:	2c 81       	ldd	r18, Y+4	; 0x04
    172c:	3d 81       	ldd	r19, Y+5	; 0x05
    172e:	21 15       	cp	r18, r1
    1730:	31 05       	cpc	r19, r1
    1732:	69 f0       	breq	.+26     	; 0x174e <GPIO_readPin+0x66>
    1734:	6b c0       	rjmp	.+214    	; 0x180c <GPIO_readPin+0x124>
    1736:	4c 81       	ldd	r20, Y+4	; 0x04
    1738:	5d 81       	ldd	r21, Y+5	; 0x05
    173a:	42 30       	cpi	r20, 0x02	; 2
    173c:	51 05       	cpc	r21, r1
    173e:	b9 f1       	breq	.+110    	; 0x17ae <GPIO_readPin+0xc6>
    1740:	8c 81       	ldd	r24, Y+4	; 0x04
    1742:	9d 81       	ldd	r25, Y+5	; 0x05
    1744:	83 30       	cpi	r24, 0x03	; 3
    1746:	91 05       	cpc	r25, r1
    1748:	09 f4       	brne	.+2      	; 0x174c <GPIO_readPin+0x64>
    174a:	49 c0       	rjmp	.+146    	; 0x17de <GPIO_readPin+0xf6>
    174c:	5f c0       	rjmp	.+190    	; 0x180c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    174e:	e9 e3       	ldi	r30, 0x39	; 57
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	88 2f       	mov	r24, r24
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	a9 01       	movw	r20, r18
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <GPIO_readPin+0x7e>
    1762:	55 95       	asr	r21
    1764:	47 95       	ror	r20
    1766:	8a 95       	dec	r24
    1768:	e2 f7       	brpl	.-8      	; 0x1762 <GPIO_readPin+0x7a>
    176a:	ca 01       	movw	r24, r20
    176c:	81 70       	andi	r24, 0x01	; 1
    176e:	90 70       	andi	r25, 0x00	; 0
    1770:	88 23       	and	r24, r24
    1772:	19 f0       	breq	.+6      	; 0x177a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	89 83       	std	Y+1, r24	; 0x01
    1778:	49 c0       	rjmp	.+146    	; 0x180c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    177a:	19 82       	std	Y+1, r1	; 0x01
    177c:	47 c0       	rjmp	.+142    	; 0x180c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    177e:	e6 e3       	ldi	r30, 0x36	; 54
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	a9 01       	movw	r20, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <GPIO_readPin+0xae>
    1792:	55 95       	asr	r21
    1794:	47 95       	ror	r20
    1796:	8a 95       	dec	r24
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <GPIO_readPin+0xaa>
    179a:	ca 01       	movw	r24, r20
    179c:	81 70       	andi	r24, 0x01	; 1
    179e:	90 70       	andi	r25, 0x00	; 0
    17a0:	88 23       	and	r24, r24
    17a2:	19 f0       	breq	.+6      	; 0x17aa <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	31 c0       	rjmp	.+98     	; 0x180c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17aa:	19 82       	std	Y+1, r1	; 0x01
    17ac:	2f c0       	rjmp	.+94     	; 0x180c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    17ae:	e3 e3       	ldi	r30, 0x33	; 51
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	88 2f       	mov	r24, r24
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	a9 01       	movw	r20, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <GPIO_readPin+0xde>
    17c2:	55 95       	asr	r21
    17c4:	47 95       	ror	r20
    17c6:	8a 95       	dec	r24
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <GPIO_readPin+0xda>
    17ca:	ca 01       	movw	r24, r20
    17cc:	81 70       	andi	r24, 0x01	; 1
    17ce:	90 70       	andi	r25, 0x00	; 0
    17d0:	88 23       	and	r24, r24
    17d2:	19 f0       	breq	.+6      	; 0x17da <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	89 83       	std	Y+1, r24	; 0x01
    17d8:	19 c0       	rjmp	.+50     	; 0x180c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17da:	19 82       	std	Y+1, r1	; 0x01
    17dc:	17 c0       	rjmp	.+46     	; 0x180c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    17de:	e0 e3       	ldi	r30, 0x30	; 48
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	88 2f       	mov	r24, r24
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	a9 01       	movw	r20, r18
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <GPIO_readPin+0x10e>
    17f2:	55 95       	asr	r21
    17f4:	47 95       	ror	r20
    17f6:	8a 95       	dec	r24
    17f8:	e2 f7       	brpl	.-8      	; 0x17f2 <GPIO_readPin+0x10a>
    17fa:	ca 01       	movw	r24, r20
    17fc:	81 70       	andi	r24, 0x01	; 1
    17fe:	90 70       	andi	r25, 0x00	; 0
    1800:	88 23       	and	r24, r24
    1802:	19 f0       	breq	.+6      	; 0x180a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	89 83       	std	Y+1, r24	; 0x01
    1808:	01 c0       	rjmp	.+2      	; 0x180c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    180a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    180c:	89 81       	ldd	r24, Y+1	; 0x01
}
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	08 95       	ret

0000181e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	00 d0       	rcall	.+0      	; 0x1824 <GPIO_setupPortDirection+0x6>
    1824:	00 d0       	rcall	.+0      	; 0x1826 <GPIO_setupPortDirection+0x8>
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	89 83       	std	Y+1, r24	; 0x01
    182c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	84 30       	cpi	r24, 0x04	; 4
    1832:	90 f5       	brcc	.+100    	; 0x1898 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	3c 83       	std	Y+4, r19	; 0x04
    183c:	2b 83       	std	Y+3, r18	; 0x03
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	9c 81       	ldd	r25, Y+4	; 0x04
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	91 05       	cpc	r25, r1
    1846:	d1 f0       	breq	.+52     	; 0x187c <GPIO_setupPortDirection+0x5e>
    1848:	2b 81       	ldd	r18, Y+3	; 0x03
    184a:	3c 81       	ldd	r19, Y+4	; 0x04
    184c:	22 30       	cpi	r18, 0x02	; 2
    184e:	31 05       	cpc	r19, r1
    1850:	2c f4       	brge	.+10     	; 0x185c <GPIO_setupPortDirection+0x3e>
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	9c 81       	ldd	r25, Y+4	; 0x04
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	61 f0       	breq	.+24     	; 0x1872 <GPIO_setupPortDirection+0x54>
    185a:	1e c0       	rjmp	.+60     	; 0x1898 <GPIO_setupPortDirection+0x7a>
    185c:	2b 81       	ldd	r18, Y+3	; 0x03
    185e:	3c 81       	ldd	r19, Y+4	; 0x04
    1860:	22 30       	cpi	r18, 0x02	; 2
    1862:	31 05       	cpc	r19, r1
    1864:	81 f0       	breq	.+32     	; 0x1886 <GPIO_setupPortDirection+0x68>
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	9c 81       	ldd	r25, Y+4	; 0x04
    186a:	83 30       	cpi	r24, 0x03	; 3
    186c:	91 05       	cpc	r25, r1
    186e:	81 f0       	breq	.+32     	; 0x1890 <GPIO_setupPortDirection+0x72>
    1870:	13 c0       	rjmp	.+38     	; 0x1898 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1872:	ea e3       	ldi	r30, 0x3A	; 58
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	80 83       	st	Z, r24
    187a:	0e c0       	rjmp	.+28     	; 0x1898 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    187c:	e7 e3       	ldi	r30, 0x37	; 55
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	80 83       	st	Z, r24
    1884:	09 c0       	rjmp	.+18     	; 0x1898 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1886:	e4 e3       	ldi	r30, 0x34	; 52
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	80 83       	st	Z, r24
    188e:	04 c0       	rjmp	.+8      	; 0x1898 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1890:	e1 e3       	ldi	r30, 0x31	; 49
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	80 83       	st	Z, r24
			break;
		}
	}
}
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <GPIO_writePort+0x6>
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <GPIO_writePort+0x8>
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	84 30       	cpi	r24, 0x04	; 4
    18ba:	90 f5       	brcc	.+100    	; 0x1920 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	3c 83       	std	Y+4, r19	; 0x04
    18c4:	2b 83       	std	Y+3, r18	; 0x03
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ca:	81 30       	cpi	r24, 0x01	; 1
    18cc:	91 05       	cpc	r25, r1
    18ce:	d1 f0       	breq	.+52     	; 0x1904 <GPIO_writePort+0x5e>
    18d0:	2b 81       	ldd	r18, Y+3	; 0x03
    18d2:	3c 81       	ldd	r19, Y+4	; 0x04
    18d4:	22 30       	cpi	r18, 0x02	; 2
    18d6:	31 05       	cpc	r19, r1
    18d8:	2c f4       	brge	.+10     	; 0x18e4 <GPIO_writePort+0x3e>
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	9c 81       	ldd	r25, Y+4	; 0x04
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	61 f0       	breq	.+24     	; 0x18fa <GPIO_writePort+0x54>
    18e2:	1e c0       	rjmp	.+60     	; 0x1920 <GPIO_writePort+0x7a>
    18e4:	2b 81       	ldd	r18, Y+3	; 0x03
    18e6:	3c 81       	ldd	r19, Y+4	; 0x04
    18e8:	22 30       	cpi	r18, 0x02	; 2
    18ea:	31 05       	cpc	r19, r1
    18ec:	81 f0       	breq	.+32     	; 0x190e <GPIO_writePort+0x68>
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	9c 81       	ldd	r25, Y+4	; 0x04
    18f2:	83 30       	cpi	r24, 0x03	; 3
    18f4:	91 05       	cpc	r25, r1
    18f6:	81 f0       	breq	.+32     	; 0x1918 <GPIO_writePort+0x72>
    18f8:	13 c0       	rjmp	.+38     	; 0x1920 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    18fa:	eb e3       	ldi	r30, 0x3B	; 59
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	80 83       	st	Z, r24
    1902:	0e c0       	rjmp	.+28     	; 0x1920 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1904:	e8 e3       	ldi	r30, 0x38	; 56
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	80 83       	st	Z, r24
    190c:	09 c0       	rjmp	.+18     	; 0x1920 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    190e:	e5 e3       	ldi	r30, 0x35	; 53
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	80 83       	st	Z, r24
    1916:	04 c0       	rjmp	.+8      	; 0x1920 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1918:	e2 e3       	ldi	r30, 0x32	; 50
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	08 95       	ret

0000192e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	00 d0       	rcall	.+0      	; 0x1934 <GPIO_readPort+0x6>
    1934:	00 d0       	rcall	.+0      	; 0x1936 <GPIO_readPort+0x8>
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    193c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	84 30       	cpi	r24, 0x04	; 4
    1942:	90 f5       	brcc	.+100    	; 0x19a8 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	3c 83       	std	Y+4, r19	; 0x04
    194c:	2b 83       	std	Y+3, r18	; 0x03
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	9c 81       	ldd	r25, Y+4	; 0x04
    1952:	81 30       	cpi	r24, 0x01	; 1
    1954:	91 05       	cpc	r25, r1
    1956:	d1 f0       	breq	.+52     	; 0x198c <GPIO_readPort+0x5e>
    1958:	2b 81       	ldd	r18, Y+3	; 0x03
    195a:	3c 81       	ldd	r19, Y+4	; 0x04
    195c:	22 30       	cpi	r18, 0x02	; 2
    195e:	31 05       	cpc	r19, r1
    1960:	2c f4       	brge	.+10     	; 0x196c <GPIO_readPort+0x3e>
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	00 97       	sbiw	r24, 0x00	; 0
    1968:	61 f0       	breq	.+24     	; 0x1982 <GPIO_readPort+0x54>
    196a:	1e c0       	rjmp	.+60     	; 0x19a8 <GPIO_readPort+0x7a>
    196c:	2b 81       	ldd	r18, Y+3	; 0x03
    196e:	3c 81       	ldd	r19, Y+4	; 0x04
    1970:	22 30       	cpi	r18, 0x02	; 2
    1972:	31 05       	cpc	r19, r1
    1974:	81 f0       	breq	.+32     	; 0x1996 <GPIO_readPort+0x68>
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	9c 81       	ldd	r25, Y+4	; 0x04
    197a:	83 30       	cpi	r24, 0x03	; 3
    197c:	91 05       	cpc	r25, r1
    197e:	81 f0       	breq	.+32     	; 0x19a0 <GPIO_readPort+0x72>
    1980:	13 c0       	rjmp	.+38     	; 0x19a8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1982:	e9 e3       	ldi	r30, 0x39	; 57
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	89 83       	std	Y+1, r24	; 0x01
    198a:	0e c0       	rjmp	.+28     	; 0x19a8 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    198c:	e6 e3       	ldi	r30, 0x36	; 54
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	89 83       	std	Y+1, r24	; 0x01
    1994:	09 c0       	rjmp	.+18     	; 0x19a8 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1996:	e3 e3       	ldi	r30, 0x33	; 51
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	89 83       	std	Y+1, r24	; 0x01
    199e:	04 c0       	rjmp	.+8      	; 0x19a8 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    19a0:	e0 e3       	ldi	r30, 0x30	; 48
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <start>:
 * Description :
 * Initialize the LCD:
 * Start Application with displaying welcome and wait to  enter c
 */
void start(void)
{
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	66 97       	sbiw	r28, 0x16	; 22
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	cd bf       	out	0x3d, r28	; 61
	Ex_INT_ConfigType Config_Ptr =
	{
			EX_INT0,FALLING_EDGE,NORMAL_EX_INT_PIN
	};
    19cc:	ce 01       	movw	r24, r28
    19ce:	0f 96       	adiw	r24, 0x0f	; 15
    19d0:	9b 8b       	std	Y+19, r25	; 0x13
    19d2:	8a 8b       	std	Y+18, r24	; 0x12
    19d4:	e7 e7       	ldi	r30, 0x77	; 119
    19d6:	f1 e0       	ldi	r31, 0x01	; 1
    19d8:	fd 8b       	std	Y+21, r31	; 0x15
    19da:	ec 8b       	std	Y+20, r30	; 0x14
    19dc:	f3 e0       	ldi	r31, 0x03	; 3
    19de:	fe 8b       	std	Y+22, r31	; 0x16
    19e0:	ec 89       	ldd	r30, Y+20	; 0x14
    19e2:	fd 89       	ldd	r31, Y+21	; 0x15
    19e4:	00 80       	ld	r0, Z
    19e6:	8c 89       	ldd	r24, Y+20	; 0x14
    19e8:	9d 89       	ldd	r25, Y+21	; 0x15
    19ea:	01 96       	adiw	r24, 0x01	; 1
    19ec:	9d 8b       	std	Y+21, r25	; 0x15
    19ee:	8c 8b       	std	Y+20, r24	; 0x14
    19f0:	ea 89       	ldd	r30, Y+18	; 0x12
    19f2:	fb 89       	ldd	r31, Y+19	; 0x13
    19f4:	00 82       	st	Z, r0
    19f6:	8a 89       	ldd	r24, Y+18	; 0x12
    19f8:	9b 89       	ldd	r25, Y+19	; 0x13
    19fa:	01 96       	adiw	r24, 0x01	; 1
    19fc:	9b 8b       	std	Y+19, r25	; 0x13
    19fe:	8a 8b       	std	Y+18, r24	; 0x12
    1a00:	9e 89       	ldd	r25, Y+22	; 0x16
    1a02:	91 50       	subi	r25, 0x01	; 1
    1a04:	9e 8b       	std	Y+22, r25	; 0x16
    1a06:	ee 89       	ldd	r30, Y+22	; 0x16
    1a08:	ee 23       	and	r30, r30
    1a0a:	51 f7       	brne	.-44     	; 0x19e0 <start+0x28>
	Ex_INT_init(&Config_Ptr);
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	0f 96       	adiw	r24, 0x0f	; 15
    1a10:	0e 94 2d 08 	call	0x105a	; 0x105a <Ex_INT_init>
	INT0_setCallBack(Random);
    1a14:	89 e8       	ldi	r24, 0x89	; 137
    1a16:	94 e1       	ldi	r25, 0x14	; 20
    1a18:	0e 94 68 09 	call	0x12d0	; 0x12d0 <INT0_setCallBack>
	sei()
    1a1c:	af e5       	ldi	r26, 0x5F	; 95
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	ef e5       	ldi	r30, 0x5F	; 95
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	80 68       	ori	r24, 0x80	; 128
    1a28:	8c 93       	st	X, r24

	LCD_init();
    1a2a:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <LCD_init>
	LCD_displayStringRowColumn(0,4,"Hello Sir");
    1a2e:	20 e6       	ldi	r18, 0x60	; 96
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	64 e0       	ldi	r22, 0x04	; 4
    1a36:	a9 01       	movw	r20, r18
    1a38:	0e 94 57 20 	call	0x40ae	; 0x40ae <LCD_displayStringRowColumn>
    1a3c:	76 c0       	rjmp	.+236    	; 0x1b2a <start+0x172>
	while(key != 'c')
	{
		key=KEYPAD_getPressedKey();
    1a3e:	0e 94 92 14 	call	0x2924	; 0x2924 <KEYPAD_getPressedKey>
    1a42:	80 93 80 01 	sts	0x0180, r24
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	a8 e4       	ldi	r26, 0x48	; 72
    1a4c:	b3 e4       	ldi	r27, 0x43	; 67
    1a4e:	8b 87       	std	Y+11, r24	; 0x0b
    1a50:	9c 87       	std	Y+12, r25	; 0x0c
    1a52:	ad 87       	std	Y+13, r26	; 0x0d
    1a54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	4a ef       	ldi	r20, 0xFA	; 250
    1a64:	54 e4       	ldi	r21, 0x44	; 68
    1a66:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	8f 83       	std	Y+7, r24	; 0x07
    1a70:	98 87       	std	Y+8, r25	; 0x08
    1a72:	a9 87       	std	Y+9, r26	; 0x09
    1a74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a76:	6f 81       	ldd	r22, Y+7	; 0x07
    1a78:	78 85       	ldd	r23, Y+8	; 0x08
    1a7a:	89 85       	ldd	r24, Y+9	; 0x09
    1a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e8       	ldi	r20, 0x80	; 128
    1a84:	5f e3       	ldi	r21, 0x3F	; 63
    1a86:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1a8a:	88 23       	and	r24, r24
    1a8c:	2c f4       	brge	.+10     	; 0x1a98 <start+0xe0>
		__ticks = 1;
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	9e 83       	std	Y+6, r25	; 0x06
    1a94:	8d 83       	std	Y+5, r24	; 0x05
    1a96:	3f c0       	rjmp	.+126    	; 0x1b16 <start+0x15e>
	else if (__tmp > 65535)
    1a98:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9a:	78 85       	ldd	r23, Y+8	; 0x08
    1a9c:	89 85       	ldd	r24, Y+9	; 0x09
    1a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	3f ef       	ldi	r19, 0xFF	; 255
    1aa4:	4f e7       	ldi	r20, 0x7F	; 127
    1aa6:	57 e4       	ldi	r21, 0x47	; 71
    1aa8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1aac:	18 16       	cp	r1, r24
    1aae:	4c f5       	brge	.+82     	; 0x1b02 <start+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e2       	ldi	r20, 0x20	; 32
    1abe:	51 e4       	ldi	r21, 0x41	; 65
    1ac0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	bc 01       	movw	r22, r24
    1aca:	cd 01       	movw	r24, r26
    1acc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	9e 83       	std	Y+6, r25	; 0x06
    1ad6:	8d 83       	std	Y+5, r24	; 0x05
    1ad8:	0f c0       	rjmp	.+30     	; 0x1af8 <start+0x140>
    1ada:	88 ec       	ldi	r24, 0xC8	; 200
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	9c 83       	std	Y+4, r25	; 0x04
    1ae0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	f1 f7       	brne	.-4      	; 0x1ae6 <start+0x12e>
    1aea:	9c 83       	std	Y+4, r25	; 0x04
    1aec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aee:	8d 81       	ldd	r24, Y+5	; 0x05
    1af0:	9e 81       	ldd	r25, Y+6	; 0x06
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	9e 83       	std	Y+6, r25	; 0x06
    1af6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af8:	8d 81       	ldd	r24, Y+5	; 0x05
    1afa:	9e 81       	ldd	r25, Y+6	; 0x06
    1afc:	00 97       	sbiw	r24, 0x00	; 0
    1afe:	69 f7       	brne	.-38     	; 0x1ada <start+0x122>
    1b00:	14 c0       	rjmp	.+40     	; 0x1b2a <start+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b02:	6f 81       	ldd	r22, Y+7	; 0x07
    1b04:	78 85       	ldd	r23, Y+8	; 0x08
    1b06:	89 85       	ldd	r24, Y+9	; 0x09
    1b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	9e 83       	std	Y+6, r25	; 0x06
    1b14:	8d 83       	std	Y+5, r24	; 0x05
    1b16:	8d 81       	ldd	r24, Y+5	; 0x05
    1b18:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1a:	9a 83       	std	Y+2, r25	; 0x02
    1b1c:	89 83       	std	Y+1, r24	; 0x01
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	9a 81       	ldd	r25, Y+2	; 0x02
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	f1 f7       	brne	.-4      	; 0x1b22 <start+0x16a>
    1b26:	9a 83       	std	Y+2, r25	; 0x02
    1b28:	89 83       	std	Y+1, r24	; 0x01
	INT0_setCallBack(Random);
	sei()

	LCD_init();
	LCD_displayStringRowColumn(0,4,"Hello Sir");
	while(key != 'c')
    1b2a:	80 91 80 01 	lds	r24, 0x0180
    1b2e:	83 36       	cpi	r24, 0x63	; 99
    1b30:	09 f0       	breq	.+2      	; 0x1b34 <start+0x17c>
    1b32:	85 cf       	rjmp	.-246    	; 0x1a3e <start+0x86>
	{
		key=KEYPAD_getPressedKey();
		_delay_ms(200);
	}
	LCD_clearScreen();
    1b34:	0e 94 c1 20 	call	0x4182	; 0x4182 <LCD_clearScreen>
}
    1b38:	66 96       	adiw	r28, 0x16	; 22
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	f8 94       	cli
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	cd bf       	out	0x3d, r28	; 61
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <First_NUM>:
/*
 * Description :
 * Get the first number and operation of calculation
 */
void First_NUM(void)
{
    1b4a:	0f 93       	push	r16
    1b4c:	1f 93       	push	r17
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	2e 97       	sbiw	r28, 0x0e	; 14
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
	num1_counter=0;//start from digit 1
    1b62:	10 92 81 01 	sts	0x0181, r1
	while(1)
	{

		key=KEYPAD_getPressedKey();
    1b66:	0e 94 92 14 	call	0x2924	; 0x2924 <KEYPAD_getPressedKey>
    1b6a:	80 93 80 01 	sts	0x0180, r24
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	a8 e4       	ldi	r26, 0x48	; 72
    1b74:	b3 e4       	ldi	r27, 0x43	; 67
    1b76:	8b 87       	std	Y+11, r24	; 0x0b
    1b78:	9c 87       	std	Y+12, r25	; 0x0c
    1b7a:	ad 87       	std	Y+13, r26	; 0x0d
    1b7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	4a ef       	ldi	r20, 0xFA	; 250
    1b8c:	54 e4       	ldi	r21, 0x44	; 68
    1b8e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	8f 83       	std	Y+7, r24	; 0x07
    1b98:	98 87       	std	Y+8, r25	; 0x08
    1b9a:	a9 87       	std	Y+9, r26	; 0x09
    1b9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba0:	78 85       	ldd	r23, Y+8	; 0x08
    1ba2:	89 85       	ldd	r24, Y+9	; 0x09
    1ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e8       	ldi	r20, 0x80	; 128
    1bac:	5f e3       	ldi	r21, 0x3F	; 63
    1bae:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1bb2:	88 23       	and	r24, r24
    1bb4:	2c f4       	brge	.+10     	; 0x1bc0 <First_NUM+0x76>
		__ticks = 1;
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	8d 83       	std	Y+5, r24	; 0x05
    1bbe:	3f c0       	rjmp	.+126    	; 0x1c3e <First_NUM+0xf4>
	else if (__tmp > 65535)
    1bc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc2:	78 85       	ldd	r23, Y+8	; 0x08
    1bc4:	89 85       	ldd	r24, Y+9	; 0x09
    1bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	3f ef       	ldi	r19, 0xFF	; 255
    1bcc:	4f e7       	ldi	r20, 0x7F	; 127
    1bce:	57 e4       	ldi	r21, 0x47	; 71
    1bd0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1bd4:	18 16       	cp	r1, r24
    1bd6:	4c f5       	brge	.+82     	; 0x1c2a <First_NUM+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e2       	ldi	r20, 0x20	; 32
    1be6:	51 e4       	ldi	r21, 0x41	; 65
    1be8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	bc 01       	movw	r22, r24
    1bf2:	cd 01       	movw	r24, r26
    1bf4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	9e 83       	std	Y+6, r25	; 0x06
    1bfe:	8d 83       	std	Y+5, r24	; 0x05
    1c00:	0f c0       	rjmp	.+30     	; 0x1c20 <First_NUM+0xd6>
    1c02:	88 ec       	ldi	r24, 0xC8	; 200
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	9c 83       	std	Y+4, r25	; 0x04
    1c08:	8b 83       	std	Y+3, r24	; 0x03
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <First_NUM+0xc4>
    1c12:	9c 83       	std	Y+4, r25	; 0x04
    1c14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c16:	8d 81       	ldd	r24, Y+5	; 0x05
    1c18:	9e 81       	ldd	r25, Y+6	; 0x06
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	9e 83       	std	Y+6, r25	; 0x06
    1c1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c20:	8d 81       	ldd	r24, Y+5	; 0x05
    1c22:	9e 81       	ldd	r25, Y+6	; 0x06
    1c24:	00 97       	sbiw	r24, 0x00	; 0
    1c26:	69 f7       	brne	.-38     	; 0x1c02 <First_NUM+0xb8>
    1c28:	14 c0       	rjmp	.+40     	; 0x1c52 <First_NUM+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2c:	78 85       	ldd	r23, Y+8	; 0x08
    1c2e:	89 85       	ldd	r24, Y+9	; 0x09
    1c30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c32:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	9e 83       	std	Y+6, r25	; 0x06
    1c3c:	8d 83       	std	Y+5, r24	; 0x05
    1c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c40:	9e 81       	ldd	r25, Y+6	; 0x06
    1c42:	9a 83       	std	Y+2, r25	; 0x02
    1c44:	89 83       	std	Y+1, r24	; 0x01
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <First_NUM+0x100>
    1c4e:	9a 83       	std	Y+2, r25	; 0x02
    1c50:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);

		if(random_num == 0)
    1c52:	80 91 76 01 	lds	r24, 0x0176
    1c56:	88 23       	and	r24, r24
    1c58:	61 f4       	brne	.+24     	; 0x1c72 <First_NUM+0x128>
		{
			random_num = 1;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	80 93 76 01 	sts	0x0176, r24

			key = rand() % 10;
    1c60:	0e 94 a4 21 	call	0x4348	; 0x4348 <rand>
    1c64:	2a e0       	ldi	r18, 0x0A	; 10
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	b9 01       	movw	r22, r18
    1c6a:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__divmodhi4>
    1c6e:	80 93 80 01 	sts	0x0180, r24
		}

		/*
		 * Break loop when user complete entering first number and operation
		 */
		if(key == '+' || key == '-' || key == '/' || key == '*')
    1c72:	80 91 80 01 	lds	r24, 0x0180
    1c76:	8b 32       	cpi	r24, 0x2B	; 43
    1c78:	61 f0       	breq	.+24     	; 0x1c92 <First_NUM+0x148>
    1c7a:	80 91 80 01 	lds	r24, 0x0180
    1c7e:	8d 32       	cpi	r24, 0x2D	; 45
    1c80:	41 f0       	breq	.+16     	; 0x1c92 <First_NUM+0x148>
    1c82:	80 91 80 01 	lds	r24, 0x0180
    1c86:	8f 32       	cpi	r24, 0x2F	; 47
    1c88:	21 f0       	breq	.+8      	; 0x1c92 <First_NUM+0x148>
    1c8a:	80 91 80 01 	lds	r24, 0x0180
    1c8e:	8a 32       	cpi	r24, 0x2A	; 42
    1c90:	99 f4       	brne	.+38     	; 0x1cb8 <First_NUM+0x16e>
		{
			opration=key;
    1c92:	80 91 80 01 	lds	r24, 0x0180
    1c96:	80 93 83 01 	sts	0x0183, r24
			LCD_displayCharacter(opration);
    1c9a:	80 91 83 01 	lds	r24, 0x0183
    1c9e:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <LCD_displayCharacter>
		 */
		number1[num1_counter]=key;
		num1_counter++;
		LCD_intgerToString(key);
	}
}
    1ca2:	2e 96       	adiw	r28, 0x0e	; 14
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	de bf       	out	0x3e, r29	; 62
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	cd bf       	out	0x3d, r28	; 61
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	1f 91       	pop	r17
    1cb4:	0f 91       	pop	r16
    1cb6:	08 95       	ret


		/*
		 * Store all digits of first number and display number on LCD
		 */
		number1[num1_counter]=key;
    1cb8:	80 91 81 01 	lds	r24, 0x0181
    1cbc:	08 2f       	mov	r16, r24
    1cbe:	10 e0       	ldi	r17, 0x00	; 0
    1cc0:	80 91 80 01 	lds	r24, 0x0180
    1cc4:	88 2f       	mov	r24, r24
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	a0 e0       	ldi	r26, 0x00	; 0
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	bc 01       	movw	r22, r24
    1cce:	cd 01       	movw	r24, r26
    1cd0:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    1cd4:	9b 01       	movw	r18, r22
    1cd6:	ac 01       	movw	r20, r24
    1cd8:	c8 01       	movw	r24, r16
    1cda:	88 0f       	add	r24, r24
    1cdc:	99 1f       	adc	r25, r25
    1cde:	88 0f       	add	r24, r24
    1ce0:	99 1f       	adc	r25, r25
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	ec 57       	subi	r30, 0x7C	; 124
    1ce6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ce8:	20 83       	st	Z, r18
    1cea:	31 83       	std	Z+1, r19	; 0x01
    1cec:	42 83       	std	Z+2, r20	; 0x02
    1cee:	53 83       	std	Z+3, r21	; 0x03
		num1_counter++;
    1cf0:	80 91 81 01 	lds	r24, 0x0181
    1cf4:	8f 5f       	subi	r24, 0xFF	; 255
    1cf6:	80 93 81 01 	sts	0x0181, r24
		LCD_intgerToString(key);
    1cfa:	80 91 80 01 	lds	r24, 0x0180
    1cfe:	88 2f       	mov	r24, r24
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	0e 94 70 20 	call	0x40e0	; 0x40e0 <LCD_intgerToString>
    1d06:	2f cf       	rjmp	.-418    	; 0x1b66 <First_NUM+0x1c>

00001d08 <Second_NUM>:
/*
 * Description :
 * Get the first number and operation of calculation
 */
void Second_NUM(void)
{
    1d08:	0f 93       	push	r16
    1d0a:	1f 93       	push	r17
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	2e 97       	sbiw	r28, 0x0e	; 14
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	de bf       	out	0x3e, r29	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	cd bf       	out	0x3d, r28	; 61
	num2_counter=0;
    1d20:	10 92 82 01 	sts	0x0182, r1
	while(1)
	{
		key=KEYPAD_getPressedKey();
    1d24:	0e 94 92 14 	call	0x2924	; 0x2924 <KEYPAD_getPressedKey>
    1d28:	80 93 80 01 	sts	0x0180, r24
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	a8 e4       	ldi	r26, 0x48	; 72
    1d32:	b3 e4       	ldi	r27, 0x43	; 67
    1d34:	8b 87       	std	Y+11, r24	; 0x0b
    1d36:	9c 87       	std	Y+12, r25	; 0x0c
    1d38:	ad 87       	std	Y+13, r26	; 0x0d
    1d3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	4a ef       	ldi	r20, 0xFA	; 250
    1d4a:	54 e4       	ldi	r21, 0x44	; 68
    1d4c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	8f 83       	std	Y+7, r24	; 0x07
    1d56:	98 87       	std	Y+8, r25	; 0x08
    1d58:	a9 87       	std	Y+9, r26	; 0x09
    1d5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5e:	78 85       	ldd	r23, Y+8	; 0x08
    1d60:	89 85       	ldd	r24, Y+9	; 0x09
    1d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e8       	ldi	r20, 0x80	; 128
    1d6a:	5f e3       	ldi	r21, 0x3F	; 63
    1d6c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1d70:	88 23       	and	r24, r24
    1d72:	2c f4       	brge	.+10     	; 0x1d7e <Second_NUM+0x76>
		__ticks = 1;
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	9e 83       	std	Y+6, r25	; 0x06
    1d7a:	8d 83       	std	Y+5, r24	; 0x05
    1d7c:	3f c0       	rjmp	.+126    	; 0x1dfc <Second_NUM+0xf4>
	else if (__tmp > 65535)
    1d7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d80:	78 85       	ldd	r23, Y+8	; 0x08
    1d82:	89 85       	ldd	r24, Y+9	; 0x09
    1d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	3f ef       	ldi	r19, 0xFF	; 255
    1d8a:	4f e7       	ldi	r20, 0x7F	; 127
    1d8c:	57 e4       	ldi	r21, 0x47	; 71
    1d8e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1d92:	18 16       	cp	r1, r24
    1d94:	4c f5       	brge	.+82     	; 0x1de8 <Second_NUM+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	40 e2       	ldi	r20, 0x20	; 32
    1da4:	51 e4       	ldi	r21, 0x41	; 65
    1da6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	bc 01       	movw	r22, r24
    1db0:	cd 01       	movw	r24, r26
    1db2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	9e 83       	std	Y+6, r25	; 0x06
    1dbc:	8d 83       	std	Y+5, r24	; 0x05
    1dbe:	0f c0       	rjmp	.+30     	; 0x1dde <Second_NUM+0xd6>
    1dc0:	88 ec       	ldi	r24, 0xC8	; 200
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	9c 83       	std	Y+4, r25	; 0x04
    1dc6:	8b 83       	std	Y+3, r24	; 0x03
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	9c 81       	ldd	r25, Y+4	; 0x04
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	f1 f7       	brne	.-4      	; 0x1dcc <Second_NUM+0xc4>
    1dd0:	9c 83       	std	Y+4, r25	; 0x04
    1dd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	9e 83       	std	Y+6, r25	; 0x06
    1ddc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dde:	8d 81       	ldd	r24, Y+5	; 0x05
    1de0:	9e 81       	ldd	r25, Y+6	; 0x06
    1de2:	00 97       	sbiw	r24, 0x00	; 0
    1de4:	69 f7       	brne	.-38     	; 0x1dc0 <Second_NUM+0xb8>
    1de6:	14 c0       	rjmp	.+40     	; 0x1e10 <Second_NUM+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dea:	78 85       	ldd	r23, Y+8	; 0x08
    1dec:	89 85       	ldd	r24, Y+9	; 0x09
    1dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	9e 83       	std	Y+6, r25	; 0x06
    1dfa:	8d 83       	std	Y+5, r24	; 0x05
    1dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1e00:	9a 83       	std	Y+2, r25	; 0x02
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	9a 81       	ldd	r25, Y+2	; 0x02
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <Second_NUM+0x100>
    1e0c:	9a 83       	std	Y+2, r25	; 0x02
    1e0e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);

		if(random_num == 0)
    1e10:	80 91 76 01 	lds	r24, 0x0176
    1e14:	88 23       	and	r24, r24
    1e16:	61 f4       	brne	.+24     	; 0x1e30 <Second_NUM+0x128>
		{
			random_num = 1;
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	80 93 76 01 	sts	0x0176, r24

			key = rand() % 10;
    1e1e:	0e 94 a4 21 	call	0x4348	; 0x4348 <rand>
    1e22:	2a e0       	ldi	r18, 0x0A	; 10
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	b9 01       	movw	r22, r18
    1e28:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <__divmodhi4>
    1e2c:	80 93 80 01 	sts	0x0180, r24


		/*
		 * Break loop when user complete entering second number
		 */
		if(key == '=')
    1e30:	80 91 80 01 	lds	r24, 0x0180
    1e34:	8d 33       	cpi	r24, 0x3D	; 61
    1e36:	79 f4       	brne	.+30     	; 0x1e56 <Second_NUM+0x14e>
		{
			LCD_displayCharacter(key);
    1e38:	80 91 80 01 	lds	r24, 0x0180
    1e3c:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <LCD_displayCharacter>
		 */
		number2[num2_counter]=key;
		num2_counter++;
		LCD_intgerToString(key);
	}
}
    1e40:	2e 96       	adiw	r28, 0x0e	; 14
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	f8 94       	cli
    1e46:	de bf       	out	0x3e, r29	; 62
    1e48:	0f be       	out	0x3f, r0	; 63
    1e4a:	cd bf       	out	0x3d, r28	; 61
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	1f 91       	pop	r17
    1e52:	0f 91       	pop	r16
    1e54:	08 95       	ret


		/*
		 * Store all digits of second number and display number on LCD
		 */
		number2[num2_counter]=key;
    1e56:	80 91 82 01 	lds	r24, 0x0182
    1e5a:	08 2f       	mov	r16, r24
    1e5c:	10 e0       	ldi	r17, 0x00	; 0
    1e5e:	80 91 80 01 	lds	r24, 0x0180
    1e62:	88 2f       	mov	r24, r24
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	a0 e0       	ldi	r26, 0x00	; 0
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	bc 01       	movw	r22, r24
    1e6c:	cd 01       	movw	r24, r26
    1e6e:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    1e72:	9b 01       	movw	r18, r22
    1e74:	ac 01       	movw	r20, r24
    1e76:	c8 01       	movw	r24, r16
    1e78:	88 0f       	add	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	88 0f       	add	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	fc 01       	movw	r30, r24
    1e82:	e4 55       	subi	r30, 0x54	; 84
    1e84:	fe 4f       	sbci	r31, 0xFE	; 254
    1e86:	20 83       	st	Z, r18
    1e88:	31 83       	std	Z+1, r19	; 0x01
    1e8a:	42 83       	std	Z+2, r20	; 0x02
    1e8c:	53 83       	std	Z+3, r21	; 0x03
		num2_counter++;
    1e8e:	80 91 82 01 	lds	r24, 0x0182
    1e92:	8f 5f       	subi	r24, 0xFF	; 255
    1e94:	80 93 82 01 	sts	0x0182, r24
		LCD_intgerToString(key);
    1e98:	80 91 80 01 	lds	r24, 0x0180
    1e9c:	88 2f       	mov	r24, r24
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	0e 94 70 20 	call	0x40e0	; 0x40e0 <LCD_intgerToString>
    1ea4:	3f cf       	rjmp	.-386    	; 0x1d24 <Second_NUM+0x1c>

00001ea6 <calc_sum>:
/*
 * Description :
 * Concatenate all digits of two number then display result of sum on LCD
 */
void calc_sum(float32 *first_num,float32*second_num,uint8 digit1,uint8 digit2)
{
    1ea6:	ef 92       	push	r14
    1ea8:	ff 92       	push	r15
    1eaa:	0f 93       	push	r16
    1eac:	1f 93       	push	r17
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	6e 97       	sbiw	r28, 0x1e	; 30
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	de bf       	out	0x3e, r29	; 62
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	cd bf       	out	0x3d, r28	; 61
    1ec2:	9a 8f       	std	Y+26, r25	; 0x1a
    1ec4:	89 8f       	std	Y+25, r24	; 0x19
    1ec6:	7c 8f       	std	Y+28, r23	; 0x1c
    1ec8:	6b 8f       	std	Y+27, r22	; 0x1b
    1eca:	4d 8f       	std	Y+29, r20	; 0x1d
    1ecc:	2e 8f       	std	Y+30, r18	; 0x1e
	float32 num1=first_num[0];
    1ece:	e9 8d       	ldd	r30, Y+25	; 0x19
    1ed0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1ed2:	80 81       	ld	r24, Z
    1ed4:	91 81       	ldd	r25, Z+1	; 0x01
    1ed6:	a2 81       	ldd	r26, Z+2	; 0x02
    1ed8:	b3 81       	ldd	r27, Z+3	; 0x03
    1eda:	8d 8b       	std	Y+21, r24	; 0x15
    1edc:	9e 8b       	std	Y+22, r25	; 0x16
    1ede:	af 8b       	std	Y+23, r26	; 0x17
    1ee0:	b8 8f       	std	Y+24, r27	; 0x18
	float32 num2=second_num[0];
    1ee2:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1ee4:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1ee6:	80 81       	ld	r24, Z
    1ee8:	91 81       	ldd	r25, Z+1	; 0x01
    1eea:	a2 81       	ldd	r26, Z+2	; 0x02
    1eec:	b3 81       	ldd	r27, Z+3	; 0x03
    1eee:	89 8b       	std	Y+17, r24	; 0x11
    1ef0:	9a 8b       	std	Y+18, r25	; 0x12
    1ef2:	ab 8b       	std	Y+19, r26	; 0x13
    1ef4:	bc 8b       	std	Y+20, r27	; 0x14

	/*
	 *  Concatenate all digits of first number
	 */
	for(uint8 counter=1;counter<digit1;counter++)
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	88 8b       	std	Y+16, r24	; 0x10
    1efa:	2c c0       	rjmp	.+88     	; 0x1f54 <calc_sum+0xae>
	{
		num1 = num1*10 +first_num[counter];
    1efc:	6d 89       	ldd	r22, Y+21	; 0x15
    1efe:	7e 89       	ldd	r23, Y+22	; 0x16
    1f00:	8f 89       	ldd	r24, Y+23	; 0x17
    1f02:	98 8d       	ldd	r25, Y+24	; 0x18
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e2       	ldi	r20, 0x20	; 32
    1f0a:	51 e4       	ldi	r21, 0x41	; 65
    1f0c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	7c 01       	movw	r14, r24
    1f16:	8d 01       	movw	r16, r26
    1f18:	88 89       	ldd	r24, Y+16	; 0x10
    1f1a:	88 2f       	mov	r24, r24
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	9c 01       	movw	r18, r24
    1f20:	22 0f       	add	r18, r18
    1f22:	33 1f       	adc	r19, r19
    1f24:	22 0f       	add	r18, r18
    1f26:	33 1f       	adc	r19, r19
    1f28:	89 8d       	ldd	r24, Y+25	; 0x19
    1f2a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f2c:	fc 01       	movw	r30, r24
    1f2e:	e2 0f       	add	r30, r18
    1f30:	f3 1f       	adc	r31, r19
    1f32:	20 81       	ld	r18, Z
    1f34:	31 81       	ldd	r19, Z+1	; 0x01
    1f36:	42 81       	ldd	r20, Z+2	; 0x02
    1f38:	53 81       	ldd	r21, Z+3	; 0x03
    1f3a:	c8 01       	movw	r24, r16
    1f3c:	b7 01       	movw	r22, r14
    1f3e:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	8d 8b       	std	Y+21, r24	; 0x15
    1f48:	9e 8b       	std	Y+22, r25	; 0x16
    1f4a:	af 8b       	std	Y+23, r26	; 0x17
    1f4c:	b8 8f       	std	Y+24, r27	; 0x18
	float32 num2=second_num[0];

	/*
	 *  Concatenate all digits of first number
	 */
	for(uint8 counter=1;counter<digit1;counter++)
    1f4e:	88 89       	ldd	r24, Y+16	; 0x10
    1f50:	8f 5f       	subi	r24, 0xFF	; 255
    1f52:	88 8b       	std	Y+16, r24	; 0x10
    1f54:	98 89       	ldd	r25, Y+16	; 0x10
    1f56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f58:	98 17       	cp	r25, r24
    1f5a:	80 f2       	brcs	.-96     	; 0x1efc <calc_sum+0x56>
		num1 = num1*10 +first_num[counter];
	}
	/*
	 *  Concatenate all digits of second number
	 */
	for(uint8 counter=1;counter<digit2;counter++)
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	8f 87       	std	Y+15, r24	; 0x0f
    1f60:	2c c0       	rjmp	.+88     	; 0x1fba <calc_sum+0x114>
	{
		num2= num2*10 +second_num[counter];
    1f62:	69 89       	ldd	r22, Y+17	; 0x11
    1f64:	7a 89       	ldd	r23, Y+18	; 0x12
    1f66:	8b 89       	ldd	r24, Y+19	; 0x13
    1f68:	9c 89       	ldd	r25, Y+20	; 0x14
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e2       	ldi	r20, 0x20	; 32
    1f70:	51 e4       	ldi	r21, 0x41	; 65
    1f72:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	7c 01       	movw	r14, r24
    1f7c:	8d 01       	movw	r16, r26
    1f7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f80:	88 2f       	mov	r24, r24
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	9c 01       	movw	r18, r24
    1f86:	22 0f       	add	r18, r18
    1f88:	33 1f       	adc	r19, r19
    1f8a:	22 0f       	add	r18, r18
    1f8c:	33 1f       	adc	r19, r19
    1f8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f92:	fc 01       	movw	r30, r24
    1f94:	e2 0f       	add	r30, r18
    1f96:	f3 1f       	adc	r31, r19
    1f98:	20 81       	ld	r18, Z
    1f9a:	31 81       	ldd	r19, Z+1	; 0x01
    1f9c:	42 81       	ldd	r20, Z+2	; 0x02
    1f9e:	53 81       	ldd	r21, Z+3	; 0x03
    1fa0:	c8 01       	movw	r24, r16
    1fa2:	b7 01       	movw	r22, r14
    1fa4:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	89 8b       	std	Y+17, r24	; 0x11
    1fae:	9a 8b       	std	Y+18, r25	; 0x12
    1fb0:	ab 8b       	std	Y+19, r26	; 0x13
    1fb2:	bc 8b       	std	Y+20, r27	; 0x14
		num1 = num1*10 +first_num[counter];
	}
	/*
	 *  Concatenate all digits of second number
	 */
	for(uint8 counter=1;counter<digit2;counter++)
    1fb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fb6:	8f 5f       	subi	r24, 0xFF	; 255
    1fb8:	8f 87       	std	Y+15, r24	; 0x0f
    1fba:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fbc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fbe:	98 17       	cp	r25, r24
    1fc0:	80 f2       	brcs	.-96     	; 0x1f62 <calc_sum+0xbc>


	/*
	 *  Display result on LCD and wait until enter c
	 */
	LCD_moveCursor(1, 0);
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	60 e0       	ldi	r22, 0x00	; 0
    1fc6:	0e 94 15 20 	call	0x402a	; 0x402a <LCD_moveCursor>
	LCD_intgerToString(num1+num2);
    1fca:	6d 89       	ldd	r22, Y+21	; 0x15
    1fcc:	7e 89       	ldd	r23, Y+22	; 0x16
    1fce:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd2:	29 89       	ldd	r18, Y+17	; 0x11
    1fd4:	3a 89       	ldd	r19, Y+18	; 0x12
    1fd6:	4b 89       	ldd	r20, Y+19	; 0x13
    1fd8:	5c 89       	ldd	r21, Y+20	; 0x14
    1fda:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	bc 01       	movw	r22, r24
    1fe4:	cd 01       	movw	r24, r26
    1fe6:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	0e 94 70 20 	call	0x40e0	; 0x40e0 <LCD_intgerToString>
    1ff2:	76 c0       	rjmp	.+236    	; 0x20e0 <calc_sum+0x23a>
	while(key != 'c')
	{
		key=KEYPAD_getPressedKey();
    1ff4:	0e 94 92 14 	call	0x2924	; 0x2924 <KEYPAD_getPressedKey>
    1ff8:	80 93 80 01 	sts	0x0180, r24
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	a8 e4       	ldi	r26, 0x48	; 72
    2002:	b3 e4       	ldi	r27, 0x43	; 67
    2004:	8b 87       	std	Y+11, r24	; 0x0b
    2006:	9c 87       	std	Y+12, r25	; 0x0c
    2008:	ad 87       	std	Y+13, r26	; 0x0d
    200a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200c:	6b 85       	ldd	r22, Y+11	; 0x0b
    200e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2010:	8d 85       	ldd	r24, Y+13	; 0x0d
    2012:	9e 85       	ldd	r25, Y+14	; 0x0e
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	4a ef       	ldi	r20, 0xFA	; 250
    201a:	54 e4       	ldi	r21, 0x44	; 68
    201c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	8f 83       	std	Y+7, r24	; 0x07
    2026:	98 87       	std	Y+8, r25	; 0x08
    2028:	a9 87       	std	Y+9, r26	; 0x09
    202a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    202c:	6f 81       	ldd	r22, Y+7	; 0x07
    202e:	78 85       	ldd	r23, Y+8	; 0x08
    2030:	89 85       	ldd	r24, Y+9	; 0x09
    2032:	9a 85       	ldd	r25, Y+10	; 0x0a
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e8       	ldi	r20, 0x80	; 128
    203a:	5f e3       	ldi	r21, 0x3F	; 63
    203c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2040:	88 23       	and	r24, r24
    2042:	2c f4       	brge	.+10     	; 0x204e <calc_sum+0x1a8>
		__ticks = 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9e 83       	std	Y+6, r25	; 0x06
    204a:	8d 83       	std	Y+5, r24	; 0x05
    204c:	3f c0       	rjmp	.+126    	; 0x20cc <calc_sum+0x226>
	else if (__tmp > 65535)
    204e:	6f 81       	ldd	r22, Y+7	; 0x07
    2050:	78 85       	ldd	r23, Y+8	; 0x08
    2052:	89 85       	ldd	r24, Y+9	; 0x09
    2054:	9a 85       	ldd	r25, Y+10	; 0x0a
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	3f ef       	ldi	r19, 0xFF	; 255
    205a:	4f e7       	ldi	r20, 0x7F	; 127
    205c:	57 e4       	ldi	r21, 0x47	; 71
    205e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2062:	18 16       	cp	r1, r24
    2064:	4c f5       	brge	.+82     	; 0x20b8 <calc_sum+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2066:	6b 85       	ldd	r22, Y+11	; 0x0b
    2068:	7c 85       	ldd	r23, Y+12	; 0x0c
    206a:	8d 85       	ldd	r24, Y+13	; 0x0d
    206c:	9e 85       	ldd	r25, Y+14	; 0x0e
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e2       	ldi	r20, 0x20	; 32
    2074:	51 e4       	ldi	r21, 0x41	; 65
    2076:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	bc 01       	movw	r22, r24
    2080:	cd 01       	movw	r24, r26
    2082:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	9e 83       	std	Y+6, r25	; 0x06
    208c:	8d 83       	std	Y+5, r24	; 0x05
    208e:	0f c0       	rjmp	.+30     	; 0x20ae <calc_sum+0x208>
    2090:	88 ec       	ldi	r24, 0xC8	; 200
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	9c 83       	std	Y+4, r25	; 0x04
    2096:	8b 83       	std	Y+3, r24	; 0x03
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	9c 81       	ldd	r25, Y+4	; 0x04
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <calc_sum+0x1f6>
    20a0:	9c 83       	std	Y+4, r25	; 0x04
    20a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a4:	8d 81       	ldd	r24, Y+5	; 0x05
    20a6:	9e 81       	ldd	r25, Y+6	; 0x06
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	9e 83       	std	Y+6, r25	; 0x06
    20ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ae:	8d 81       	ldd	r24, Y+5	; 0x05
    20b0:	9e 81       	ldd	r25, Y+6	; 0x06
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	69 f7       	brne	.-38     	; 0x2090 <calc_sum+0x1ea>
    20b6:	14 c0       	rjmp	.+40     	; 0x20e0 <calc_sum+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ba:	78 85       	ldd	r23, Y+8	; 0x08
    20bc:	89 85       	ldd	r24, Y+9	; 0x09
    20be:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	9e 83       	std	Y+6, r25	; 0x06
    20ca:	8d 83       	std	Y+5, r24	; 0x05
    20cc:	8d 81       	ldd	r24, Y+5	; 0x05
    20ce:	9e 81       	ldd	r25, Y+6	; 0x06
    20d0:	9a 83       	std	Y+2, r25	; 0x02
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	9a 81       	ldd	r25, Y+2	; 0x02
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	f1 f7       	brne	.-4      	; 0x20d8 <calc_sum+0x232>
    20dc:	9a 83       	std	Y+2, r25	; 0x02
    20de:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *  Display result on LCD and wait until enter c
	 */
	LCD_moveCursor(1, 0);
	LCD_intgerToString(num1+num2);
	while(key != 'c')
    20e0:	80 91 80 01 	lds	r24, 0x0180
    20e4:	83 36       	cpi	r24, 0x63	; 99
    20e6:	09 f0       	breq	.+2      	; 0x20ea <calc_sum+0x244>
    20e8:	85 cf       	rjmp	.-246    	; 0x1ff4 <calc_sum+0x14e>
	{
		key=KEYPAD_getPressedKey();
		_delay_ms(200);
	}
	LCD_clearScreen();
    20ea:	0e 94 c1 20 	call	0x4182	; 0x4182 <LCD_clearScreen>
}
    20ee:	6e 96       	adiw	r28, 0x1e	; 30
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	f8 94       	cli
    20f4:	de bf       	out	0x3e, r29	; 62
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	cd bf       	out	0x3d, r28	; 61
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	1f 91       	pop	r17
    2100:	0f 91       	pop	r16
    2102:	ff 90       	pop	r15
    2104:	ef 90       	pop	r14
    2106:	08 95       	ret

00002108 <calc_sub>:
/*
 * Description :
 * Concatenate all digits of two number then display result of sub on LCD
 */
void calc_sub(float32 *first_num,float32*second_num,uint8 digit1,uint8 digit2)
{
    2108:	ef 92       	push	r14
    210a:	ff 92       	push	r15
    210c:	0f 93       	push	r16
    210e:	1f 93       	push	r17
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	6a 97       	sbiw	r28, 0x1a	; 26
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	f8 94       	cli
    211e:	de bf       	out	0x3e, r29	; 62
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	cd bf       	out	0x3d, r28	; 61
    2124:	9e 8b       	std	Y+22, r25	; 0x16
    2126:	8d 8b       	std	Y+21, r24	; 0x15
    2128:	78 8f       	std	Y+24, r23	; 0x18
    212a:	6f 8b       	std	Y+23, r22	; 0x17
    212c:	49 8f       	std	Y+25, r20	; 0x19
    212e:	2a 8f       	std	Y+26, r18	; 0x1a
	uint16 num1=first_num[0];
    2130:	ed 89       	ldd	r30, Y+21	; 0x15
    2132:	fe 89       	ldd	r31, Y+22	; 0x16
    2134:	80 81       	ld	r24, Z
    2136:	91 81       	ldd	r25, Z+1	; 0x01
    2138:	a2 81       	ldd	r26, Z+2	; 0x02
    213a:	b3 81       	ldd	r27, Z+3	; 0x03
    213c:	bc 01       	movw	r22, r24
    213e:	cd 01       	movw	r24, r26
    2140:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	9c 8b       	std	Y+20, r25	; 0x14
    214a:	8b 8b       	std	Y+19, r24	; 0x13
	uint16 num2=second_num[0];
    214c:	ef 89       	ldd	r30, Y+23	; 0x17
    214e:	f8 8d       	ldd	r31, Y+24	; 0x18
    2150:	80 81       	ld	r24, Z
    2152:	91 81       	ldd	r25, Z+1	; 0x01
    2154:	a2 81       	ldd	r26, Z+2	; 0x02
    2156:	b3 81       	ldd	r27, Z+3	; 0x03
    2158:	bc 01       	movw	r22, r24
    215a:	cd 01       	movw	r24, r26
    215c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	9a 8b       	std	Y+18, r25	; 0x12
    2166:	89 8b       	std	Y+17, r24	; 0x11
	/*
	 *  Concatenate all digits of first number
	 */
	for(uint8 counter=1;counter<digit1;counter++)
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	88 8b       	std	Y+16, r24	; 0x10
    216c:	37 c0       	rjmp	.+110    	; 0x21dc <calc_sub+0xd4>
	{
		num1 = num1*10 +first_num[counter];
    216e:	8b 89       	ldd	r24, Y+19	; 0x13
    2170:	9c 89       	ldd	r25, Y+20	; 0x14
    2172:	9c 01       	movw	r18, r24
    2174:	22 0f       	add	r18, r18
    2176:	33 1f       	adc	r19, r19
    2178:	c9 01       	movw	r24, r18
    217a:	88 0f       	add	r24, r24
    217c:	99 1f       	adc	r25, r25
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	82 0f       	add	r24, r18
    2184:	93 1f       	adc	r25, r19
    2186:	cc 01       	movw	r24, r24
    2188:	a0 e0       	ldi	r26, 0x00	; 0
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	bc 01       	movw	r22, r24
    218e:	cd 01       	movw	r24, r26
    2190:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    2194:	7b 01       	movw	r14, r22
    2196:	8c 01       	movw	r16, r24
    2198:	88 89       	ldd	r24, Y+16	; 0x10
    219a:	88 2f       	mov	r24, r24
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	9c 01       	movw	r18, r24
    21a0:	22 0f       	add	r18, r18
    21a2:	33 1f       	adc	r19, r19
    21a4:	22 0f       	add	r18, r18
    21a6:	33 1f       	adc	r19, r19
    21a8:	8d 89       	ldd	r24, Y+21	; 0x15
    21aa:	9e 89       	ldd	r25, Y+22	; 0x16
    21ac:	fc 01       	movw	r30, r24
    21ae:	e2 0f       	add	r30, r18
    21b0:	f3 1f       	adc	r31, r19
    21b2:	20 81       	ld	r18, Z
    21b4:	31 81       	ldd	r19, Z+1	; 0x01
    21b6:	42 81       	ldd	r20, Z+2	; 0x02
    21b8:	53 81       	ldd	r21, Z+3	; 0x03
    21ba:	c8 01       	movw	r24, r16
    21bc:	b7 01       	movw	r22, r14
    21be:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	bc 01       	movw	r22, r24
    21c8:	cd 01       	movw	r24, r26
    21ca:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	9c 8b       	std	Y+20, r25	; 0x14
    21d4:	8b 8b       	std	Y+19, r24	; 0x13
	uint16 num1=first_num[0];
	uint16 num2=second_num[0];
	/*
	 *  Concatenate all digits of first number
	 */
	for(uint8 counter=1;counter<digit1;counter++)
    21d6:	88 89       	ldd	r24, Y+16	; 0x10
    21d8:	8f 5f       	subi	r24, 0xFF	; 255
    21da:	88 8b       	std	Y+16, r24	; 0x10
    21dc:	98 89       	ldd	r25, Y+16	; 0x10
    21de:	89 8d       	ldd	r24, Y+25	; 0x19
    21e0:	98 17       	cp	r25, r24
    21e2:	28 f2       	brcs	.-118    	; 0x216e <calc_sub+0x66>
		num1 = num1*10 +first_num[counter];
	}
	/*
	 *  Concatenate all digits of second number
	 */
	for(uint8 counter=1;counter<digit2;counter++)
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	8f 87       	std	Y+15, r24	; 0x0f
    21e8:	37 c0       	rjmp	.+110    	; 0x2258 <calc_sub+0x150>
	{
		num2= num2*10 +second_num[counter];
    21ea:	89 89       	ldd	r24, Y+17	; 0x11
    21ec:	9a 89       	ldd	r25, Y+18	; 0x12
    21ee:	9c 01       	movw	r18, r24
    21f0:	22 0f       	add	r18, r18
    21f2:	33 1f       	adc	r19, r19
    21f4:	c9 01       	movw	r24, r18
    21f6:	88 0f       	add	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	88 0f       	add	r24, r24
    21fc:	99 1f       	adc	r25, r25
    21fe:	82 0f       	add	r24, r18
    2200:	93 1f       	adc	r25, r19
    2202:	cc 01       	movw	r24, r24
    2204:	a0 e0       	ldi	r26, 0x00	; 0
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	bc 01       	movw	r22, r24
    220a:	cd 01       	movw	r24, r26
    220c:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    2210:	7b 01       	movw	r14, r22
    2212:	8c 01       	movw	r16, r24
    2214:	8f 85       	ldd	r24, Y+15	; 0x0f
    2216:	88 2f       	mov	r24, r24
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	9c 01       	movw	r18, r24
    221c:	22 0f       	add	r18, r18
    221e:	33 1f       	adc	r19, r19
    2220:	22 0f       	add	r18, r18
    2222:	33 1f       	adc	r19, r19
    2224:	8f 89       	ldd	r24, Y+23	; 0x17
    2226:	98 8d       	ldd	r25, Y+24	; 0x18
    2228:	fc 01       	movw	r30, r24
    222a:	e2 0f       	add	r30, r18
    222c:	f3 1f       	adc	r31, r19
    222e:	20 81       	ld	r18, Z
    2230:	31 81       	ldd	r19, Z+1	; 0x01
    2232:	42 81       	ldd	r20, Z+2	; 0x02
    2234:	53 81       	ldd	r21, Z+3	; 0x03
    2236:	c8 01       	movw	r24, r16
    2238:	b7 01       	movw	r22, r14
    223a:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	bc 01       	movw	r22, r24
    2244:	cd 01       	movw	r24, r26
    2246:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	9a 8b       	std	Y+18, r25	; 0x12
    2250:	89 8b       	std	Y+17, r24	; 0x11
		num1 = num1*10 +first_num[counter];
	}
	/*
	 *  Concatenate all digits of second number
	 */
	for(uint8 counter=1;counter<digit2;counter++)
    2252:	8f 85       	ldd	r24, Y+15	; 0x0f
    2254:	8f 5f       	subi	r24, 0xFF	; 255
    2256:	8f 87       	std	Y+15, r24	; 0x0f
    2258:	9f 85       	ldd	r25, Y+15	; 0x0f
    225a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    225c:	98 17       	cp	r25, r24
    225e:	28 f2       	brcs	.-118    	; 0x21ea <calc_sub+0xe2>


	/*
	 *  Display result on LCD and wait until enter c
	 */
	LCD_moveCursor(1,0);
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	60 e0       	ldi	r22, 0x00	; 0
    2264:	0e 94 15 20 	call	0x402a	; 0x402a <LCD_moveCursor>
	LCD_intgerToString(num1-num2);
    2268:	2b 89       	ldd	r18, Y+19	; 0x13
    226a:	3c 89       	ldd	r19, Y+20	; 0x14
    226c:	89 89       	ldd	r24, Y+17	; 0x11
    226e:	9a 89       	ldd	r25, Y+18	; 0x12
    2270:	a9 01       	movw	r20, r18
    2272:	48 1b       	sub	r20, r24
    2274:	59 0b       	sbc	r21, r25
    2276:	ca 01       	movw	r24, r20
    2278:	0e 94 70 20 	call	0x40e0	; 0x40e0 <LCD_intgerToString>
    227c:	76 c0       	rjmp	.+236    	; 0x236a <calc_sub+0x262>
	while(key != 'c')
	{
		key=KEYPAD_getPressedKey();
    227e:	0e 94 92 14 	call	0x2924	; 0x2924 <KEYPAD_getPressedKey>
    2282:	80 93 80 01 	sts	0x0180, r24
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	a8 e4       	ldi	r26, 0x48	; 72
    228c:	b3 e4       	ldi	r27, 0x43	; 67
    228e:	8b 87       	std	Y+11, r24	; 0x0b
    2290:	9c 87       	std	Y+12, r25	; 0x0c
    2292:	ad 87       	std	Y+13, r26	; 0x0d
    2294:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2296:	6b 85       	ldd	r22, Y+11	; 0x0b
    2298:	7c 85       	ldd	r23, Y+12	; 0x0c
    229a:	8d 85       	ldd	r24, Y+13	; 0x0d
    229c:	9e 85       	ldd	r25, Y+14	; 0x0e
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	4a ef       	ldi	r20, 0xFA	; 250
    22a4:	54 e4       	ldi	r21, 0x44	; 68
    22a6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	8f 83       	std	Y+7, r24	; 0x07
    22b0:	98 87       	std	Y+8, r25	; 0x08
    22b2:	a9 87       	std	Y+9, r26	; 0x09
    22b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22b6:	6f 81       	ldd	r22, Y+7	; 0x07
    22b8:	78 85       	ldd	r23, Y+8	; 0x08
    22ba:	89 85       	ldd	r24, Y+9	; 0x09
    22bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	40 e8       	ldi	r20, 0x80	; 128
    22c4:	5f e3       	ldi	r21, 0x3F	; 63
    22c6:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    22ca:	88 23       	and	r24, r24
    22cc:	2c f4       	brge	.+10     	; 0x22d8 <calc_sub+0x1d0>
		__ticks = 1;
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	9e 83       	std	Y+6, r25	; 0x06
    22d4:	8d 83       	std	Y+5, r24	; 0x05
    22d6:	3f c0       	rjmp	.+126    	; 0x2356 <calc_sub+0x24e>
	else if (__tmp > 65535)
    22d8:	6f 81       	ldd	r22, Y+7	; 0x07
    22da:	78 85       	ldd	r23, Y+8	; 0x08
    22dc:	89 85       	ldd	r24, Y+9	; 0x09
    22de:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	3f ef       	ldi	r19, 0xFF	; 255
    22e4:	4f e7       	ldi	r20, 0x7F	; 127
    22e6:	57 e4       	ldi	r21, 0x47	; 71
    22e8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    22ec:	18 16       	cp	r1, r24
    22ee:	4c f5       	brge	.+82     	; 0x2342 <calc_sub+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	40 e2       	ldi	r20, 0x20	; 32
    22fe:	51 e4       	ldi	r21, 0x41	; 65
    2300:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	bc 01       	movw	r22, r24
    230a:	cd 01       	movw	r24, r26
    230c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	9e 83       	std	Y+6, r25	; 0x06
    2316:	8d 83       	std	Y+5, r24	; 0x05
    2318:	0f c0       	rjmp	.+30     	; 0x2338 <calc_sub+0x230>
    231a:	88 ec       	ldi	r24, 0xC8	; 200
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	9c 83       	std	Y+4, r25	; 0x04
    2320:	8b 83       	std	Y+3, r24	; 0x03
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	9c 81       	ldd	r25, Y+4	; 0x04
    2326:	01 97       	sbiw	r24, 0x01	; 1
    2328:	f1 f7       	brne	.-4      	; 0x2326 <calc_sub+0x21e>
    232a:	9c 83       	std	Y+4, r25	; 0x04
    232c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    232e:	8d 81       	ldd	r24, Y+5	; 0x05
    2330:	9e 81       	ldd	r25, Y+6	; 0x06
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	9e 83       	std	Y+6, r25	; 0x06
    2336:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2338:	8d 81       	ldd	r24, Y+5	; 0x05
    233a:	9e 81       	ldd	r25, Y+6	; 0x06
    233c:	00 97       	sbiw	r24, 0x00	; 0
    233e:	69 f7       	brne	.-38     	; 0x231a <calc_sub+0x212>
    2340:	14 c0       	rjmp	.+40     	; 0x236a <calc_sub+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2342:	6f 81       	ldd	r22, Y+7	; 0x07
    2344:	78 85       	ldd	r23, Y+8	; 0x08
    2346:	89 85       	ldd	r24, Y+9	; 0x09
    2348:	9a 85       	ldd	r25, Y+10	; 0x0a
    234a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    234e:	dc 01       	movw	r26, r24
    2350:	cb 01       	movw	r24, r22
    2352:	9e 83       	std	Y+6, r25	; 0x06
    2354:	8d 83       	std	Y+5, r24	; 0x05
    2356:	8d 81       	ldd	r24, Y+5	; 0x05
    2358:	9e 81       	ldd	r25, Y+6	; 0x06
    235a:	9a 83       	std	Y+2, r25	; 0x02
    235c:	89 83       	std	Y+1, r24	; 0x01
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	9a 81       	ldd	r25, Y+2	; 0x02
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	f1 f7       	brne	.-4      	; 0x2362 <calc_sub+0x25a>
    2366:	9a 83       	std	Y+2, r25	; 0x02
    2368:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *  Display result on LCD and wait until enter c
	 */
	LCD_moveCursor(1,0);
	LCD_intgerToString(num1-num2);
	while(key != 'c')
    236a:	80 91 80 01 	lds	r24, 0x0180
    236e:	83 36       	cpi	r24, 0x63	; 99
    2370:	09 f0       	breq	.+2      	; 0x2374 <calc_sub+0x26c>
    2372:	85 cf       	rjmp	.-246    	; 0x227e <calc_sub+0x176>
	{
		key=KEYPAD_getPressedKey();
		_delay_ms(200);
	}
	LCD_clearScreen();
    2374:	0e 94 c1 20 	call	0x4182	; 0x4182 <LCD_clearScreen>
}
    2378:	6a 96       	adiw	r28, 0x1a	; 26
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	f8 94       	cli
    237e:	de bf       	out	0x3e, r29	; 62
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	cd bf       	out	0x3d, r28	; 61
    2384:	cf 91       	pop	r28
    2386:	df 91       	pop	r29
    2388:	1f 91       	pop	r17
    238a:	0f 91       	pop	r16
    238c:	ff 90       	pop	r15
    238e:	ef 90       	pop	r14
    2390:	08 95       	ret

00002392 <calc_multi>:
/*
 * Description :
 * Concatenate all digits of two number then display result of multi on LCD
 */
void calc_multi(float32 *first_num,float32*second_num,uint8 digit1,uint8 digit2)
{
    2392:	ef 92       	push	r14
    2394:	ff 92       	push	r15
    2396:	0f 93       	push	r16
    2398:	1f 93       	push	r17
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
    23a2:	6e 97       	sbiw	r28, 0x1e	; 30
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	f8 94       	cli
    23a8:	de bf       	out	0x3e, r29	; 62
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	cd bf       	out	0x3d, r28	; 61
    23ae:	9a 8f       	std	Y+26, r25	; 0x1a
    23b0:	89 8f       	std	Y+25, r24	; 0x19
    23b2:	7c 8f       	std	Y+28, r23	; 0x1c
    23b4:	6b 8f       	std	Y+27, r22	; 0x1b
    23b6:	4d 8f       	std	Y+29, r20	; 0x1d
    23b8:	2e 8f       	std	Y+30, r18	; 0x1e
	float32 num1=first_num[0];
    23ba:	e9 8d       	ldd	r30, Y+25	; 0x19
    23bc:	fa 8d       	ldd	r31, Y+26	; 0x1a
    23be:	80 81       	ld	r24, Z
    23c0:	91 81       	ldd	r25, Z+1	; 0x01
    23c2:	a2 81       	ldd	r26, Z+2	; 0x02
    23c4:	b3 81       	ldd	r27, Z+3	; 0x03
    23c6:	8d 8b       	std	Y+21, r24	; 0x15
    23c8:	9e 8b       	std	Y+22, r25	; 0x16
    23ca:	af 8b       	std	Y+23, r26	; 0x17
    23cc:	b8 8f       	std	Y+24, r27	; 0x18
	float32 num2=second_num[0];
    23ce:	eb 8d       	ldd	r30, Y+27	; 0x1b
    23d0:	fc 8d       	ldd	r31, Y+28	; 0x1c
    23d2:	80 81       	ld	r24, Z
    23d4:	91 81       	ldd	r25, Z+1	; 0x01
    23d6:	a2 81       	ldd	r26, Z+2	; 0x02
    23d8:	b3 81       	ldd	r27, Z+3	; 0x03
    23da:	89 8b       	std	Y+17, r24	; 0x11
    23dc:	9a 8b       	std	Y+18, r25	; 0x12
    23de:	ab 8b       	std	Y+19, r26	; 0x13
    23e0:	bc 8b       	std	Y+20, r27	; 0x14

	/*
	 *  Concatenate all digits of first number
	 */
	for(uint8 counter=1;counter<digit1;counter++)
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	88 8b       	std	Y+16, r24	; 0x10
    23e6:	2c c0       	rjmp	.+88     	; 0x2440 <calc_multi+0xae>
	{
		num1 = num1*10 +first_num[counter];
    23e8:	6d 89       	ldd	r22, Y+21	; 0x15
    23ea:	7e 89       	ldd	r23, Y+22	; 0x16
    23ec:	8f 89       	ldd	r24, Y+23	; 0x17
    23ee:	98 8d       	ldd	r25, Y+24	; 0x18
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e2       	ldi	r20, 0x20	; 32
    23f6:	51 e4       	ldi	r21, 0x41	; 65
    23f8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	7c 01       	movw	r14, r24
    2402:	8d 01       	movw	r16, r26
    2404:	88 89       	ldd	r24, Y+16	; 0x10
    2406:	88 2f       	mov	r24, r24
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	9c 01       	movw	r18, r24
    240c:	22 0f       	add	r18, r18
    240e:	33 1f       	adc	r19, r19
    2410:	22 0f       	add	r18, r18
    2412:	33 1f       	adc	r19, r19
    2414:	89 8d       	ldd	r24, Y+25	; 0x19
    2416:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2418:	fc 01       	movw	r30, r24
    241a:	e2 0f       	add	r30, r18
    241c:	f3 1f       	adc	r31, r19
    241e:	20 81       	ld	r18, Z
    2420:	31 81       	ldd	r19, Z+1	; 0x01
    2422:	42 81       	ldd	r20, Z+2	; 0x02
    2424:	53 81       	ldd	r21, Z+3	; 0x03
    2426:	c8 01       	movw	r24, r16
    2428:	b7 01       	movw	r22, r14
    242a:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	8d 8b       	std	Y+21, r24	; 0x15
    2434:	9e 8b       	std	Y+22, r25	; 0x16
    2436:	af 8b       	std	Y+23, r26	; 0x17
    2438:	b8 8f       	std	Y+24, r27	; 0x18
	float32 num2=second_num[0];

	/*
	 *  Concatenate all digits of first number
	 */
	for(uint8 counter=1;counter<digit1;counter++)
    243a:	88 89       	ldd	r24, Y+16	; 0x10
    243c:	8f 5f       	subi	r24, 0xFF	; 255
    243e:	88 8b       	std	Y+16, r24	; 0x10
    2440:	98 89       	ldd	r25, Y+16	; 0x10
    2442:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2444:	98 17       	cp	r25, r24
    2446:	80 f2       	brcs	.-96     	; 0x23e8 <calc_multi+0x56>
		num1 = num1*10 +first_num[counter];
	}
	/*
	 *  Concatenate all digits of second number
	 */
	for(uint8 counter=1;counter<digit2;counter++)
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	8f 87       	std	Y+15, r24	; 0x0f
    244c:	2c c0       	rjmp	.+88     	; 0x24a6 <calc_multi+0x114>
	{
		num2= num2*10 +second_num[counter];
    244e:	69 89       	ldd	r22, Y+17	; 0x11
    2450:	7a 89       	ldd	r23, Y+18	; 0x12
    2452:	8b 89       	ldd	r24, Y+19	; 0x13
    2454:	9c 89       	ldd	r25, Y+20	; 0x14
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	40 e2       	ldi	r20, 0x20	; 32
    245c:	51 e4       	ldi	r21, 0x41	; 65
    245e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	7c 01       	movw	r14, r24
    2468:	8d 01       	movw	r16, r26
    246a:	8f 85       	ldd	r24, Y+15	; 0x0f
    246c:	88 2f       	mov	r24, r24
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	9c 01       	movw	r18, r24
    2472:	22 0f       	add	r18, r18
    2474:	33 1f       	adc	r19, r19
    2476:	22 0f       	add	r18, r18
    2478:	33 1f       	adc	r19, r19
    247a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    247c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    247e:	fc 01       	movw	r30, r24
    2480:	e2 0f       	add	r30, r18
    2482:	f3 1f       	adc	r31, r19
    2484:	20 81       	ld	r18, Z
    2486:	31 81       	ldd	r19, Z+1	; 0x01
    2488:	42 81       	ldd	r20, Z+2	; 0x02
    248a:	53 81       	ldd	r21, Z+3	; 0x03
    248c:	c8 01       	movw	r24, r16
    248e:	b7 01       	movw	r22, r14
    2490:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	89 8b       	std	Y+17, r24	; 0x11
    249a:	9a 8b       	std	Y+18, r25	; 0x12
    249c:	ab 8b       	std	Y+19, r26	; 0x13
    249e:	bc 8b       	std	Y+20, r27	; 0x14
		num1 = num1*10 +first_num[counter];
	}
	/*
	 *  Concatenate all digits of second number
	 */
	for(uint8 counter=1;counter<digit2;counter++)
    24a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24a2:	8f 5f       	subi	r24, 0xFF	; 255
    24a4:	8f 87       	std	Y+15, r24	; 0x0f
    24a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    24a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24aa:	98 17       	cp	r25, r24
    24ac:	80 f2       	brcs	.-96     	; 0x244e <calc_multi+0xbc>


	/*
	 *  Display result on LCD and wait until enter c
	 */
	LCD_moveCursor(1, 0);
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	60 e0       	ldi	r22, 0x00	; 0
    24b2:	0e 94 15 20 	call	0x402a	; 0x402a <LCD_moveCursor>
	LCD_intgerToString(num1*num2);
    24b6:	6d 89       	ldd	r22, Y+21	; 0x15
    24b8:	7e 89       	ldd	r23, Y+22	; 0x16
    24ba:	8f 89       	ldd	r24, Y+23	; 0x17
    24bc:	98 8d       	ldd	r25, Y+24	; 0x18
    24be:	29 89       	ldd	r18, Y+17	; 0x11
    24c0:	3a 89       	ldd	r19, Y+18	; 0x12
    24c2:	4b 89       	ldd	r20, Y+19	; 0x13
    24c4:	5c 89       	ldd	r21, Y+20	; 0x14
    24c6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	bc 01       	movw	r22, r24
    24d0:	cd 01       	movw	r24, r26
    24d2:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	0e 94 70 20 	call	0x40e0	; 0x40e0 <LCD_intgerToString>
    24de:	76 c0       	rjmp	.+236    	; 0x25cc <calc_multi+0x23a>
	while(key != 'c')
	{
		key=KEYPAD_getPressedKey();
    24e0:	0e 94 92 14 	call	0x2924	; 0x2924 <KEYPAD_getPressedKey>
    24e4:	80 93 80 01 	sts	0x0180, r24
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	a8 e4       	ldi	r26, 0x48	; 72
    24ee:	b3 e4       	ldi	r27, 0x43	; 67
    24f0:	8b 87       	std	Y+11, r24	; 0x0b
    24f2:	9c 87       	std	Y+12, r25	; 0x0c
    24f4:	ad 87       	std	Y+13, r26	; 0x0d
    24f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    24fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	4a ef       	ldi	r20, 0xFA	; 250
    2506:	54 e4       	ldi	r21, 0x44	; 68
    2508:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	8f 83       	std	Y+7, r24	; 0x07
    2512:	98 87       	std	Y+8, r25	; 0x08
    2514:	a9 87       	std	Y+9, r26	; 0x09
    2516:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2518:	6f 81       	ldd	r22, Y+7	; 0x07
    251a:	78 85       	ldd	r23, Y+8	; 0x08
    251c:	89 85       	ldd	r24, Y+9	; 0x09
    251e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	40 e8       	ldi	r20, 0x80	; 128
    2526:	5f e3       	ldi	r21, 0x3F	; 63
    2528:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    252c:	88 23       	and	r24, r24
    252e:	2c f4       	brge	.+10     	; 0x253a <calc_multi+0x1a8>
		__ticks = 1;
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	9e 83       	std	Y+6, r25	; 0x06
    2536:	8d 83       	std	Y+5, r24	; 0x05
    2538:	3f c0       	rjmp	.+126    	; 0x25b8 <calc_multi+0x226>
	else if (__tmp > 65535)
    253a:	6f 81       	ldd	r22, Y+7	; 0x07
    253c:	78 85       	ldd	r23, Y+8	; 0x08
    253e:	89 85       	ldd	r24, Y+9	; 0x09
    2540:	9a 85       	ldd	r25, Y+10	; 0x0a
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	3f ef       	ldi	r19, 0xFF	; 255
    2546:	4f e7       	ldi	r20, 0x7F	; 127
    2548:	57 e4       	ldi	r21, 0x47	; 71
    254a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    254e:	18 16       	cp	r1, r24
    2550:	4c f5       	brge	.+82     	; 0x25a4 <calc_multi+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2552:	6b 85       	ldd	r22, Y+11	; 0x0b
    2554:	7c 85       	ldd	r23, Y+12	; 0x0c
    2556:	8d 85       	ldd	r24, Y+13	; 0x0d
    2558:	9e 85       	ldd	r25, Y+14	; 0x0e
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	40 e2       	ldi	r20, 0x20	; 32
    2560:	51 e4       	ldi	r21, 0x41	; 65
    2562:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	bc 01       	movw	r22, r24
    256c:	cd 01       	movw	r24, r26
    256e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	9e 83       	std	Y+6, r25	; 0x06
    2578:	8d 83       	std	Y+5, r24	; 0x05
    257a:	0f c0       	rjmp	.+30     	; 0x259a <calc_multi+0x208>
    257c:	88 ec       	ldi	r24, 0xC8	; 200
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	9c 83       	std	Y+4, r25	; 0x04
    2582:	8b 83       	std	Y+3, r24	; 0x03
    2584:	8b 81       	ldd	r24, Y+3	; 0x03
    2586:	9c 81       	ldd	r25, Y+4	; 0x04
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	f1 f7       	brne	.-4      	; 0x2588 <calc_multi+0x1f6>
    258c:	9c 83       	std	Y+4, r25	; 0x04
    258e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2590:	8d 81       	ldd	r24, Y+5	; 0x05
    2592:	9e 81       	ldd	r25, Y+6	; 0x06
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	9e 83       	std	Y+6, r25	; 0x06
    2598:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259a:	8d 81       	ldd	r24, Y+5	; 0x05
    259c:	9e 81       	ldd	r25, Y+6	; 0x06
    259e:	00 97       	sbiw	r24, 0x00	; 0
    25a0:	69 f7       	brne	.-38     	; 0x257c <calc_multi+0x1ea>
    25a2:	14 c0       	rjmp	.+40     	; 0x25cc <calc_multi+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a4:	6f 81       	ldd	r22, Y+7	; 0x07
    25a6:	78 85       	ldd	r23, Y+8	; 0x08
    25a8:	89 85       	ldd	r24, Y+9	; 0x09
    25aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ac:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	9e 83       	std	Y+6, r25	; 0x06
    25b6:	8d 83       	std	Y+5, r24	; 0x05
    25b8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ba:	9e 81       	ldd	r25, Y+6	; 0x06
    25bc:	9a 83       	std	Y+2, r25	; 0x02
    25be:	89 83       	std	Y+1, r24	; 0x01
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	9a 81       	ldd	r25, Y+2	; 0x02
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	f1 f7       	brne	.-4      	; 0x25c4 <calc_multi+0x232>
    25c8:	9a 83       	std	Y+2, r25	; 0x02
    25ca:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *  Display result on LCD and wait until enter c
	 */
	LCD_moveCursor(1, 0);
	LCD_intgerToString(num1*num2);
	while(key != 'c')
    25cc:	80 91 80 01 	lds	r24, 0x0180
    25d0:	83 36       	cpi	r24, 0x63	; 99
    25d2:	09 f0       	breq	.+2      	; 0x25d6 <calc_multi+0x244>
    25d4:	85 cf       	rjmp	.-246    	; 0x24e0 <calc_multi+0x14e>
	{
		key=KEYPAD_getPressedKey();
		_delay_ms(200);
	}
	LCD_clearScreen();
    25d6:	0e 94 c1 20 	call	0x4182	; 0x4182 <LCD_clearScreen>
}
    25da:	6e 96       	adiw	r28, 0x1e	; 30
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	f8 94       	cli
    25e0:	de bf       	out	0x3e, r29	; 62
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	cd bf       	out	0x3d, r28	; 61
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	1f 91       	pop	r17
    25ec:	0f 91       	pop	r16
    25ee:	ff 90       	pop	r15
    25f0:	ef 90       	pop	r14
    25f2:	08 95       	ret

000025f4 <calc_div>:
/*
 * Description :
 * Concatenate all digits of two number then display result of div on LCD
 */
void calc_div(float32 *first_num,float32*second_num,uint8 digit1,uint8 digit2)
{
    25f4:	ef 92       	push	r14
    25f6:	ff 92       	push	r15
    25f8:	0f 93       	push	r16
    25fa:	1f 93       	push	r17
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    2604:	6e 97       	sbiw	r28, 0x1e	; 30
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	f8 94       	cli
    260a:	de bf       	out	0x3e, r29	; 62
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	cd bf       	out	0x3d, r28	; 61
    2610:	9a 8f       	std	Y+26, r25	; 0x1a
    2612:	89 8f       	std	Y+25, r24	; 0x19
    2614:	7c 8f       	std	Y+28, r23	; 0x1c
    2616:	6b 8f       	std	Y+27, r22	; 0x1b
    2618:	4d 8f       	std	Y+29, r20	; 0x1d
    261a:	2e 8f       	std	Y+30, r18	; 0x1e
	float32 num1=first_num[0];
    261c:	e9 8d       	ldd	r30, Y+25	; 0x19
    261e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2620:	80 81       	ld	r24, Z
    2622:	91 81       	ldd	r25, Z+1	; 0x01
    2624:	a2 81       	ldd	r26, Z+2	; 0x02
    2626:	b3 81       	ldd	r27, Z+3	; 0x03
    2628:	8d 8b       	std	Y+21, r24	; 0x15
    262a:	9e 8b       	std	Y+22, r25	; 0x16
    262c:	af 8b       	std	Y+23, r26	; 0x17
    262e:	b8 8f       	std	Y+24, r27	; 0x18
	float32 num2=second_num[0];
    2630:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2632:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2634:	80 81       	ld	r24, Z
    2636:	91 81       	ldd	r25, Z+1	; 0x01
    2638:	a2 81       	ldd	r26, Z+2	; 0x02
    263a:	b3 81       	ldd	r27, Z+3	; 0x03
    263c:	89 8b       	std	Y+17, r24	; 0x11
    263e:	9a 8b       	std	Y+18, r25	; 0x12
    2640:	ab 8b       	std	Y+19, r26	; 0x13
    2642:	bc 8b       	std	Y+20, r27	; 0x14

	/*
	 *  Concatenate all digits of first number
	 */
	for(uint8 counter=1;counter<digit1;counter++)
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	88 8b       	std	Y+16, r24	; 0x10
    2648:	2c c0       	rjmp	.+88     	; 0x26a2 <calc_div+0xae>
	{
		num1 = num1*10 +first_num[counter];
    264a:	6d 89       	ldd	r22, Y+21	; 0x15
    264c:	7e 89       	ldd	r23, Y+22	; 0x16
    264e:	8f 89       	ldd	r24, Y+23	; 0x17
    2650:	98 8d       	ldd	r25, Y+24	; 0x18
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	40 e2       	ldi	r20, 0x20	; 32
    2658:	51 e4       	ldi	r21, 0x41	; 65
    265a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	7c 01       	movw	r14, r24
    2664:	8d 01       	movw	r16, r26
    2666:	88 89       	ldd	r24, Y+16	; 0x10
    2668:	88 2f       	mov	r24, r24
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	9c 01       	movw	r18, r24
    266e:	22 0f       	add	r18, r18
    2670:	33 1f       	adc	r19, r19
    2672:	22 0f       	add	r18, r18
    2674:	33 1f       	adc	r19, r19
    2676:	89 8d       	ldd	r24, Y+25	; 0x19
    2678:	9a 8d       	ldd	r25, Y+26	; 0x1a
    267a:	fc 01       	movw	r30, r24
    267c:	e2 0f       	add	r30, r18
    267e:	f3 1f       	adc	r31, r19
    2680:	20 81       	ld	r18, Z
    2682:	31 81       	ldd	r19, Z+1	; 0x01
    2684:	42 81       	ldd	r20, Z+2	; 0x02
    2686:	53 81       	ldd	r21, Z+3	; 0x03
    2688:	c8 01       	movw	r24, r16
    268a:	b7 01       	movw	r22, r14
    268c:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	8d 8b       	std	Y+21, r24	; 0x15
    2696:	9e 8b       	std	Y+22, r25	; 0x16
    2698:	af 8b       	std	Y+23, r26	; 0x17
    269a:	b8 8f       	std	Y+24, r27	; 0x18
	float32 num2=second_num[0];

	/*
	 *  Concatenate all digits of first number
	 */
	for(uint8 counter=1;counter<digit1;counter++)
    269c:	88 89       	ldd	r24, Y+16	; 0x10
    269e:	8f 5f       	subi	r24, 0xFF	; 255
    26a0:	88 8b       	std	Y+16, r24	; 0x10
    26a2:	98 89       	ldd	r25, Y+16	; 0x10
    26a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26a6:	98 17       	cp	r25, r24
    26a8:	80 f2       	brcs	.-96     	; 0x264a <calc_div+0x56>
		num1 = num1*10 +first_num[counter];
	}
	/*
	 *  Concatenate all digits of second number
	 */
	for(uint8 counter=1;counter<digit2;counter++)
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	8f 87       	std	Y+15, r24	; 0x0f
    26ae:	2c c0       	rjmp	.+88     	; 0x2708 <calc_div+0x114>
	{
		num2= num2*10 +second_num[counter];
    26b0:	69 89       	ldd	r22, Y+17	; 0x11
    26b2:	7a 89       	ldd	r23, Y+18	; 0x12
    26b4:	8b 89       	ldd	r24, Y+19	; 0x13
    26b6:	9c 89       	ldd	r25, Y+20	; 0x14
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e2       	ldi	r20, 0x20	; 32
    26be:	51 e4       	ldi	r21, 0x41	; 65
    26c0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	7c 01       	movw	r14, r24
    26ca:	8d 01       	movw	r16, r26
    26cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    26ce:	88 2f       	mov	r24, r24
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	9c 01       	movw	r18, r24
    26d4:	22 0f       	add	r18, r18
    26d6:	33 1f       	adc	r19, r19
    26d8:	22 0f       	add	r18, r18
    26da:	33 1f       	adc	r19, r19
    26dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26e0:	fc 01       	movw	r30, r24
    26e2:	e2 0f       	add	r30, r18
    26e4:	f3 1f       	adc	r31, r19
    26e6:	20 81       	ld	r18, Z
    26e8:	31 81       	ldd	r19, Z+1	; 0x01
    26ea:	42 81       	ldd	r20, Z+2	; 0x02
    26ec:	53 81       	ldd	r21, Z+3	; 0x03
    26ee:	c8 01       	movw	r24, r16
    26f0:	b7 01       	movw	r22, r14
    26f2:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	89 8b       	std	Y+17, r24	; 0x11
    26fc:	9a 8b       	std	Y+18, r25	; 0x12
    26fe:	ab 8b       	std	Y+19, r26	; 0x13
    2700:	bc 8b       	std	Y+20, r27	; 0x14
		num1 = num1*10 +first_num[counter];
	}
	/*
	 *  Concatenate all digits of second number
	 */
	for(uint8 counter=1;counter<digit2;counter++)
    2702:	8f 85       	ldd	r24, Y+15	; 0x0f
    2704:	8f 5f       	subi	r24, 0xFF	; 255
    2706:	8f 87       	std	Y+15, r24	; 0x0f
    2708:	9f 85       	ldd	r25, Y+15	; 0x0f
    270a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    270c:	98 17       	cp	r25, r24
    270e:	80 f2       	brcs	.-96     	; 0x26b0 <calc_div+0xbc>


	/*
	 *  Display result on LCD and wait until enter c
	 */
	LCD_moveCursor(1, 0);
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	60 e0       	ldi	r22, 0x00	; 0
    2714:	0e 94 15 20 	call	0x402a	; 0x402a <LCD_moveCursor>
	LCD_floatToString(num1/num2);
    2718:	6d 89       	ldd	r22, Y+21	; 0x15
    271a:	7e 89       	ldd	r23, Y+22	; 0x16
    271c:	8f 89       	ldd	r24, Y+23	; 0x17
    271e:	98 8d       	ldd	r25, Y+24	; 0x18
    2720:	29 89       	ldd	r18, Y+17	; 0x11
    2722:	3a 89       	ldd	r19, Y+18	; 0x12
    2724:	4b 89       	ldd	r20, Y+19	; 0x13
    2726:	5c 89       	ldd	r21, Y+20	; 0x14
    2728:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	bc 01       	movw	r22, r24
    2732:	cd 01       	movw	r24, r26
    2734:	0e 94 93 20 	call	0x4126	; 0x4126 <LCD_floatToString>
    2738:	76 c0       	rjmp	.+236    	; 0x2826 <calc_div+0x232>
	while(key != 'c')
	{
		key=KEYPAD_getPressedKey();
    273a:	0e 94 92 14 	call	0x2924	; 0x2924 <KEYPAD_getPressedKey>
    273e:	80 93 80 01 	sts	0x0180, r24
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	a8 e4       	ldi	r26, 0x48	; 72
    2748:	b3 e4       	ldi	r27, 0x43	; 67
    274a:	8b 87       	std	Y+11, r24	; 0x0b
    274c:	9c 87       	std	Y+12, r25	; 0x0c
    274e:	ad 87       	std	Y+13, r26	; 0x0d
    2750:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2752:	6b 85       	ldd	r22, Y+11	; 0x0b
    2754:	7c 85       	ldd	r23, Y+12	; 0x0c
    2756:	8d 85       	ldd	r24, Y+13	; 0x0d
    2758:	9e 85       	ldd	r25, Y+14	; 0x0e
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	4a ef       	ldi	r20, 0xFA	; 250
    2760:	54 e4       	ldi	r21, 0x44	; 68
    2762:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	8f 83       	std	Y+7, r24	; 0x07
    276c:	98 87       	std	Y+8, r25	; 0x08
    276e:	a9 87       	std	Y+9, r26	; 0x09
    2770:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2772:	6f 81       	ldd	r22, Y+7	; 0x07
    2774:	78 85       	ldd	r23, Y+8	; 0x08
    2776:	89 85       	ldd	r24, Y+9	; 0x09
    2778:	9a 85       	ldd	r25, Y+10	; 0x0a
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e8       	ldi	r20, 0x80	; 128
    2780:	5f e3       	ldi	r21, 0x3F	; 63
    2782:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2786:	88 23       	and	r24, r24
    2788:	2c f4       	brge	.+10     	; 0x2794 <calc_div+0x1a0>
		__ticks = 1;
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	9e 83       	std	Y+6, r25	; 0x06
    2790:	8d 83       	std	Y+5, r24	; 0x05
    2792:	3f c0       	rjmp	.+126    	; 0x2812 <calc_div+0x21e>
	else if (__tmp > 65535)
    2794:	6f 81       	ldd	r22, Y+7	; 0x07
    2796:	78 85       	ldd	r23, Y+8	; 0x08
    2798:	89 85       	ldd	r24, Y+9	; 0x09
    279a:	9a 85       	ldd	r25, Y+10	; 0x0a
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	3f ef       	ldi	r19, 0xFF	; 255
    27a0:	4f e7       	ldi	r20, 0x7F	; 127
    27a2:	57 e4       	ldi	r21, 0x47	; 71
    27a4:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    27a8:	18 16       	cp	r1, r24
    27aa:	4c f5       	brge	.+82     	; 0x27fe <calc_div+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    27b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	40 e2       	ldi	r20, 0x20	; 32
    27ba:	51 e4       	ldi	r21, 0x41	; 65
    27bc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	bc 01       	movw	r22, r24
    27c6:	cd 01       	movw	r24, r26
    27c8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	9e 83       	std	Y+6, r25	; 0x06
    27d2:	8d 83       	std	Y+5, r24	; 0x05
    27d4:	0f c0       	rjmp	.+30     	; 0x27f4 <calc_div+0x200>
    27d6:	88 ec       	ldi	r24, 0xC8	; 200
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	9c 83       	std	Y+4, r25	; 0x04
    27dc:	8b 83       	std	Y+3, r24	; 0x03
    27de:	8b 81       	ldd	r24, Y+3	; 0x03
    27e0:	9c 81       	ldd	r25, Y+4	; 0x04
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	f1 f7       	brne	.-4      	; 0x27e2 <calc_div+0x1ee>
    27e6:	9c 83       	std	Y+4, r25	; 0x04
    27e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ea:	8d 81       	ldd	r24, Y+5	; 0x05
    27ec:	9e 81       	ldd	r25, Y+6	; 0x06
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	9e 83       	std	Y+6, r25	; 0x06
    27f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f4:	8d 81       	ldd	r24, Y+5	; 0x05
    27f6:	9e 81       	ldd	r25, Y+6	; 0x06
    27f8:	00 97       	sbiw	r24, 0x00	; 0
    27fa:	69 f7       	brne	.-38     	; 0x27d6 <calc_div+0x1e2>
    27fc:	14 c0       	rjmp	.+40     	; 0x2826 <calc_div+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2800:	78 85       	ldd	r23, Y+8	; 0x08
    2802:	89 85       	ldd	r24, Y+9	; 0x09
    2804:	9a 85       	ldd	r25, Y+10	; 0x0a
    2806:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	9e 83       	std	Y+6, r25	; 0x06
    2810:	8d 83       	std	Y+5, r24	; 0x05
    2812:	8d 81       	ldd	r24, Y+5	; 0x05
    2814:	9e 81       	ldd	r25, Y+6	; 0x06
    2816:	9a 83       	std	Y+2, r25	; 0x02
    2818:	89 83       	std	Y+1, r24	; 0x01
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	9a 81       	ldd	r25, Y+2	; 0x02
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	f1 f7       	brne	.-4      	; 0x281e <calc_div+0x22a>
    2822:	9a 83       	std	Y+2, r25	; 0x02
    2824:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *  Display result on LCD and wait until enter c
	 */
	LCD_moveCursor(1, 0);
	LCD_floatToString(num1/num2);
	while(key != 'c')
    2826:	80 91 80 01 	lds	r24, 0x0180
    282a:	83 36       	cpi	r24, 0x63	; 99
    282c:	09 f0       	breq	.+2      	; 0x2830 <calc_div+0x23c>
    282e:	85 cf       	rjmp	.-246    	; 0x273a <calc_div+0x146>
	{
		key=KEYPAD_getPressedKey();
		_delay_ms(200);
	}
	LCD_clearScreen();
    2830:	0e 94 c1 20 	call	0x4182	; 0x4182 <LCD_clearScreen>
}
    2834:	6e 96       	adiw	r28, 0x1e	; 30
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	f8 94       	cli
    283a:	de bf       	out	0x3e, r29	; 62
    283c:	0f be       	out	0x3f, r0	; 63
    283e:	cd bf       	out	0x3d, r28	; 61
    2840:	cf 91       	pop	r28
    2842:	df 91       	pop	r29
    2844:	1f 91       	pop	r17
    2846:	0f 91       	pop	r16
    2848:	ff 90       	pop	r15
    284a:	ef 90       	pop	r14
    284c:	08 95       	ret

0000284e <Do_Caclulations>:
/*
 * Description :
 *  Get two number and operation and do operation and display it on screen
 */
void Do_Caclulations(void)
{
    284e:	df 93       	push	r29
    2850:	cf 93       	push	r28
    2852:	00 d0       	rcall	.+0      	; 0x2854 <Do_Caclulations+0x6>
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Get first number and operation
	 */
	First_NUM();
    2858:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <First_NUM>

	/*
	 * Get first number and operation
	 */
	Second_NUM();
    285c:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <Second_NUM>

	/*
	 * Do operation calculation
	 */
	switch(opration)
    2860:	80 91 83 01 	lds	r24, 0x0183
    2864:	28 2f       	mov	r18, r24
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	3a 83       	std	Y+2, r19	; 0x02
    286a:	29 83       	std	Y+1, r18	; 0x01
    286c:	89 81       	ldd	r24, Y+1	; 0x01
    286e:	9a 81       	ldd	r25, Y+2	; 0x02
    2870:	8b 32       	cpi	r24, 0x2B	; 43
    2872:	91 05       	cpc	r25, r1
    2874:	b1 f0       	breq	.+44     	; 0x28a2 <Do_Caclulations+0x54>
    2876:	29 81       	ldd	r18, Y+1	; 0x01
    2878:	3a 81       	ldd	r19, Y+2	; 0x02
    287a:	2c 32       	cpi	r18, 0x2C	; 44
    287c:	31 05       	cpc	r19, r1
    287e:	34 f4       	brge	.+12     	; 0x288c <Do_Caclulations+0x3e>
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	9a 81       	ldd	r25, Y+2	; 0x02
    2884:	8a 32       	cpi	r24, 0x2A	; 42
    2886:	91 05       	cpc	r25, r1
    2888:	31 f1       	breq	.+76     	; 0x28d6 <Do_Caclulations+0x88>
    288a:	3e c0       	rjmp	.+124    	; 0x2908 <Do_Caclulations+0xba>
    288c:	29 81       	ldd	r18, Y+1	; 0x01
    288e:	3a 81       	ldd	r19, Y+2	; 0x02
    2890:	2d 32       	cpi	r18, 0x2D	; 45
    2892:	31 05       	cpc	r19, r1
    2894:	99 f0       	breq	.+38     	; 0x28bc <Do_Caclulations+0x6e>
    2896:	89 81       	ldd	r24, Y+1	; 0x01
    2898:	9a 81       	ldd	r25, Y+2	; 0x02
    289a:	8f 32       	cpi	r24, 0x2F	; 47
    289c:	91 05       	cpc	r25, r1
    289e:	41 f1       	breq	.+80     	; 0x28f0 <Do_Caclulations+0xa2>
    28a0:	33 c0       	rjmp	.+102    	; 0x2908 <Do_Caclulations+0xba>
	{
	case '+':
		calc_sum(number1, number2, num1_counter, num2_counter);
    28a2:	40 91 81 01 	lds	r20, 0x0181
    28a6:	50 91 82 01 	lds	r21, 0x0182
    28aa:	84 e8       	ldi	r24, 0x84	; 132
    28ac:	91 e0       	ldi	r25, 0x01	; 1
    28ae:	2c ea       	ldi	r18, 0xAC	; 172
    28b0:	31 e0       	ldi	r19, 0x01	; 1
    28b2:	b9 01       	movw	r22, r18
    28b4:	25 2f       	mov	r18, r21
    28b6:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <calc_sum>
    28ba:	26 c0       	rjmp	.+76     	; 0x2908 <Do_Caclulations+0xba>
		break;
	case '-':
		calc_sub(number1, number2, num1_counter, num2_counter);
    28bc:	40 91 81 01 	lds	r20, 0x0181
    28c0:	50 91 82 01 	lds	r21, 0x0182
    28c4:	84 e8       	ldi	r24, 0x84	; 132
    28c6:	91 e0       	ldi	r25, 0x01	; 1
    28c8:	2c ea       	ldi	r18, 0xAC	; 172
    28ca:	31 e0       	ldi	r19, 0x01	; 1
    28cc:	b9 01       	movw	r22, r18
    28ce:	25 2f       	mov	r18, r21
    28d0:	0e 94 84 10 	call	0x2108	; 0x2108 <calc_sub>
    28d4:	19 c0       	rjmp	.+50     	; 0x2908 <Do_Caclulations+0xba>
		break;
	case '*':
		calc_multi(number1, number2, num1_counter, num2_counter);
    28d6:	40 91 81 01 	lds	r20, 0x0181
    28da:	50 91 82 01 	lds	r21, 0x0182
    28de:	84 e8       	ldi	r24, 0x84	; 132
    28e0:	91 e0       	ldi	r25, 0x01	; 1
    28e2:	2c ea       	ldi	r18, 0xAC	; 172
    28e4:	31 e0       	ldi	r19, 0x01	; 1
    28e6:	b9 01       	movw	r22, r18
    28e8:	25 2f       	mov	r18, r21
    28ea:	0e 94 c9 11 	call	0x2392	; 0x2392 <calc_multi>
    28ee:	0c c0       	rjmp	.+24     	; 0x2908 <Do_Caclulations+0xba>
		break;
	case '/':
		calc_div(number1, number2, num1_counter, num2_counter);
    28f0:	40 91 81 01 	lds	r20, 0x0181
    28f4:	50 91 82 01 	lds	r21, 0x0182
    28f8:	84 e8       	ldi	r24, 0x84	; 132
    28fa:	91 e0       	ldi	r25, 0x01	; 1
    28fc:	2c ea       	ldi	r18, 0xAC	; 172
    28fe:	31 e0       	ldi	r19, 0x01	; 1
    2900:	b9 01       	movw	r22, r18
    2902:	25 2f       	mov	r18, r21
    2904:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <calc_div>
		break;
	}

}
    2908:	0f 90       	pop	r0
    290a:	0f 90       	pop	r0
    290c:	cf 91       	pop	r28
    290e:	df 91       	pop	r29
    2910:	08 95       	ret

00002912 <Random>:

void Random(void)
{
    2912:	df 93       	push	r29
    2914:	cf 93       	push	r28
    2916:	cd b7       	in	r28, 0x3d	; 61
    2918:	de b7       	in	r29, 0x3e	; 62
	random_num = 0 ;
    291a:	10 92 76 01 	sts	0x0176, r1
}
    291e:	cf 91       	pop	r28
    2920:	df 91       	pop	r29
    2922:	08 95       	ret

00002924 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2924:	df 93       	push	r29
    2926:	cf 93       	push	r28
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
    292c:	61 97       	sbiw	r28, 0x11	; 17
    292e:	0f b6       	in	r0, 0x3f	; 63
    2930:	f8 94       	cli
    2932:	de bf       	out	0x3e, r29	; 62
    2934:	0f be       	out	0x3f, r0	; 63
    2936:	cd bf       	out	0x3d, r28	; 61
	uint8 col=0,row=0;
    2938:	18 8a       	std	Y+16, r1	; 0x10
    293a:	1f 86       	std	Y+15, r1	; 0x0f
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID,   PIN_INPUT);
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	60 e0       	ldi	r22, 0x00	; 0
    2940:	40 e0       	ldi	r20, 0x00	; 0
    2942:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	61 e0       	ldi	r22, 0x01	; 1
    294a:	40 e0       	ldi	r20, 0x00	; 0
    294c:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	62 e0       	ldi	r22, 0x02	; 2
    2954:	40 e0       	ldi	r20, 0x00	; 0
    2956:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	63 e0       	ldi	r22, 0x03	; 3
    295e:	40 e0       	ldi	r20, 0x00	; 0
    2960:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	64 e0       	ldi	r22, 0x04	; 4
    2968:	40 e0       	ldi	r20, 0x00	; 0
    296a:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	65 e0       	ldi	r22, 0x05	; 5
    2972:	40 e0       	ldi	r20, 0x00	; 0
    2974:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	66 e0       	ldi	r22, 0x06	; 6
    297c:	40 e0       	ldi	r20, 0x00	; 0
    297e:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>

	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID,   PIN_OUTPUT);
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	64 e0       	ldi	r22, 0x04	; 4
    2986:	41 e0       	ldi	r20, 0x01	; 1
    2988:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_OUTPUT);
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	65 e0       	ldi	r22, 0x05	; 5
    2990:	41 e0       	ldi	r20, 0x01	; 1
    2992:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_OUTPUT);
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	66 e0       	ldi	r22, 0x06	; 6
    299a:	41 e0       	ldi	r20, 0x01	; 1
    299c:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>


#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	67 e0       	ldi	r22, 0x07	; 7
    29a4:	40 e0       	ldi	r20, 0x00	; 0
    29a6:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_OUTPUT);
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	67 e0       	ldi	r22, 0x07	; 7
    29ae:	41 e0       	ldi	r20, 0x01	; 1
    29b0:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    29b4:	aa c0       	rjmp	.+340    	; 0x2b0a <KEYPAD_getPressedKey+0x1e6>
#endif
	while(random_num)
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	a8 e4       	ldi	r26, 0x48	; 72
    29bc:	b2 e4       	ldi	r27, 0x42	; 66
    29be:	8b 87       	std	Y+11, r24	; 0x0b
    29c0:	9c 87       	std	Y+12, r25	; 0x0c
    29c2:	ad 87       	std	Y+13, r26	; 0x0d
    29c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    29cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	4a ef       	ldi	r20, 0xFA	; 250
    29d4:	54 e4       	ldi	r21, 0x44	; 68
    29d6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	8f 83       	std	Y+7, r24	; 0x07
    29e0:	98 87       	std	Y+8, r25	; 0x08
    29e2:	a9 87       	std	Y+9, r26	; 0x09
    29e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29e6:	6f 81       	ldd	r22, Y+7	; 0x07
    29e8:	78 85       	ldd	r23, Y+8	; 0x08
    29ea:	89 85       	ldd	r24, Y+9	; 0x09
    29ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	40 e8       	ldi	r20, 0x80	; 128
    29f4:	5f e3       	ldi	r21, 0x3F	; 63
    29f6:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    29fa:	88 23       	and	r24, r24
    29fc:	2c f4       	brge	.+10     	; 0x2a08 <KEYPAD_getPressedKey+0xe4>
		__ticks = 1;
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	9e 83       	std	Y+6, r25	; 0x06
    2a04:	8d 83       	std	Y+5, r24	; 0x05
    2a06:	3f c0       	rjmp	.+126    	; 0x2a86 <KEYPAD_getPressedKey+0x162>
	else if (__tmp > 65535)
    2a08:	6f 81       	ldd	r22, Y+7	; 0x07
    2a0a:	78 85       	ldd	r23, Y+8	; 0x08
    2a0c:	89 85       	ldd	r24, Y+9	; 0x09
    2a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	3f ef       	ldi	r19, 0xFF	; 255
    2a14:	4f e7       	ldi	r20, 0x7F	; 127
    2a16:	57 e4       	ldi	r21, 0x47	; 71
    2a18:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2a1c:	18 16       	cp	r1, r24
    2a1e:	4c f5       	brge	.+82     	; 0x2a72 <KEYPAD_getPressedKey+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	40 e2       	ldi	r20, 0x20	; 32
    2a2e:	51 e4       	ldi	r21, 0x41	; 65
    2a30:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	bc 01       	movw	r22, r24
    2a3a:	cd 01       	movw	r24, r26
    2a3c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	9e 83       	std	Y+6, r25	; 0x06
    2a46:	8d 83       	std	Y+5, r24	; 0x05
    2a48:	0f c0       	rjmp	.+30     	; 0x2a68 <KEYPAD_getPressedKey+0x144>
    2a4a:	88 ec       	ldi	r24, 0xC8	; 200
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	9c 83       	std	Y+4, r25	; 0x04
    2a50:	8b 83       	std	Y+3, r24	; 0x03
    2a52:	8b 81       	ldd	r24, Y+3	; 0x03
    2a54:	9c 81       	ldd	r25, Y+4	; 0x04
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	f1 f7       	brne	.-4      	; 0x2a56 <KEYPAD_getPressedKey+0x132>
    2a5a:	9c 83       	std	Y+4, r25	; 0x04
    2a5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a60:	9e 81       	ldd	r25, Y+6	; 0x06
    2a62:	01 97       	sbiw	r24, 0x01	; 1
    2a64:	9e 83       	std	Y+6, r25	; 0x06
    2a66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a68:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6c:	00 97       	sbiw	r24, 0x00	; 0
    2a6e:	69 f7       	brne	.-38     	; 0x2a4a <KEYPAD_getPressedKey+0x126>
    2a70:	14 c0       	rjmp	.+40     	; 0x2a9a <KEYPAD_getPressedKey+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a72:	6f 81       	ldd	r22, Y+7	; 0x07
    2a74:	78 85       	ldd	r23, Y+8	; 0x08
    2a76:	89 85       	ldd	r24, Y+9	; 0x09
    2a78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a7a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	9e 83       	std	Y+6, r25	; 0x06
    2a84:	8d 83       	std	Y+5, r24	; 0x05
    2a86:	8d 81       	ldd	r24, Y+5	; 0x05
    2a88:	9e 81       	ldd	r25, Y+6	; 0x06
    2a8a:	9a 83       	std	Y+2, r25	; 0x02
    2a8c:	89 83       	std	Y+1, r24	; 0x01
    2a8e:	89 81       	ldd	r24, Y+1	; 0x01
    2a90:	9a 81       	ldd	r25, Y+2	; 0x02
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	f1 f7       	brne	.-4      	; 0x2a92 <KEYPAD_getPressedKey+0x16e>
    2a96:	9a 83       	std	Y+2, r25	; 0x02
    2a98:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(50);
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2a9a:	1f 86       	std	Y+15, r1	; 0x0f
    2a9c:	33 c0       	rjmp	.+102    	; 0x2b04 <KEYPAD_getPressedKey+0x1e0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	6f 85       	ldd	r22, Y+15	; 0x0f
    2aa2:	41 e0       	ldi	r20, 0x01	; 1
    2aa4:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	6f 85       	ldd	r22, Y+15	; 0x0f
    2aac:	40 e0       	ldi	r20, 0x00	; 0
    2aae:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2ab2:	18 8a       	std	Y+16, r1	; 0x10
    2ab4:	1c c0       	rjmp	.+56     	; 0x2aee <KEYPAD_getPressedKey+0x1ca>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2ab6:	88 89       	ldd	r24, Y+16	; 0x10
    2ab8:	98 2f       	mov	r25, r24
    2aba:	9c 5f       	subi	r25, 0xFC	; 252
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	69 2f       	mov	r22, r25
    2ac0:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <GPIO_readPin>
    2ac4:	88 23       	and	r24, r24
    2ac6:	81 f4       	brne	.+32     	; 0x2ae8 <KEYPAD_getPressedKey+0x1c4>
#endif
#elif (KEYPAD_NUM_COLS == 4)
#ifdef STANDARD_KEYPAD
					return ((row*KEYPAD_NUM_COLS)+col+1);
#else
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2ac8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aca:	88 2f       	mov	r24, r24
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	88 0f       	add	r24, r24
    2ad0:	99 1f       	adc	r25, r25
    2ad2:	88 0f       	add	r24, r24
    2ad4:	99 1f       	adc	r25, r25
    2ad6:	98 2f       	mov	r25, r24
    2ad8:	88 89       	ldd	r24, Y+16	; 0x10
    2ada:	89 0f       	add	r24, r25
    2adc:	8f 5f       	subi	r24, 0xFF	; 255
    2ade:	0e 94 93 15 	call	0x2b26	; 0x2b26 <KEYPAD_4x4_adjustKeyNumber>
    2ae2:	89 8b       	std	Y+17, r24	; 0x11
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    2ae4:	89 89       	ldd	r24, Y+17	; 0x11
    2ae6:	16 c0       	rjmp	.+44     	; 0x2b14 <KEYPAD_getPressedKey+0x1f0>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2ae8:	88 89       	ldd	r24, Y+16	; 0x10
    2aea:	8f 5f       	subi	r24, 0xFF	; 255
    2aec:	88 8b       	std	Y+16, r24	; 0x10
    2aee:	88 89       	ldd	r24, Y+16	; 0x10
    2af0:	84 30       	cpi	r24, 0x04	; 4
    2af2:	08 f3       	brcs	.-62     	; 0x2ab6 <KEYPAD_getPressedKey+0x192>
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
#endif
#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	6f 85       	ldd	r22, Y+15	; 0x0f
    2af8:	40 e0       	ldi	r20, 0x00	; 0
    2afa:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_OUTPUT);
#endif
	while(random_num)
	{
		_delay_ms(50);
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2afe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b00:	8f 5f       	subi	r24, 0xFF	; 255
    2b02:	8f 87       	std	Y+15, r24	; 0x0f
    2b04:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b06:	84 30       	cpi	r24, 0x04	; 4
    2b08:	50 f2       	brcs	.-108    	; 0x2a9e <KEYPAD_getPressedKey+0x17a>

#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_OUTPUT);
#endif
	while(random_num)
    2b0a:	80 91 76 01 	lds	r24, 0x0176
    2b0e:	88 23       	and	r24, r24
    2b10:	09 f0       	breq	.+2      	; 0x2b14 <KEYPAD_getPressedKey+0x1f0>
    2b12:	51 cf       	rjmp	.-350    	; 0x29b6 <KEYPAD_getPressedKey+0x92>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    2b14:	61 96       	adiw	r28, 0x11	; 17
    2b16:	0f b6       	in	r0, 0x3f	; 63
    2b18:	f8 94       	cli
    2b1a:	de bf       	out	0x3e, r29	; 62
    2b1c:	0f be       	out	0x3f, r0	; 63
    2b1e:	cd bf       	out	0x3d, r28	; 61
    2b20:	cf 91       	pop	r28
    2b22:	df 91       	pop	r29
    2b24:	08 95       	ret

00002b26 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2b26:	df 93       	push	r29
    2b28:	cf 93       	push	r28
    2b2a:	00 d0       	rcall	.+0      	; 0x2b2c <KEYPAD_4x4_adjustKeyNumber+0x6>
    2b2c:	00 d0       	rcall	.+0      	; 0x2b2e <KEYPAD_4x4_adjustKeyNumber+0x8>
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
    2b32:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2b34:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2b36:	8a 81       	ldd	r24, Y+2	; 0x02
    2b38:	28 2f       	mov	r18, r24
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	3c 83       	std	Y+4, r19	; 0x04
    2b3e:	2b 83       	std	Y+3, r18	; 0x03
    2b40:	8b 81       	ldd	r24, Y+3	; 0x03
    2b42:	9c 81       	ldd	r25, Y+4	; 0x04
    2b44:	88 30       	cpi	r24, 0x08	; 8
    2b46:	91 05       	cpc	r25, r1
    2b48:	09 f4       	brne	.+2      	; 0x2b4c <KEYPAD_4x4_adjustKeyNumber+0x26>
    2b4a:	70 c0       	rjmp	.+224    	; 0x2c2c <KEYPAD_4x4_adjustKeyNumber+0x106>
    2b4c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b4e:	3c 81       	ldd	r19, Y+4	; 0x04
    2b50:	29 30       	cpi	r18, 0x09	; 9
    2b52:	31 05       	cpc	r19, r1
    2b54:	5c f5       	brge	.+86     	; 0x2bac <KEYPAD_4x4_adjustKeyNumber+0x86>
    2b56:	8b 81       	ldd	r24, Y+3	; 0x03
    2b58:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5a:	84 30       	cpi	r24, 0x04	; 4
    2b5c:	91 05       	cpc	r25, r1
    2b5e:	09 f4       	brne	.+2      	; 0x2b62 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2b60:	59 c0       	rjmp	.+178    	; 0x2c14 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2b62:	2b 81       	ldd	r18, Y+3	; 0x03
    2b64:	3c 81       	ldd	r19, Y+4	; 0x04
    2b66:	25 30       	cpi	r18, 0x05	; 5
    2b68:	31 05       	cpc	r19, r1
    2b6a:	9c f4       	brge	.+38     	; 0x2b92 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b70:	82 30       	cpi	r24, 0x02	; 2
    2b72:	91 05       	cpc	r25, r1
    2b74:	09 f4       	brne	.+2      	; 0x2b78 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2b76:	48 c0       	rjmp	.+144    	; 0x2c08 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2b78:	2b 81       	ldd	r18, Y+3	; 0x03
    2b7a:	3c 81       	ldd	r19, Y+4	; 0x04
    2b7c:	23 30       	cpi	r18, 0x03	; 3
    2b7e:	31 05       	cpc	r19, r1
    2b80:	0c f0       	brlt	.+2      	; 0x2b84 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2b82:	45 c0       	rjmp	.+138    	; 0x2c0e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2b84:	8b 81       	ldd	r24, Y+3	; 0x03
    2b86:	9c 81       	ldd	r25, Y+4	; 0x04
    2b88:	81 30       	cpi	r24, 0x01	; 1
    2b8a:	91 05       	cpc	r25, r1
    2b8c:	09 f4       	brne	.+2      	; 0x2b90 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2b8e:	39 c0       	rjmp	.+114    	; 0x2c02 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2b90:	67 c0       	rjmp	.+206    	; 0x2c60 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2b92:	2b 81       	ldd	r18, Y+3	; 0x03
    2b94:	3c 81       	ldd	r19, Y+4	; 0x04
    2b96:	26 30       	cpi	r18, 0x06	; 6
    2b98:	31 05       	cpc	r19, r1
    2b9a:	09 f4       	brne	.+2      	; 0x2b9e <KEYPAD_4x4_adjustKeyNumber+0x78>
    2b9c:	41 c0       	rjmp	.+130    	; 0x2c20 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba2:	87 30       	cpi	r24, 0x07	; 7
    2ba4:	91 05       	cpc	r25, r1
    2ba6:	0c f0       	brlt	.+2      	; 0x2baa <KEYPAD_4x4_adjustKeyNumber+0x84>
    2ba8:	3e c0       	rjmp	.+124    	; 0x2c26 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2baa:	37 c0       	rjmp	.+110    	; 0x2c1a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2bac:	2b 81       	ldd	r18, Y+3	; 0x03
    2bae:	3c 81       	ldd	r19, Y+4	; 0x04
    2bb0:	2c 30       	cpi	r18, 0x0C	; 12
    2bb2:	31 05       	cpc	r19, r1
    2bb4:	09 f4       	brne	.+2      	; 0x2bb8 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2bb6:	46 c0       	rjmp	.+140    	; 0x2c44 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bba:	9c 81       	ldd	r25, Y+4	; 0x04
    2bbc:	8d 30       	cpi	r24, 0x0D	; 13
    2bbe:	91 05       	cpc	r25, r1
    2bc0:	5c f4       	brge	.+22     	; 0x2bd8 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2bc2:	2b 81       	ldd	r18, Y+3	; 0x03
    2bc4:	3c 81       	ldd	r19, Y+4	; 0x04
    2bc6:	2a 30       	cpi	r18, 0x0A	; 10
    2bc8:	31 05       	cpc	r19, r1
    2bca:	b1 f1       	breq	.+108    	; 0x2c38 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bce:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd0:	8b 30       	cpi	r24, 0x0B	; 11
    2bd2:	91 05       	cpc	r25, r1
    2bd4:	a4 f5       	brge	.+104    	; 0x2c3e <KEYPAD_4x4_adjustKeyNumber+0x118>
    2bd6:	2d c0       	rjmp	.+90     	; 0x2c32 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2bd8:	2b 81       	ldd	r18, Y+3	; 0x03
    2bda:	3c 81       	ldd	r19, Y+4	; 0x04
    2bdc:	2e 30       	cpi	r18, 0x0E	; 14
    2bde:	31 05       	cpc	r19, r1
    2be0:	b9 f1       	breq	.+110    	; 0x2c50 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2be2:	8b 81       	ldd	r24, Y+3	; 0x03
    2be4:	9c 81       	ldd	r25, Y+4	; 0x04
    2be6:	8e 30       	cpi	r24, 0x0E	; 14
    2be8:	91 05       	cpc	r25, r1
    2bea:	7c f1       	brlt	.+94     	; 0x2c4a <KEYPAD_4x4_adjustKeyNumber+0x124>
    2bec:	2b 81       	ldd	r18, Y+3	; 0x03
    2bee:	3c 81       	ldd	r19, Y+4	; 0x04
    2bf0:	2f 30       	cpi	r18, 0x0F	; 15
    2bf2:	31 05       	cpc	r19, r1
    2bf4:	79 f1       	breq	.+94     	; 0x2c54 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bfa:	80 31       	cpi	r24, 0x10	; 16
    2bfc:	91 05       	cpc	r25, r1
    2bfe:	69 f1       	breq	.+90     	; 0x2c5a <KEYPAD_4x4_adjustKeyNumber+0x134>
    2c00:	2f c0       	rjmp	.+94     	; 0x2c60 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1: keypad_button = 7;
    2c02:	87 e0       	ldi	r24, 0x07	; 7
    2c04:	89 83       	std	Y+1, r24	; 0x01
    2c06:	2e c0       	rjmp	.+92     	; 0x2c64 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 2: keypad_button = 8;
    2c08:	88 e0       	ldi	r24, 0x08	; 8
    2c0a:	89 83       	std	Y+1, r24	; 0x01
    2c0c:	2b c0       	rjmp	.+86     	; 0x2c64 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 3: keypad_button = 9;
    2c0e:	89 e0       	ldi	r24, 0x09	; 9
    2c10:	89 83       	std	Y+1, r24	; 0x01
    2c12:	28 c0       	rjmp	.+80     	; 0x2c64 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 4: keypad_button = '/'; // ASCII Code of %
    2c14:	8f e2       	ldi	r24, 0x2F	; 47
    2c16:	89 83       	std	Y+1, r24	; 0x01
    2c18:	25 c0       	rjmp	.+74     	; 0x2c64 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 5: keypad_button = 4;
    2c1a:	84 e0       	ldi	r24, 0x04	; 4
    2c1c:	89 83       	std	Y+1, r24	; 0x01
    2c1e:	22 c0       	rjmp	.+68     	; 0x2c64 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 6: keypad_button = 5;
    2c20:	85 e0       	ldi	r24, 0x05	; 5
    2c22:	89 83       	std	Y+1, r24	; 0x01
    2c24:	1f c0       	rjmp	.+62     	; 0x2c64 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 7: keypad_button = 6;
    2c26:	86 e0       	ldi	r24, 0x06	; 6
    2c28:	89 83       	std	Y+1, r24	; 0x01
    2c2a:	1c c0       	rjmp	.+56     	; 0x2c64 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2c2c:	8a e2       	ldi	r24, 0x2A	; 42
    2c2e:	89 83       	std	Y+1, r24	; 0x01
    2c30:	19 c0       	rjmp	.+50     	; 0x2c64 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 9: keypad_button = 1;
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	89 83       	std	Y+1, r24	; 0x01
    2c36:	16 c0       	rjmp	.+44     	; 0x2c64 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 10: keypad_button = 2;
    2c38:	82 e0       	ldi	r24, 0x02	; 2
    2c3a:	89 83       	std	Y+1, r24	; 0x01
    2c3c:	13 c0       	rjmp	.+38     	; 0x2c64 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 11: keypad_button = 3;
    2c3e:	83 e0       	ldi	r24, 0x03	; 3
    2c40:	89 83       	std	Y+1, r24	; 0x01
    2c42:	10 c0       	rjmp	.+32     	; 0x2c64 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2c44:	8d e2       	ldi	r24, 0x2D	; 45
    2c46:	89 83       	std	Y+1, r24	; 0x01
    2c48:	0d c0       	rjmp	.+26     	; 0x2c64 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 13: keypad_button = 'c';  /* ASCII Code of 'c */
    2c4a:	83 e6       	ldi	r24, 0x63	; 99
    2c4c:	89 83       	std	Y+1, r24	; 0x01
    2c4e:	0a c0       	rjmp	.+20     	; 0x2c64 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 14: keypad_button = 0;
    2c50:	19 82       	std	Y+1, r1	; 0x01
    2c52:	08 c0       	rjmp	.+16     	; 0x2c64 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 15: keypad_button = '='; /* ASCII Code of '=' */
    2c54:	8d e3       	ldi	r24, 0x3D	; 61
    2c56:	89 83       	std	Y+1, r24	; 0x01
    2c58:	05 c0       	rjmp	.+10     	; 0x2c64 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2c5a:	8b e2       	ldi	r24, 0x2B	; 43
    2c5c:	89 83       	std	Y+1, r24	; 0x01
    2c5e:	02 c0       	rjmp	.+4      	; 0x2c64 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	default: keypad_button = button_number;
    2c60:	8a 81       	ldd	r24, Y+2	; 0x02
    2c62:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	return keypad_button;
    2c64:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2c66:	0f 90       	pop	r0
    2c68:	0f 90       	pop	r0
    2c6a:	0f 90       	pop	r0
    2c6c:	0f 90       	pop	r0
    2c6e:	cf 91       	pop	r28
    2c70:	df 91       	pop	r29
    2c72:	08 95       	ret

00002c74 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2c74:	df 93       	push	r29
    2c76:	cf 93       	push	r28
    2c78:	cd b7       	in	r28, 0x3d	; 61
    2c7a:	de b7       	in	r29, 0x3e	; 62
    2c7c:	2e 97       	sbiw	r28, 0x0e	; 14
    2c7e:	0f b6       	in	r0, 0x3f	; 63
    2c80:	f8 94       	cli
    2c82:	de bf       	out	0x3e, r29	; 62
    2c84:	0f be       	out	0x3f, r0	; 63
    2c86:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2c88:	82 e0       	ldi	r24, 0x02	; 2
    2c8a:	60 e0       	ldi	r22, 0x00	; 0
    2c8c:	41 e0       	ldi	r20, 0x01	; 1
    2c8e:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2c92:	82 e0       	ldi	r24, 0x02	; 2
    2c94:	62 e0       	ldi	r22, 0x02	; 2
    2c96:	41 e0       	ldi	r20, 0x01	; 1
    2c98:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2c9c:	82 e0       	ldi	r24, 0x02	; 2
    2c9e:	61 e0       	ldi	r22, 0x01	; 1
    2ca0:	41 e0       	ldi	r20, 0x01	; 1
    2ca2:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>

	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID,LOGIC_LOW);/* Disable LCD RW=0 */
    2ca6:	82 e0       	ldi	r24, 0x02	; 2
    2ca8:	61 e0       	ldi	r22, 0x01	; 1
    2caa:	40 e0       	ldi	r20, 0x00	; 0
    2cac:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	a0 ea       	ldi	r26, 0xA0	; 160
    2cb6:	b1 e4       	ldi	r27, 0x41	; 65
    2cb8:	8b 87       	std	Y+11, r24	; 0x0b
    2cba:	9c 87       	std	Y+12, r25	; 0x0c
    2cbc:	ad 87       	std	Y+13, r26	; 0x0d
    2cbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc8:	20 e0       	ldi	r18, 0x00	; 0
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	4a ef       	ldi	r20, 0xFA	; 250
    2cce:	54 e4       	ldi	r21, 0x44	; 68
    2cd0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	8f 83       	std	Y+7, r24	; 0x07
    2cda:	98 87       	std	Y+8, r25	; 0x08
    2cdc:	a9 87       	std	Y+9, r26	; 0x09
    2cde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ce0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce2:	78 85       	ldd	r23, Y+8	; 0x08
    2ce4:	89 85       	ldd	r24, Y+9	; 0x09
    2ce6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce8:	20 e0       	ldi	r18, 0x00	; 0
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	40 e8       	ldi	r20, 0x80	; 128
    2cee:	5f e3       	ldi	r21, 0x3F	; 63
    2cf0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2cf4:	88 23       	and	r24, r24
    2cf6:	2c f4       	brge	.+10     	; 0x2d02 <LCD_init+0x8e>
		__ticks = 1;
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	9e 83       	std	Y+6, r25	; 0x06
    2cfe:	8d 83       	std	Y+5, r24	; 0x05
    2d00:	3f c0       	rjmp	.+126    	; 0x2d80 <LCD_init+0x10c>
	else if (__tmp > 65535)
    2d02:	6f 81       	ldd	r22, Y+7	; 0x07
    2d04:	78 85       	ldd	r23, Y+8	; 0x08
    2d06:	89 85       	ldd	r24, Y+9	; 0x09
    2d08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0a:	20 e0       	ldi	r18, 0x00	; 0
    2d0c:	3f ef       	ldi	r19, 0xFF	; 255
    2d0e:	4f e7       	ldi	r20, 0x7F	; 127
    2d10:	57 e4       	ldi	r21, 0x47	; 71
    2d12:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2d16:	18 16       	cp	r1, r24
    2d18:	4c f5       	brge	.+82     	; 0x2d6c <LCD_init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d20:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	40 e2       	ldi	r20, 0x20	; 32
    2d28:	51 e4       	ldi	r21, 0x41	; 65
    2d2a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	bc 01       	movw	r22, r24
    2d34:	cd 01       	movw	r24, r26
    2d36:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	9e 83       	std	Y+6, r25	; 0x06
    2d40:	8d 83       	std	Y+5, r24	; 0x05
    2d42:	0f c0       	rjmp	.+30     	; 0x2d62 <LCD_init+0xee>
    2d44:	88 ec       	ldi	r24, 0xC8	; 200
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	9c 83       	std	Y+4, r25	; 0x04
    2d4a:	8b 83       	std	Y+3, r24	; 0x03
    2d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d50:	01 97       	sbiw	r24, 0x01	; 1
    2d52:	f1 f7       	brne	.-4      	; 0x2d50 <LCD_init+0xdc>
    2d54:	9c 83       	std	Y+4, r25	; 0x04
    2d56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d58:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d5c:	01 97       	sbiw	r24, 0x01	; 1
    2d5e:	9e 83       	std	Y+6, r25	; 0x06
    2d60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d62:	8d 81       	ldd	r24, Y+5	; 0x05
    2d64:	9e 81       	ldd	r25, Y+6	; 0x06
    2d66:	00 97       	sbiw	r24, 0x00	; 0
    2d68:	69 f7       	brne	.-38     	; 0x2d44 <LCD_init+0xd0>
    2d6a:	14 c0       	rjmp	.+40     	; 0x2d94 <LCD_init+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d6c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d6e:	78 85       	ldd	r23, Y+8	; 0x08
    2d70:	89 85       	ldd	r24, Y+9	; 0x09
    2d72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d74:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	9e 83       	std	Y+6, r25	; 0x06
    2d7e:	8d 83       	std	Y+5, r24	; 0x05
    2d80:	8d 81       	ldd	r24, Y+5	; 0x05
    2d82:	9e 81       	ldd	r25, Y+6	; 0x06
    2d84:	9a 83       	std	Y+2, r25	; 0x02
    2d86:	89 83       	std	Y+1, r24	; 0x01
    2d88:	89 81       	ldd	r24, Y+1	; 0x01
    2d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d8c:	01 97       	sbiw	r24, 0x01	; 1
    2d8e:	f1 f7       	brne	.-4      	; 0x2d8c <LCD_init+0x118>
    2d90:	9a 83       	std	Y+2, r25	; 0x02
    2d92:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    2d94:	82 e0       	ldi	r24, 0x02	; 2
    2d96:	63 e0       	ldi	r22, 0x03	; 3
    2d98:	41 e0       	ldi	r20, 0x01	; 1
    2d9a:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    2d9e:	82 e0       	ldi	r24, 0x02	; 2
    2da0:	64 e0       	ldi	r22, 0x04	; 4
    2da2:	41 e0       	ldi	r20, 0x01	; 1
    2da4:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    2da8:	82 e0       	ldi	r24, 0x02	; 2
    2daa:	65 e0       	ldi	r22, 0x05	; 5
    2dac:	41 e0       	ldi	r20, 0x01	; 1
    2dae:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    2db2:	82 e0       	ldi	r24, 0x02	; 2
    2db4:	66 e0       	ldi	r22, 0x06	; 6
    2db6:	41 e0       	ldi	r20, 0x01	; 1
    2db8:	0e 94 9e 09 	call	0x133c	; 0x133c <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2dbc:	83 e3       	ldi	r24, 0x33	; 51
    2dbe:	0e 94 f6 16 	call	0x2dec	; 0x2dec <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    2dc2:	82 e3       	ldi	r24, 0x32	; 50
    2dc4:	0e 94 f6 16 	call	0x2dec	; 0x2dec <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2dc8:	88 e2       	ldi	r24, 0x28	; 40
    2dca:	0e 94 f6 16 	call	0x2dec	; 0x2dec <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2dce:	8c e0       	ldi	r24, 0x0C	; 12
    2dd0:	0e 94 f6 16 	call	0x2dec	; 0x2dec <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2dd4:	81 e0       	ldi	r24, 0x01	; 1
    2dd6:	0e 94 f6 16 	call	0x2dec	; 0x2dec <LCD_sendCommand>
}
    2dda:	2e 96       	adiw	r28, 0x0e	; 14
    2ddc:	0f b6       	in	r0, 0x3f	; 63
    2dde:	f8 94       	cli
    2de0:	de bf       	out	0x3e, r29	; 62
    2de2:	0f be       	out	0x3f, r0	; 63
    2de4:	cd bf       	out	0x3d, r28	; 61
    2de6:	cf 91       	pop	r28
    2de8:	df 91       	pop	r29
    2dea:	08 95       	ret

00002dec <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2dec:	0f 93       	push	r16
    2dee:	1f 93       	push	r17
    2df0:	df 93       	push	r29
    2df2:	cf 93       	push	r28
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
    2df8:	c3 56       	subi	r28, 0x63	; 99
    2dfa:	d0 40       	sbci	r29, 0x00	; 0
    2dfc:	0f b6       	in	r0, 0x3f	; 63
    2dfe:	f8 94       	cli
    2e00:	de bf       	out	0x3e, r29	; 62
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	cd bf       	out	0x3d, r28	; 61
    2e06:	fe 01       	movw	r30, r28
    2e08:	ed 59       	subi	r30, 0x9D	; 157
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2e0e:	82 e0       	ldi	r24, 0x02	; 2
    2e10:	60 e0       	ldi	r22, 0x00	; 0
    2e12:	40 e0       	ldi	r20, 0x00	; 0
    2e14:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    2e18:	fe 01       	movw	r30, r28
    2e1a:	e1 5a       	subi	r30, 0xA1	; 161
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	80 e0       	ldi	r24, 0x00	; 0
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	a0 e8       	ldi	r26, 0x80	; 128
    2e24:	bf e3       	ldi	r27, 0x3F	; 63
    2e26:	80 83       	st	Z, r24
    2e28:	91 83       	std	Z+1, r25	; 0x01
    2e2a:	a2 83       	std	Z+2, r26	; 0x02
    2e2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e2e:	8e 01       	movw	r16, r28
    2e30:	05 5a       	subi	r16, 0xA5	; 165
    2e32:	1f 4f       	sbci	r17, 0xFF	; 255
    2e34:	fe 01       	movw	r30, r28
    2e36:	e1 5a       	subi	r30, 0xA1	; 161
    2e38:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3a:	60 81       	ld	r22, Z
    2e3c:	71 81       	ldd	r23, Z+1	; 0x01
    2e3e:	82 81       	ldd	r24, Z+2	; 0x02
    2e40:	93 81       	ldd	r25, Z+3	; 0x03
    2e42:	20 e0       	ldi	r18, 0x00	; 0
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	4a ef       	ldi	r20, 0xFA	; 250
    2e48:	54 e4       	ldi	r21, 0x44	; 68
    2e4a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	f8 01       	movw	r30, r16
    2e54:	80 83       	st	Z, r24
    2e56:	91 83       	std	Z+1, r25	; 0x01
    2e58:	a2 83       	std	Z+2, r26	; 0x02
    2e5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	e5 5a       	subi	r30, 0xA5	; 165
    2e60:	ff 4f       	sbci	r31, 0xFF	; 255
    2e62:	60 81       	ld	r22, Z
    2e64:	71 81       	ldd	r23, Z+1	; 0x01
    2e66:	82 81       	ldd	r24, Z+2	; 0x02
    2e68:	93 81       	ldd	r25, Z+3	; 0x03
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	40 e8       	ldi	r20, 0x80	; 128
    2e70:	5f e3       	ldi	r21, 0x3F	; 63
    2e72:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2e76:	88 23       	and	r24, r24
    2e78:	44 f4       	brge	.+16     	; 0x2e8a <LCD_sendCommand+0x9e>
		__ticks = 1;
    2e7a:	fe 01       	movw	r30, r28
    2e7c:	e7 5a       	subi	r30, 0xA7	; 167
    2e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	91 83       	std	Z+1, r25	; 0x01
    2e86:	80 83       	st	Z, r24
    2e88:	64 c0       	rjmp	.+200    	; 0x2f52 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    2e8a:	fe 01       	movw	r30, r28
    2e8c:	e5 5a       	subi	r30, 0xA5	; 165
    2e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e90:	60 81       	ld	r22, Z
    2e92:	71 81       	ldd	r23, Z+1	; 0x01
    2e94:	82 81       	ldd	r24, Z+2	; 0x02
    2e96:	93 81       	ldd	r25, Z+3	; 0x03
    2e98:	20 e0       	ldi	r18, 0x00	; 0
    2e9a:	3f ef       	ldi	r19, 0xFF	; 255
    2e9c:	4f e7       	ldi	r20, 0x7F	; 127
    2e9e:	57 e4       	ldi	r21, 0x47	; 71
    2ea0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2ea4:	18 16       	cp	r1, r24
    2ea6:	0c f0       	brlt	.+2      	; 0x2eaa <LCD_sendCommand+0xbe>
    2ea8:	43 c0       	rjmp	.+134    	; 0x2f30 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eaa:	fe 01       	movw	r30, r28
    2eac:	e1 5a       	subi	r30, 0xA1	; 161
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	60 81       	ld	r22, Z
    2eb2:	71 81       	ldd	r23, Z+1	; 0x01
    2eb4:	82 81       	ldd	r24, Z+2	; 0x02
    2eb6:	93 81       	ldd	r25, Z+3	; 0x03
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	40 e2       	ldi	r20, 0x20	; 32
    2ebe:	51 e4       	ldi	r21, 0x41	; 65
    2ec0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	8e 01       	movw	r16, r28
    2eca:	07 5a       	subi	r16, 0xA7	; 167
    2ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ece:	bc 01       	movw	r22, r24
    2ed0:	cd 01       	movw	r24, r26
    2ed2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	f8 01       	movw	r30, r16
    2edc:	91 83       	std	Z+1, r25	; 0x01
    2ede:	80 83       	st	Z, r24
    2ee0:	1f c0       	rjmp	.+62     	; 0x2f20 <LCD_sendCommand+0x134>
    2ee2:	fe 01       	movw	r30, r28
    2ee4:	e9 5a       	subi	r30, 0xA9	; 169
    2ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee8:	88 ec       	ldi	r24, 0xC8	; 200
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	91 83       	std	Z+1, r25	; 0x01
    2eee:	80 83       	st	Z, r24
    2ef0:	fe 01       	movw	r30, r28
    2ef2:	e9 5a       	subi	r30, 0xA9	; 169
    2ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef6:	80 81       	ld	r24, Z
    2ef8:	91 81       	ldd	r25, Z+1	; 0x01
    2efa:	01 97       	sbiw	r24, 0x01	; 1
    2efc:	f1 f7       	brne	.-4      	; 0x2efa <LCD_sendCommand+0x10e>
    2efe:	fe 01       	movw	r30, r28
    2f00:	e9 5a       	subi	r30, 0xA9	; 169
    2f02:	ff 4f       	sbci	r31, 0xFF	; 255
    2f04:	91 83       	std	Z+1, r25	; 0x01
    2f06:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f08:	de 01       	movw	r26, r28
    2f0a:	a7 5a       	subi	r26, 0xA7	; 167
    2f0c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f0e:	fe 01       	movw	r30, r28
    2f10:	e7 5a       	subi	r30, 0xA7	; 167
    2f12:	ff 4f       	sbci	r31, 0xFF	; 255
    2f14:	80 81       	ld	r24, Z
    2f16:	91 81       	ldd	r25, Z+1	; 0x01
    2f18:	01 97       	sbiw	r24, 0x01	; 1
    2f1a:	11 96       	adiw	r26, 0x01	; 1
    2f1c:	9c 93       	st	X, r25
    2f1e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f20:	fe 01       	movw	r30, r28
    2f22:	e7 5a       	subi	r30, 0xA7	; 167
    2f24:	ff 4f       	sbci	r31, 0xFF	; 255
    2f26:	80 81       	ld	r24, Z
    2f28:	91 81       	ldd	r25, Z+1	; 0x01
    2f2a:	00 97       	sbiw	r24, 0x00	; 0
    2f2c:	d1 f6       	brne	.-76     	; 0x2ee2 <LCD_sendCommand+0xf6>
    2f2e:	27 c0       	rjmp	.+78     	; 0x2f7e <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f30:	8e 01       	movw	r16, r28
    2f32:	07 5a       	subi	r16, 0xA7	; 167
    2f34:	1f 4f       	sbci	r17, 0xFF	; 255
    2f36:	fe 01       	movw	r30, r28
    2f38:	e5 5a       	subi	r30, 0xA5	; 165
    2f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3c:	60 81       	ld	r22, Z
    2f3e:	71 81       	ldd	r23, Z+1	; 0x01
    2f40:	82 81       	ldd	r24, Z+2	; 0x02
    2f42:	93 81       	ldd	r25, Z+3	; 0x03
    2f44:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	f8 01       	movw	r30, r16
    2f4e:	91 83       	std	Z+1, r25	; 0x01
    2f50:	80 83       	st	Z, r24
    2f52:	de 01       	movw	r26, r28
    2f54:	ab 5a       	subi	r26, 0xAB	; 171
    2f56:	bf 4f       	sbci	r27, 0xFF	; 255
    2f58:	fe 01       	movw	r30, r28
    2f5a:	e7 5a       	subi	r30, 0xA7	; 167
    2f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5e:	80 81       	ld	r24, Z
    2f60:	91 81       	ldd	r25, Z+1	; 0x01
    2f62:	8d 93       	st	X+, r24
    2f64:	9c 93       	st	X, r25
    2f66:	fe 01       	movw	r30, r28
    2f68:	eb 5a       	subi	r30, 0xAB	; 171
    2f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6c:	80 81       	ld	r24, Z
    2f6e:	91 81       	ldd	r25, Z+1	; 0x01
    2f70:	01 97       	sbiw	r24, 0x01	; 1
    2f72:	f1 f7       	brne	.-4      	; 0x2f70 <LCD_sendCommand+0x184>
    2f74:	fe 01       	movw	r30, r28
    2f76:	eb 5a       	subi	r30, 0xAB	; 171
    2f78:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7a:	91 83       	std	Z+1, r25	; 0x01
    2f7c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2f7e:	82 e0       	ldi	r24, 0x02	; 2
    2f80:	62 e0       	ldi	r22, 0x02	; 2
    2f82:	41 e0       	ldi	r20, 0x01	; 1
    2f84:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    2f88:	fe 01       	movw	r30, r28
    2f8a:	ef 5a       	subi	r30, 0xAF	; 175
    2f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	a0 e8       	ldi	r26, 0x80	; 128
    2f94:	bf e3       	ldi	r27, 0x3F	; 63
    2f96:	80 83       	st	Z, r24
    2f98:	91 83       	std	Z+1, r25	; 0x01
    2f9a:	a2 83       	std	Z+2, r26	; 0x02
    2f9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f9e:	8e 01       	movw	r16, r28
    2fa0:	03 5b       	subi	r16, 0xB3	; 179
    2fa2:	1f 4f       	sbci	r17, 0xFF	; 255
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	ef 5a       	subi	r30, 0xAF	; 175
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	60 81       	ld	r22, Z
    2fac:	71 81       	ldd	r23, Z+1	; 0x01
    2fae:	82 81       	ldd	r24, Z+2	; 0x02
    2fb0:	93 81       	ldd	r25, Z+3	; 0x03
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	4a ef       	ldi	r20, 0xFA	; 250
    2fb8:	54 e4       	ldi	r21, 0x44	; 68
    2fba:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	f8 01       	movw	r30, r16
    2fc4:	80 83       	st	Z, r24
    2fc6:	91 83       	std	Z+1, r25	; 0x01
    2fc8:	a2 83       	std	Z+2, r26	; 0x02
    2fca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fcc:	fe 01       	movw	r30, r28
    2fce:	e3 5b       	subi	r30, 0xB3	; 179
    2fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd2:	60 81       	ld	r22, Z
    2fd4:	71 81       	ldd	r23, Z+1	; 0x01
    2fd6:	82 81       	ldd	r24, Z+2	; 0x02
    2fd8:	93 81       	ldd	r25, Z+3	; 0x03
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	40 e8       	ldi	r20, 0x80	; 128
    2fe0:	5f e3       	ldi	r21, 0x3F	; 63
    2fe2:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2fe6:	88 23       	and	r24, r24
    2fe8:	44 f4       	brge	.+16     	; 0x2ffa <LCD_sendCommand+0x20e>
		__ticks = 1;
    2fea:	fe 01       	movw	r30, r28
    2fec:	e5 5b       	subi	r30, 0xB5	; 181
    2fee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff0:	81 e0       	ldi	r24, 0x01	; 1
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	91 83       	std	Z+1, r25	; 0x01
    2ff6:	80 83       	st	Z, r24
    2ff8:	64 c0       	rjmp	.+200    	; 0x30c2 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2ffa:	fe 01       	movw	r30, r28
    2ffc:	e3 5b       	subi	r30, 0xB3	; 179
    2ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    3000:	60 81       	ld	r22, Z
    3002:	71 81       	ldd	r23, Z+1	; 0x01
    3004:	82 81       	ldd	r24, Z+2	; 0x02
    3006:	93 81       	ldd	r25, Z+3	; 0x03
    3008:	20 e0       	ldi	r18, 0x00	; 0
    300a:	3f ef       	ldi	r19, 0xFF	; 255
    300c:	4f e7       	ldi	r20, 0x7F	; 127
    300e:	57 e4       	ldi	r21, 0x47	; 71
    3010:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3014:	18 16       	cp	r1, r24
    3016:	0c f0       	brlt	.+2      	; 0x301a <LCD_sendCommand+0x22e>
    3018:	43 c0       	rjmp	.+134    	; 0x30a0 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    301a:	fe 01       	movw	r30, r28
    301c:	ef 5a       	subi	r30, 0xAF	; 175
    301e:	ff 4f       	sbci	r31, 0xFF	; 255
    3020:	60 81       	ld	r22, Z
    3022:	71 81       	ldd	r23, Z+1	; 0x01
    3024:	82 81       	ldd	r24, Z+2	; 0x02
    3026:	93 81       	ldd	r25, Z+3	; 0x03
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	40 e2       	ldi	r20, 0x20	; 32
    302e:	51 e4       	ldi	r21, 0x41	; 65
    3030:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3034:	dc 01       	movw	r26, r24
    3036:	cb 01       	movw	r24, r22
    3038:	8e 01       	movw	r16, r28
    303a:	05 5b       	subi	r16, 0xB5	; 181
    303c:	1f 4f       	sbci	r17, 0xFF	; 255
    303e:	bc 01       	movw	r22, r24
    3040:	cd 01       	movw	r24, r26
    3042:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3046:	dc 01       	movw	r26, r24
    3048:	cb 01       	movw	r24, r22
    304a:	f8 01       	movw	r30, r16
    304c:	91 83       	std	Z+1, r25	; 0x01
    304e:	80 83       	st	Z, r24
    3050:	1f c0       	rjmp	.+62     	; 0x3090 <LCD_sendCommand+0x2a4>
    3052:	fe 01       	movw	r30, r28
    3054:	e7 5b       	subi	r30, 0xB7	; 183
    3056:	ff 4f       	sbci	r31, 0xFF	; 255
    3058:	88 ec       	ldi	r24, 0xC8	; 200
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	91 83       	std	Z+1, r25	; 0x01
    305e:	80 83       	st	Z, r24
    3060:	fe 01       	movw	r30, r28
    3062:	e7 5b       	subi	r30, 0xB7	; 183
    3064:	ff 4f       	sbci	r31, 0xFF	; 255
    3066:	80 81       	ld	r24, Z
    3068:	91 81       	ldd	r25, Z+1	; 0x01
    306a:	01 97       	sbiw	r24, 0x01	; 1
    306c:	f1 f7       	brne	.-4      	; 0x306a <LCD_sendCommand+0x27e>
    306e:	fe 01       	movw	r30, r28
    3070:	e7 5b       	subi	r30, 0xB7	; 183
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	91 83       	std	Z+1, r25	; 0x01
    3076:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3078:	de 01       	movw	r26, r28
    307a:	a5 5b       	subi	r26, 0xB5	; 181
    307c:	bf 4f       	sbci	r27, 0xFF	; 255
    307e:	fe 01       	movw	r30, r28
    3080:	e5 5b       	subi	r30, 0xB5	; 181
    3082:	ff 4f       	sbci	r31, 0xFF	; 255
    3084:	80 81       	ld	r24, Z
    3086:	91 81       	ldd	r25, Z+1	; 0x01
    3088:	01 97       	sbiw	r24, 0x01	; 1
    308a:	11 96       	adiw	r26, 0x01	; 1
    308c:	9c 93       	st	X, r25
    308e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3090:	fe 01       	movw	r30, r28
    3092:	e5 5b       	subi	r30, 0xB5	; 181
    3094:	ff 4f       	sbci	r31, 0xFF	; 255
    3096:	80 81       	ld	r24, Z
    3098:	91 81       	ldd	r25, Z+1	; 0x01
    309a:	00 97       	sbiw	r24, 0x00	; 0
    309c:	d1 f6       	brne	.-76     	; 0x3052 <LCD_sendCommand+0x266>
    309e:	27 c0       	rjmp	.+78     	; 0x30ee <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a0:	8e 01       	movw	r16, r28
    30a2:	05 5b       	subi	r16, 0xB5	; 181
    30a4:	1f 4f       	sbci	r17, 0xFF	; 255
    30a6:	fe 01       	movw	r30, r28
    30a8:	e3 5b       	subi	r30, 0xB3	; 179
    30aa:	ff 4f       	sbci	r31, 0xFF	; 255
    30ac:	60 81       	ld	r22, Z
    30ae:	71 81       	ldd	r23, Z+1	; 0x01
    30b0:	82 81       	ldd	r24, Z+2	; 0x02
    30b2:	93 81       	ldd	r25, Z+3	; 0x03
    30b4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	f8 01       	movw	r30, r16
    30be:	91 83       	std	Z+1, r25	; 0x01
    30c0:	80 83       	st	Z, r24
    30c2:	de 01       	movw	r26, r28
    30c4:	a9 5b       	subi	r26, 0xB9	; 185
    30c6:	bf 4f       	sbci	r27, 0xFF	; 255
    30c8:	fe 01       	movw	r30, r28
    30ca:	e5 5b       	subi	r30, 0xB5	; 181
    30cc:	ff 4f       	sbci	r31, 0xFF	; 255
    30ce:	80 81       	ld	r24, Z
    30d0:	91 81       	ldd	r25, Z+1	; 0x01
    30d2:	8d 93       	st	X+, r24
    30d4:	9c 93       	st	X, r25
    30d6:	fe 01       	movw	r30, r28
    30d8:	e9 5b       	subi	r30, 0xB9	; 185
    30da:	ff 4f       	sbci	r31, 0xFF	; 255
    30dc:	80 81       	ld	r24, Z
    30de:	91 81       	ldd	r25, Z+1	; 0x01
    30e0:	01 97       	sbiw	r24, 0x01	; 1
    30e2:	f1 f7       	brne	.-4      	; 0x30e0 <LCD_sendCommand+0x2f4>
    30e4:	fe 01       	movw	r30, r28
    30e6:	e9 5b       	subi	r30, 0xB9	; 185
    30e8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ea:	91 83       	std	Z+1, r25	; 0x01
    30ec:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    30ee:	fe 01       	movw	r30, r28
    30f0:	ed 59       	subi	r30, 0x9D	; 157
    30f2:	ff 4f       	sbci	r31, 0xFF	; 255
    30f4:	80 81       	ld	r24, Z
    30f6:	88 2f       	mov	r24, r24
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	80 71       	andi	r24, 0x10	; 16
    30fc:	90 70       	andi	r25, 0x00	; 0
    30fe:	95 95       	asr	r25
    3100:	87 95       	ror	r24
    3102:	95 95       	asr	r25
    3104:	87 95       	ror	r24
    3106:	95 95       	asr	r25
    3108:	87 95       	ror	r24
    310a:	95 95       	asr	r25
    310c:	87 95       	ror	r24
    310e:	98 2f       	mov	r25, r24
    3110:	82 e0       	ldi	r24, 0x02	; 2
    3112:	63 e0       	ldi	r22, 0x03	; 3
    3114:	49 2f       	mov	r20, r25
    3116:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    311a:	fe 01       	movw	r30, r28
    311c:	ed 59       	subi	r30, 0x9D	; 157
    311e:	ff 4f       	sbci	r31, 0xFF	; 255
    3120:	80 81       	ld	r24, Z
    3122:	88 2f       	mov	r24, r24
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	80 72       	andi	r24, 0x20	; 32
    3128:	90 70       	andi	r25, 0x00	; 0
    312a:	95 95       	asr	r25
    312c:	87 95       	ror	r24
    312e:	95 95       	asr	r25
    3130:	87 95       	ror	r24
    3132:	95 95       	asr	r25
    3134:	87 95       	ror	r24
    3136:	95 95       	asr	r25
    3138:	87 95       	ror	r24
    313a:	95 95       	asr	r25
    313c:	87 95       	ror	r24
    313e:	98 2f       	mov	r25, r24
    3140:	82 e0       	ldi	r24, 0x02	; 2
    3142:	64 e0       	ldi	r22, 0x04	; 4
    3144:	49 2f       	mov	r20, r25
    3146:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    314a:	fe 01       	movw	r30, r28
    314c:	ed 59       	subi	r30, 0x9D	; 157
    314e:	ff 4f       	sbci	r31, 0xFF	; 255
    3150:	80 81       	ld	r24, Z
    3152:	88 2f       	mov	r24, r24
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	80 74       	andi	r24, 0x40	; 64
    3158:	90 70       	andi	r25, 0x00	; 0
    315a:	08 2e       	mov	r0, r24
    315c:	89 2f       	mov	r24, r25
    315e:	00 0c       	add	r0, r0
    3160:	88 1f       	adc	r24, r24
    3162:	99 0b       	sbc	r25, r25
    3164:	00 0c       	add	r0, r0
    3166:	88 1f       	adc	r24, r24
    3168:	99 1f       	adc	r25, r25
    316a:	98 2f       	mov	r25, r24
    316c:	82 e0       	ldi	r24, 0x02	; 2
    316e:	65 e0       	ldi	r22, 0x05	; 5
    3170:	49 2f       	mov	r20, r25
    3172:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    3176:	fe 01       	movw	r30, r28
    3178:	ed 59       	subi	r30, 0x9D	; 157
    317a:	ff 4f       	sbci	r31, 0xFF	; 255
    317c:	80 81       	ld	r24, Z
    317e:	98 2f       	mov	r25, r24
    3180:	99 1f       	adc	r25, r25
    3182:	99 27       	eor	r25, r25
    3184:	99 1f       	adc	r25, r25
    3186:	82 e0       	ldi	r24, 0x02	; 2
    3188:	66 e0       	ldi	r22, 0x06	; 6
    318a:	49 2f       	mov	r20, r25
    318c:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    3190:	fe 01       	movw	r30, r28
    3192:	ed 5b       	subi	r30, 0xBD	; 189
    3194:	ff 4f       	sbci	r31, 0xFF	; 255
    3196:	80 e0       	ldi	r24, 0x00	; 0
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	a0 e8       	ldi	r26, 0x80	; 128
    319c:	bf e3       	ldi	r27, 0x3F	; 63
    319e:	80 83       	st	Z, r24
    31a0:	91 83       	std	Z+1, r25	; 0x01
    31a2:	a2 83       	std	Z+2, r26	; 0x02
    31a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31a6:	8e 01       	movw	r16, r28
    31a8:	01 5c       	subi	r16, 0xC1	; 193
    31aa:	1f 4f       	sbci	r17, 0xFF	; 255
    31ac:	fe 01       	movw	r30, r28
    31ae:	ed 5b       	subi	r30, 0xBD	; 189
    31b0:	ff 4f       	sbci	r31, 0xFF	; 255
    31b2:	60 81       	ld	r22, Z
    31b4:	71 81       	ldd	r23, Z+1	; 0x01
    31b6:	82 81       	ldd	r24, Z+2	; 0x02
    31b8:	93 81       	ldd	r25, Z+3	; 0x03
    31ba:	20 e0       	ldi	r18, 0x00	; 0
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	4a ef       	ldi	r20, 0xFA	; 250
    31c0:	54 e4       	ldi	r21, 0x44	; 68
    31c2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    31c6:	dc 01       	movw	r26, r24
    31c8:	cb 01       	movw	r24, r22
    31ca:	f8 01       	movw	r30, r16
    31cc:	80 83       	st	Z, r24
    31ce:	91 83       	std	Z+1, r25	; 0x01
    31d0:	a2 83       	std	Z+2, r26	; 0x02
    31d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31d4:	fe 01       	movw	r30, r28
    31d6:	ff 96       	adiw	r30, 0x3f	; 63
    31d8:	60 81       	ld	r22, Z
    31da:	71 81       	ldd	r23, Z+1	; 0x01
    31dc:	82 81       	ldd	r24, Z+2	; 0x02
    31de:	93 81       	ldd	r25, Z+3	; 0x03
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	40 e8       	ldi	r20, 0x80	; 128
    31e6:	5f e3       	ldi	r21, 0x3F	; 63
    31e8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    31ec:	88 23       	and	r24, r24
    31ee:	2c f4       	brge	.+10     	; 0x31fa <LCD_sendCommand+0x40e>
		__ticks = 1;
    31f0:	81 e0       	ldi	r24, 0x01	; 1
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	9e af       	std	Y+62, r25	; 0x3e
    31f6:	8d af       	std	Y+61, r24	; 0x3d
    31f8:	46 c0       	rjmp	.+140    	; 0x3286 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    31fa:	fe 01       	movw	r30, r28
    31fc:	ff 96       	adiw	r30, 0x3f	; 63
    31fe:	60 81       	ld	r22, Z
    3200:	71 81       	ldd	r23, Z+1	; 0x01
    3202:	82 81       	ldd	r24, Z+2	; 0x02
    3204:	93 81       	ldd	r25, Z+3	; 0x03
    3206:	20 e0       	ldi	r18, 0x00	; 0
    3208:	3f ef       	ldi	r19, 0xFF	; 255
    320a:	4f e7       	ldi	r20, 0x7F	; 127
    320c:	57 e4       	ldi	r21, 0x47	; 71
    320e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3212:	18 16       	cp	r1, r24
    3214:	64 f5       	brge	.+88     	; 0x326e <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3216:	fe 01       	movw	r30, r28
    3218:	ed 5b       	subi	r30, 0xBD	; 189
    321a:	ff 4f       	sbci	r31, 0xFF	; 255
    321c:	60 81       	ld	r22, Z
    321e:	71 81       	ldd	r23, Z+1	; 0x01
    3220:	82 81       	ldd	r24, Z+2	; 0x02
    3222:	93 81       	ldd	r25, Z+3	; 0x03
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	40 e2       	ldi	r20, 0x20	; 32
    322a:	51 e4       	ldi	r21, 0x41	; 65
    322c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	bc 01       	movw	r22, r24
    3236:	cd 01       	movw	r24, r26
    3238:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    323c:	dc 01       	movw	r26, r24
    323e:	cb 01       	movw	r24, r22
    3240:	9e af       	std	Y+62, r25	; 0x3e
    3242:	8d af       	std	Y+61, r24	; 0x3d
    3244:	0f c0       	rjmp	.+30     	; 0x3264 <LCD_sendCommand+0x478>
    3246:	88 ec       	ldi	r24, 0xC8	; 200
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	9c af       	std	Y+60, r25	; 0x3c
    324c:	8b af       	std	Y+59, r24	; 0x3b
    324e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3250:	9c ad       	ldd	r25, Y+60	; 0x3c
    3252:	01 97       	sbiw	r24, 0x01	; 1
    3254:	f1 f7       	brne	.-4      	; 0x3252 <LCD_sendCommand+0x466>
    3256:	9c af       	std	Y+60, r25	; 0x3c
    3258:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    325a:	8d ad       	ldd	r24, Y+61	; 0x3d
    325c:	9e ad       	ldd	r25, Y+62	; 0x3e
    325e:	01 97       	sbiw	r24, 0x01	; 1
    3260:	9e af       	std	Y+62, r25	; 0x3e
    3262:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3264:	8d ad       	ldd	r24, Y+61	; 0x3d
    3266:	9e ad       	ldd	r25, Y+62	; 0x3e
    3268:	00 97       	sbiw	r24, 0x00	; 0
    326a:	69 f7       	brne	.-38     	; 0x3246 <LCD_sendCommand+0x45a>
    326c:	16 c0       	rjmp	.+44     	; 0x329a <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    326e:	fe 01       	movw	r30, r28
    3270:	ff 96       	adiw	r30, 0x3f	; 63
    3272:	60 81       	ld	r22, Z
    3274:	71 81       	ldd	r23, Z+1	; 0x01
    3276:	82 81       	ldd	r24, Z+2	; 0x02
    3278:	93 81       	ldd	r25, Z+3	; 0x03
    327a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    327e:	dc 01       	movw	r26, r24
    3280:	cb 01       	movw	r24, r22
    3282:	9e af       	std	Y+62, r25	; 0x3e
    3284:	8d af       	std	Y+61, r24	; 0x3d
    3286:	8d ad       	ldd	r24, Y+61	; 0x3d
    3288:	9e ad       	ldd	r25, Y+62	; 0x3e
    328a:	9a af       	std	Y+58, r25	; 0x3a
    328c:	89 af       	std	Y+57, r24	; 0x39
    328e:	89 ad       	ldd	r24, Y+57	; 0x39
    3290:	9a ad       	ldd	r25, Y+58	; 0x3a
    3292:	01 97       	sbiw	r24, 0x01	; 1
    3294:	f1 f7       	brne	.-4      	; 0x3292 <LCD_sendCommand+0x4a6>
    3296:	9a af       	std	Y+58, r25	; 0x3a
    3298:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    329a:	82 e0       	ldi	r24, 0x02	; 2
    329c:	62 e0       	ldi	r22, 0x02	; 2
    329e:	40 e0       	ldi	r20, 0x00	; 0
    32a0:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	a0 e8       	ldi	r26, 0x80	; 128
    32aa:	bf e3       	ldi	r27, 0x3F	; 63
    32ac:	8d ab       	std	Y+53, r24	; 0x35
    32ae:	9e ab       	std	Y+54, r25	; 0x36
    32b0:	af ab       	std	Y+55, r26	; 0x37
    32b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b4:	6d a9       	ldd	r22, Y+53	; 0x35
    32b6:	7e a9       	ldd	r23, Y+54	; 0x36
    32b8:	8f a9       	ldd	r24, Y+55	; 0x37
    32ba:	98 ad       	ldd	r25, Y+56	; 0x38
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	4a ef       	ldi	r20, 0xFA	; 250
    32c2:	54 e4       	ldi	r21, 0x44	; 68
    32c4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	89 ab       	std	Y+49, r24	; 0x31
    32ce:	9a ab       	std	Y+50, r25	; 0x32
    32d0:	ab ab       	std	Y+51, r26	; 0x33
    32d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    32d4:	69 a9       	ldd	r22, Y+49	; 0x31
    32d6:	7a a9       	ldd	r23, Y+50	; 0x32
    32d8:	8b a9       	ldd	r24, Y+51	; 0x33
    32da:	9c a9       	ldd	r25, Y+52	; 0x34
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	40 e8       	ldi	r20, 0x80	; 128
    32e2:	5f e3       	ldi	r21, 0x3F	; 63
    32e4:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    32e8:	88 23       	and	r24, r24
    32ea:	2c f4       	brge	.+10     	; 0x32f6 <LCD_sendCommand+0x50a>
		__ticks = 1;
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	98 ab       	std	Y+48, r25	; 0x30
    32f2:	8f a7       	std	Y+47, r24	; 0x2f
    32f4:	3f c0       	rjmp	.+126    	; 0x3374 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    32f6:	69 a9       	ldd	r22, Y+49	; 0x31
    32f8:	7a a9       	ldd	r23, Y+50	; 0x32
    32fa:	8b a9       	ldd	r24, Y+51	; 0x33
    32fc:	9c a9       	ldd	r25, Y+52	; 0x34
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	3f ef       	ldi	r19, 0xFF	; 255
    3302:	4f e7       	ldi	r20, 0x7F	; 127
    3304:	57 e4       	ldi	r21, 0x47	; 71
    3306:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    330a:	18 16       	cp	r1, r24
    330c:	4c f5       	brge	.+82     	; 0x3360 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    330e:	6d a9       	ldd	r22, Y+53	; 0x35
    3310:	7e a9       	ldd	r23, Y+54	; 0x36
    3312:	8f a9       	ldd	r24, Y+55	; 0x37
    3314:	98 ad       	ldd	r25, Y+56	; 0x38
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	40 e2       	ldi	r20, 0x20	; 32
    331c:	51 e4       	ldi	r21, 0x41	; 65
    331e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	bc 01       	movw	r22, r24
    3328:	cd 01       	movw	r24, r26
    332a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    332e:	dc 01       	movw	r26, r24
    3330:	cb 01       	movw	r24, r22
    3332:	98 ab       	std	Y+48, r25	; 0x30
    3334:	8f a7       	std	Y+47, r24	; 0x2f
    3336:	0f c0       	rjmp	.+30     	; 0x3356 <LCD_sendCommand+0x56a>
    3338:	88 ec       	ldi	r24, 0xC8	; 200
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	9e a7       	std	Y+46, r25	; 0x2e
    333e:	8d a7       	std	Y+45, r24	; 0x2d
    3340:	8d a5       	ldd	r24, Y+45	; 0x2d
    3342:	9e a5       	ldd	r25, Y+46	; 0x2e
    3344:	01 97       	sbiw	r24, 0x01	; 1
    3346:	f1 f7       	brne	.-4      	; 0x3344 <LCD_sendCommand+0x558>
    3348:	9e a7       	std	Y+46, r25	; 0x2e
    334a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    334c:	8f a5       	ldd	r24, Y+47	; 0x2f
    334e:	98 a9       	ldd	r25, Y+48	; 0x30
    3350:	01 97       	sbiw	r24, 0x01	; 1
    3352:	98 ab       	std	Y+48, r25	; 0x30
    3354:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3356:	8f a5       	ldd	r24, Y+47	; 0x2f
    3358:	98 a9       	ldd	r25, Y+48	; 0x30
    335a:	00 97       	sbiw	r24, 0x00	; 0
    335c:	69 f7       	brne	.-38     	; 0x3338 <LCD_sendCommand+0x54c>
    335e:	14 c0       	rjmp	.+40     	; 0x3388 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3360:	69 a9       	ldd	r22, Y+49	; 0x31
    3362:	7a a9       	ldd	r23, Y+50	; 0x32
    3364:	8b a9       	ldd	r24, Y+51	; 0x33
    3366:	9c a9       	ldd	r25, Y+52	; 0x34
    3368:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    336c:	dc 01       	movw	r26, r24
    336e:	cb 01       	movw	r24, r22
    3370:	98 ab       	std	Y+48, r25	; 0x30
    3372:	8f a7       	std	Y+47, r24	; 0x2f
    3374:	8f a5       	ldd	r24, Y+47	; 0x2f
    3376:	98 a9       	ldd	r25, Y+48	; 0x30
    3378:	9c a7       	std	Y+44, r25	; 0x2c
    337a:	8b a7       	std	Y+43, r24	; 0x2b
    337c:	8b a5       	ldd	r24, Y+43	; 0x2b
    337e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3380:	01 97       	sbiw	r24, 0x01	; 1
    3382:	f1 f7       	brne	.-4      	; 0x3380 <LCD_sendCommand+0x594>
    3384:	9c a7       	std	Y+44, r25	; 0x2c
    3386:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3388:	82 e0       	ldi	r24, 0x02	; 2
    338a:	62 e0       	ldi	r22, 0x02	; 2
    338c:	41 e0       	ldi	r20, 0x01	; 1
    338e:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    3392:	80 e0       	ldi	r24, 0x00	; 0
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	a0 e8       	ldi	r26, 0x80	; 128
    3398:	bf e3       	ldi	r27, 0x3F	; 63
    339a:	8f a3       	std	Y+39, r24	; 0x27
    339c:	98 a7       	std	Y+40, r25	; 0x28
    339e:	a9 a7       	std	Y+41, r26	; 0x29
    33a0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33a2:	6f a1       	ldd	r22, Y+39	; 0x27
    33a4:	78 a5       	ldd	r23, Y+40	; 0x28
    33a6:	89 a5       	ldd	r24, Y+41	; 0x29
    33a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	4a ef       	ldi	r20, 0xFA	; 250
    33b0:	54 e4       	ldi	r21, 0x44	; 68
    33b2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    33b6:	dc 01       	movw	r26, r24
    33b8:	cb 01       	movw	r24, r22
    33ba:	8b a3       	std	Y+35, r24	; 0x23
    33bc:	9c a3       	std	Y+36, r25	; 0x24
    33be:	ad a3       	std	Y+37, r26	; 0x25
    33c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    33c2:	6b a1       	ldd	r22, Y+35	; 0x23
    33c4:	7c a1       	ldd	r23, Y+36	; 0x24
    33c6:	8d a1       	ldd	r24, Y+37	; 0x25
    33c8:	9e a1       	ldd	r25, Y+38	; 0x26
    33ca:	20 e0       	ldi	r18, 0x00	; 0
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	40 e8       	ldi	r20, 0x80	; 128
    33d0:	5f e3       	ldi	r21, 0x3F	; 63
    33d2:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    33d6:	88 23       	and	r24, r24
    33d8:	2c f4       	brge	.+10     	; 0x33e4 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    33da:	81 e0       	ldi	r24, 0x01	; 1
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	9a a3       	std	Y+34, r25	; 0x22
    33e0:	89 a3       	std	Y+33, r24	; 0x21
    33e2:	3f c0       	rjmp	.+126    	; 0x3462 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    33e4:	6b a1       	ldd	r22, Y+35	; 0x23
    33e6:	7c a1       	ldd	r23, Y+36	; 0x24
    33e8:	8d a1       	ldd	r24, Y+37	; 0x25
    33ea:	9e a1       	ldd	r25, Y+38	; 0x26
    33ec:	20 e0       	ldi	r18, 0x00	; 0
    33ee:	3f ef       	ldi	r19, 0xFF	; 255
    33f0:	4f e7       	ldi	r20, 0x7F	; 127
    33f2:	57 e4       	ldi	r21, 0x47	; 71
    33f4:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    33f8:	18 16       	cp	r1, r24
    33fa:	4c f5       	brge	.+82     	; 0x344e <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33fc:	6f a1       	ldd	r22, Y+39	; 0x27
    33fe:	78 a5       	ldd	r23, Y+40	; 0x28
    3400:	89 a5       	ldd	r24, Y+41	; 0x29
    3402:	9a a5       	ldd	r25, Y+42	; 0x2a
    3404:	20 e0       	ldi	r18, 0x00	; 0
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	40 e2       	ldi	r20, 0x20	; 32
    340a:	51 e4       	ldi	r21, 0x41	; 65
    340c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	bc 01       	movw	r22, r24
    3416:	cd 01       	movw	r24, r26
    3418:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    341c:	dc 01       	movw	r26, r24
    341e:	cb 01       	movw	r24, r22
    3420:	9a a3       	std	Y+34, r25	; 0x22
    3422:	89 a3       	std	Y+33, r24	; 0x21
    3424:	0f c0       	rjmp	.+30     	; 0x3444 <LCD_sendCommand+0x658>
    3426:	88 ec       	ldi	r24, 0xC8	; 200
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	98 a3       	std	Y+32, r25	; 0x20
    342c:	8f 8f       	std	Y+31, r24	; 0x1f
    342e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3430:	98 a1       	ldd	r25, Y+32	; 0x20
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	f1 f7       	brne	.-4      	; 0x3432 <LCD_sendCommand+0x646>
    3436:	98 a3       	std	Y+32, r25	; 0x20
    3438:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    343a:	89 a1       	ldd	r24, Y+33	; 0x21
    343c:	9a a1       	ldd	r25, Y+34	; 0x22
    343e:	01 97       	sbiw	r24, 0x01	; 1
    3440:	9a a3       	std	Y+34, r25	; 0x22
    3442:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3444:	89 a1       	ldd	r24, Y+33	; 0x21
    3446:	9a a1       	ldd	r25, Y+34	; 0x22
    3448:	00 97       	sbiw	r24, 0x00	; 0
    344a:	69 f7       	brne	.-38     	; 0x3426 <LCD_sendCommand+0x63a>
    344c:	14 c0       	rjmp	.+40     	; 0x3476 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    344e:	6b a1       	ldd	r22, Y+35	; 0x23
    3450:	7c a1       	ldd	r23, Y+36	; 0x24
    3452:	8d a1       	ldd	r24, Y+37	; 0x25
    3454:	9e a1       	ldd	r25, Y+38	; 0x26
    3456:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    345a:	dc 01       	movw	r26, r24
    345c:	cb 01       	movw	r24, r22
    345e:	9a a3       	std	Y+34, r25	; 0x22
    3460:	89 a3       	std	Y+33, r24	; 0x21
    3462:	89 a1       	ldd	r24, Y+33	; 0x21
    3464:	9a a1       	ldd	r25, Y+34	; 0x22
    3466:	9e 8f       	std	Y+30, r25	; 0x1e
    3468:	8d 8f       	std	Y+29, r24	; 0x1d
    346a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    346c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    346e:	01 97       	sbiw	r24, 0x01	; 1
    3470:	f1 f7       	brne	.-4      	; 0x346e <LCD_sendCommand+0x682>
    3472:	9e 8f       	std	Y+30, r25	; 0x1e
    3474:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    3476:	fe 01       	movw	r30, r28
    3478:	ed 59       	subi	r30, 0x9D	; 157
    347a:	ff 4f       	sbci	r31, 0xFF	; 255
    347c:	80 81       	ld	r24, Z
    347e:	98 2f       	mov	r25, r24
    3480:	91 70       	andi	r25, 0x01	; 1
    3482:	82 e0       	ldi	r24, 0x02	; 2
    3484:	63 e0       	ldi	r22, 0x03	; 3
    3486:	49 2f       	mov	r20, r25
    3488:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    348c:	fe 01       	movw	r30, r28
    348e:	ed 59       	subi	r30, 0x9D	; 157
    3490:	ff 4f       	sbci	r31, 0xFF	; 255
    3492:	80 81       	ld	r24, Z
    3494:	88 2f       	mov	r24, r24
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	82 70       	andi	r24, 0x02	; 2
    349a:	90 70       	andi	r25, 0x00	; 0
    349c:	95 95       	asr	r25
    349e:	87 95       	ror	r24
    34a0:	98 2f       	mov	r25, r24
    34a2:	82 e0       	ldi	r24, 0x02	; 2
    34a4:	64 e0       	ldi	r22, 0x04	; 4
    34a6:	49 2f       	mov	r20, r25
    34a8:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    34ac:	fe 01       	movw	r30, r28
    34ae:	ed 59       	subi	r30, 0x9D	; 157
    34b0:	ff 4f       	sbci	r31, 0xFF	; 255
    34b2:	80 81       	ld	r24, Z
    34b4:	88 2f       	mov	r24, r24
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	84 70       	andi	r24, 0x04	; 4
    34ba:	90 70       	andi	r25, 0x00	; 0
    34bc:	95 95       	asr	r25
    34be:	87 95       	ror	r24
    34c0:	95 95       	asr	r25
    34c2:	87 95       	ror	r24
    34c4:	98 2f       	mov	r25, r24
    34c6:	82 e0       	ldi	r24, 0x02	; 2
    34c8:	65 e0       	ldi	r22, 0x05	; 5
    34ca:	49 2f       	mov	r20, r25
    34cc:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    34d0:	fe 01       	movw	r30, r28
    34d2:	ed 59       	subi	r30, 0x9D	; 157
    34d4:	ff 4f       	sbci	r31, 0xFF	; 255
    34d6:	80 81       	ld	r24, Z
    34d8:	88 2f       	mov	r24, r24
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	88 70       	andi	r24, 0x08	; 8
    34de:	90 70       	andi	r25, 0x00	; 0
    34e0:	95 95       	asr	r25
    34e2:	87 95       	ror	r24
    34e4:	95 95       	asr	r25
    34e6:	87 95       	ror	r24
    34e8:	95 95       	asr	r25
    34ea:	87 95       	ror	r24
    34ec:	98 2f       	mov	r25, r24
    34ee:	82 e0       	ldi	r24, 0x02	; 2
    34f0:	66 e0       	ldi	r22, 0x06	; 6
    34f2:	49 2f       	mov	r20, r25
    34f4:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    34f8:	80 e0       	ldi	r24, 0x00	; 0
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	a0 e8       	ldi	r26, 0x80	; 128
    34fe:	bf e3       	ldi	r27, 0x3F	; 63
    3500:	89 8f       	std	Y+25, r24	; 0x19
    3502:	9a 8f       	std	Y+26, r25	; 0x1a
    3504:	ab 8f       	std	Y+27, r26	; 0x1b
    3506:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3508:	69 8d       	ldd	r22, Y+25	; 0x19
    350a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    350c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    350e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3510:	20 e0       	ldi	r18, 0x00	; 0
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	4a ef       	ldi	r20, 0xFA	; 250
    3516:	54 e4       	ldi	r21, 0x44	; 68
    3518:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    351c:	dc 01       	movw	r26, r24
    351e:	cb 01       	movw	r24, r22
    3520:	8d 8b       	std	Y+21, r24	; 0x15
    3522:	9e 8b       	std	Y+22, r25	; 0x16
    3524:	af 8b       	std	Y+23, r26	; 0x17
    3526:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3528:	6d 89       	ldd	r22, Y+21	; 0x15
    352a:	7e 89       	ldd	r23, Y+22	; 0x16
    352c:	8f 89       	ldd	r24, Y+23	; 0x17
    352e:	98 8d       	ldd	r25, Y+24	; 0x18
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	40 e8       	ldi	r20, 0x80	; 128
    3536:	5f e3       	ldi	r21, 0x3F	; 63
    3538:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    353c:	88 23       	and	r24, r24
    353e:	2c f4       	brge	.+10     	; 0x354a <LCD_sendCommand+0x75e>
		__ticks = 1;
    3540:	81 e0       	ldi	r24, 0x01	; 1
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	9c 8b       	std	Y+20, r25	; 0x14
    3546:	8b 8b       	std	Y+19, r24	; 0x13
    3548:	3f c0       	rjmp	.+126    	; 0x35c8 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    354a:	6d 89       	ldd	r22, Y+21	; 0x15
    354c:	7e 89       	ldd	r23, Y+22	; 0x16
    354e:	8f 89       	ldd	r24, Y+23	; 0x17
    3550:	98 8d       	ldd	r25, Y+24	; 0x18
    3552:	20 e0       	ldi	r18, 0x00	; 0
    3554:	3f ef       	ldi	r19, 0xFF	; 255
    3556:	4f e7       	ldi	r20, 0x7F	; 127
    3558:	57 e4       	ldi	r21, 0x47	; 71
    355a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    355e:	18 16       	cp	r1, r24
    3560:	4c f5       	brge	.+82     	; 0x35b4 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3562:	69 8d       	ldd	r22, Y+25	; 0x19
    3564:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3566:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3568:	9c 8d       	ldd	r25, Y+28	; 0x1c
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	40 e2       	ldi	r20, 0x20	; 32
    3570:	51 e4       	ldi	r21, 0x41	; 65
    3572:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	bc 01       	movw	r22, r24
    357c:	cd 01       	movw	r24, r26
    357e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3582:	dc 01       	movw	r26, r24
    3584:	cb 01       	movw	r24, r22
    3586:	9c 8b       	std	Y+20, r25	; 0x14
    3588:	8b 8b       	std	Y+19, r24	; 0x13
    358a:	0f c0       	rjmp	.+30     	; 0x35aa <LCD_sendCommand+0x7be>
    358c:	88 ec       	ldi	r24, 0xC8	; 200
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	9a 8b       	std	Y+18, r25	; 0x12
    3592:	89 8b       	std	Y+17, r24	; 0x11
    3594:	89 89       	ldd	r24, Y+17	; 0x11
    3596:	9a 89       	ldd	r25, Y+18	; 0x12
    3598:	01 97       	sbiw	r24, 0x01	; 1
    359a:	f1 f7       	brne	.-4      	; 0x3598 <LCD_sendCommand+0x7ac>
    359c:	9a 8b       	std	Y+18, r25	; 0x12
    359e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35a0:	8b 89       	ldd	r24, Y+19	; 0x13
    35a2:	9c 89       	ldd	r25, Y+20	; 0x14
    35a4:	01 97       	sbiw	r24, 0x01	; 1
    35a6:	9c 8b       	std	Y+20, r25	; 0x14
    35a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35aa:	8b 89       	ldd	r24, Y+19	; 0x13
    35ac:	9c 89       	ldd	r25, Y+20	; 0x14
    35ae:	00 97       	sbiw	r24, 0x00	; 0
    35b0:	69 f7       	brne	.-38     	; 0x358c <LCD_sendCommand+0x7a0>
    35b2:	14 c0       	rjmp	.+40     	; 0x35dc <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35b4:	6d 89       	ldd	r22, Y+21	; 0x15
    35b6:	7e 89       	ldd	r23, Y+22	; 0x16
    35b8:	8f 89       	ldd	r24, Y+23	; 0x17
    35ba:	98 8d       	ldd	r25, Y+24	; 0x18
    35bc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    35c0:	dc 01       	movw	r26, r24
    35c2:	cb 01       	movw	r24, r22
    35c4:	9c 8b       	std	Y+20, r25	; 0x14
    35c6:	8b 8b       	std	Y+19, r24	; 0x13
    35c8:	8b 89       	ldd	r24, Y+19	; 0x13
    35ca:	9c 89       	ldd	r25, Y+20	; 0x14
    35cc:	98 8b       	std	Y+16, r25	; 0x10
    35ce:	8f 87       	std	Y+15, r24	; 0x0f
    35d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    35d2:	98 89       	ldd	r25, Y+16	; 0x10
    35d4:	01 97       	sbiw	r24, 0x01	; 1
    35d6:	f1 f7       	brne	.-4      	; 0x35d4 <LCD_sendCommand+0x7e8>
    35d8:	98 8b       	std	Y+16, r25	; 0x10
    35da:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    35dc:	82 e0       	ldi	r24, 0x02	; 2
    35de:	62 e0       	ldi	r22, 0x02	; 2
    35e0:	40 e0       	ldi	r20, 0x00	; 0
    35e2:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	a0 e8       	ldi	r26, 0x80	; 128
    35ec:	bf e3       	ldi	r27, 0x3F	; 63
    35ee:	8b 87       	std	Y+11, r24	; 0x0b
    35f0:	9c 87       	std	Y+12, r25	; 0x0c
    35f2:	ad 87       	std	Y+13, r26	; 0x0d
    35f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    35f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    35fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    35fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	4a ef       	ldi	r20, 0xFA	; 250
    3604:	54 e4       	ldi	r21, 0x44	; 68
    3606:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	8f 83       	std	Y+7, r24	; 0x07
    3610:	98 87       	std	Y+8, r25	; 0x08
    3612:	a9 87       	std	Y+9, r26	; 0x09
    3614:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3616:	6f 81       	ldd	r22, Y+7	; 0x07
    3618:	78 85       	ldd	r23, Y+8	; 0x08
    361a:	89 85       	ldd	r24, Y+9	; 0x09
    361c:	9a 85       	ldd	r25, Y+10	; 0x0a
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	40 e8       	ldi	r20, 0x80	; 128
    3624:	5f e3       	ldi	r21, 0x3F	; 63
    3626:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    362a:	88 23       	and	r24, r24
    362c:	2c f4       	brge	.+10     	; 0x3638 <LCD_sendCommand+0x84c>
		__ticks = 1;
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	9e 83       	std	Y+6, r25	; 0x06
    3634:	8d 83       	std	Y+5, r24	; 0x05
    3636:	3f c0       	rjmp	.+126    	; 0x36b6 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    3638:	6f 81       	ldd	r22, Y+7	; 0x07
    363a:	78 85       	ldd	r23, Y+8	; 0x08
    363c:	89 85       	ldd	r24, Y+9	; 0x09
    363e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	3f ef       	ldi	r19, 0xFF	; 255
    3644:	4f e7       	ldi	r20, 0x7F	; 127
    3646:	57 e4       	ldi	r21, 0x47	; 71
    3648:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    364c:	18 16       	cp	r1, r24
    364e:	4c f5       	brge	.+82     	; 0x36a2 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3650:	6b 85       	ldd	r22, Y+11	; 0x0b
    3652:	7c 85       	ldd	r23, Y+12	; 0x0c
    3654:	8d 85       	ldd	r24, Y+13	; 0x0d
    3656:	9e 85       	ldd	r25, Y+14	; 0x0e
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	40 e2       	ldi	r20, 0x20	; 32
    365e:	51 e4       	ldi	r21, 0x41	; 65
    3660:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3664:	dc 01       	movw	r26, r24
    3666:	cb 01       	movw	r24, r22
    3668:	bc 01       	movw	r22, r24
    366a:	cd 01       	movw	r24, r26
    366c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3670:	dc 01       	movw	r26, r24
    3672:	cb 01       	movw	r24, r22
    3674:	9e 83       	std	Y+6, r25	; 0x06
    3676:	8d 83       	std	Y+5, r24	; 0x05
    3678:	0f c0       	rjmp	.+30     	; 0x3698 <LCD_sendCommand+0x8ac>
    367a:	88 ec       	ldi	r24, 0xC8	; 200
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	9c 83       	std	Y+4, r25	; 0x04
    3680:	8b 83       	std	Y+3, r24	; 0x03
    3682:	8b 81       	ldd	r24, Y+3	; 0x03
    3684:	9c 81       	ldd	r25, Y+4	; 0x04
    3686:	01 97       	sbiw	r24, 0x01	; 1
    3688:	f1 f7       	brne	.-4      	; 0x3686 <LCD_sendCommand+0x89a>
    368a:	9c 83       	std	Y+4, r25	; 0x04
    368c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    368e:	8d 81       	ldd	r24, Y+5	; 0x05
    3690:	9e 81       	ldd	r25, Y+6	; 0x06
    3692:	01 97       	sbiw	r24, 0x01	; 1
    3694:	9e 83       	std	Y+6, r25	; 0x06
    3696:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3698:	8d 81       	ldd	r24, Y+5	; 0x05
    369a:	9e 81       	ldd	r25, Y+6	; 0x06
    369c:	00 97       	sbiw	r24, 0x00	; 0
    369e:	69 f7       	brne	.-38     	; 0x367a <LCD_sendCommand+0x88e>
    36a0:	14 c0       	rjmp	.+40     	; 0x36ca <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36a2:	6f 81       	ldd	r22, Y+7	; 0x07
    36a4:	78 85       	ldd	r23, Y+8	; 0x08
    36a6:	89 85       	ldd	r24, Y+9	; 0x09
    36a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    36aa:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    36ae:	dc 01       	movw	r26, r24
    36b0:	cb 01       	movw	r24, r22
    36b2:	9e 83       	std	Y+6, r25	; 0x06
    36b4:	8d 83       	std	Y+5, r24	; 0x05
    36b6:	8d 81       	ldd	r24, Y+5	; 0x05
    36b8:	9e 81       	ldd	r25, Y+6	; 0x06
    36ba:	9a 83       	std	Y+2, r25	; 0x02
    36bc:	89 83       	std	Y+1, r24	; 0x01
    36be:	89 81       	ldd	r24, Y+1	; 0x01
    36c0:	9a 81       	ldd	r25, Y+2	; 0x02
    36c2:	01 97       	sbiw	r24, 0x01	; 1
    36c4:	f1 f7       	brne	.-4      	; 0x36c2 <LCD_sendCommand+0x8d6>
    36c6:	9a 83       	std	Y+2, r25	; 0x02
    36c8:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    36ca:	cd 59       	subi	r28, 0x9D	; 157
    36cc:	df 4f       	sbci	r29, 0xFF	; 255
    36ce:	0f b6       	in	r0, 0x3f	; 63
    36d0:	f8 94       	cli
    36d2:	de bf       	out	0x3e, r29	; 62
    36d4:	0f be       	out	0x3f, r0	; 63
    36d6:	cd bf       	out	0x3d, r28	; 61
    36d8:	cf 91       	pop	r28
    36da:	df 91       	pop	r29
    36dc:	1f 91       	pop	r17
    36de:	0f 91       	pop	r16
    36e0:	08 95       	ret

000036e2 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    36e2:	0f 93       	push	r16
    36e4:	1f 93       	push	r17
    36e6:	df 93       	push	r29
    36e8:	cf 93       	push	r28
    36ea:	cd b7       	in	r28, 0x3d	; 61
    36ec:	de b7       	in	r29, 0x3e	; 62
    36ee:	c3 56       	subi	r28, 0x63	; 99
    36f0:	d0 40       	sbci	r29, 0x00	; 0
    36f2:	0f b6       	in	r0, 0x3f	; 63
    36f4:	f8 94       	cli
    36f6:	de bf       	out	0x3e, r29	; 62
    36f8:	0f be       	out	0x3f, r0	; 63
    36fa:	cd bf       	out	0x3d, r28	; 61
    36fc:	fe 01       	movw	r30, r28
    36fe:	ed 59       	subi	r30, 0x9D	; 157
    3700:	ff 4f       	sbci	r31, 0xFF	; 255
    3702:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    3704:	82 e0       	ldi	r24, 0x02	; 2
    3706:	60 e0       	ldi	r22, 0x00	; 0
    3708:	41 e0       	ldi	r20, 0x01	; 1
    370a:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    370e:	fe 01       	movw	r30, r28
    3710:	e1 5a       	subi	r30, 0xA1	; 161
    3712:	ff 4f       	sbci	r31, 0xFF	; 255
    3714:	80 e0       	ldi	r24, 0x00	; 0
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	a0 e8       	ldi	r26, 0x80	; 128
    371a:	bf e3       	ldi	r27, 0x3F	; 63
    371c:	80 83       	st	Z, r24
    371e:	91 83       	std	Z+1, r25	; 0x01
    3720:	a2 83       	std	Z+2, r26	; 0x02
    3722:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3724:	8e 01       	movw	r16, r28
    3726:	05 5a       	subi	r16, 0xA5	; 165
    3728:	1f 4f       	sbci	r17, 0xFF	; 255
    372a:	fe 01       	movw	r30, r28
    372c:	e1 5a       	subi	r30, 0xA1	; 161
    372e:	ff 4f       	sbci	r31, 0xFF	; 255
    3730:	60 81       	ld	r22, Z
    3732:	71 81       	ldd	r23, Z+1	; 0x01
    3734:	82 81       	ldd	r24, Z+2	; 0x02
    3736:	93 81       	ldd	r25, Z+3	; 0x03
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	4a ef       	ldi	r20, 0xFA	; 250
    373e:	54 e4       	ldi	r21, 0x44	; 68
    3740:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3744:	dc 01       	movw	r26, r24
    3746:	cb 01       	movw	r24, r22
    3748:	f8 01       	movw	r30, r16
    374a:	80 83       	st	Z, r24
    374c:	91 83       	std	Z+1, r25	; 0x01
    374e:	a2 83       	std	Z+2, r26	; 0x02
    3750:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3752:	fe 01       	movw	r30, r28
    3754:	e5 5a       	subi	r30, 0xA5	; 165
    3756:	ff 4f       	sbci	r31, 0xFF	; 255
    3758:	60 81       	ld	r22, Z
    375a:	71 81       	ldd	r23, Z+1	; 0x01
    375c:	82 81       	ldd	r24, Z+2	; 0x02
    375e:	93 81       	ldd	r25, Z+3	; 0x03
    3760:	20 e0       	ldi	r18, 0x00	; 0
    3762:	30 e0       	ldi	r19, 0x00	; 0
    3764:	40 e8       	ldi	r20, 0x80	; 128
    3766:	5f e3       	ldi	r21, 0x3F	; 63
    3768:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    376c:	88 23       	and	r24, r24
    376e:	44 f4       	brge	.+16     	; 0x3780 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    3770:	fe 01       	movw	r30, r28
    3772:	e7 5a       	subi	r30, 0xA7	; 167
    3774:	ff 4f       	sbci	r31, 0xFF	; 255
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	91 83       	std	Z+1, r25	; 0x01
    377c:	80 83       	st	Z, r24
    377e:	64 c0       	rjmp	.+200    	; 0x3848 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    3780:	fe 01       	movw	r30, r28
    3782:	e5 5a       	subi	r30, 0xA5	; 165
    3784:	ff 4f       	sbci	r31, 0xFF	; 255
    3786:	60 81       	ld	r22, Z
    3788:	71 81       	ldd	r23, Z+1	; 0x01
    378a:	82 81       	ldd	r24, Z+2	; 0x02
    378c:	93 81       	ldd	r25, Z+3	; 0x03
    378e:	20 e0       	ldi	r18, 0x00	; 0
    3790:	3f ef       	ldi	r19, 0xFF	; 255
    3792:	4f e7       	ldi	r20, 0x7F	; 127
    3794:	57 e4       	ldi	r21, 0x47	; 71
    3796:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    379a:	18 16       	cp	r1, r24
    379c:	0c f0       	brlt	.+2      	; 0x37a0 <LCD_displayCharacter+0xbe>
    379e:	43 c0       	rjmp	.+134    	; 0x3826 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37a0:	fe 01       	movw	r30, r28
    37a2:	e1 5a       	subi	r30, 0xA1	; 161
    37a4:	ff 4f       	sbci	r31, 0xFF	; 255
    37a6:	60 81       	ld	r22, Z
    37a8:	71 81       	ldd	r23, Z+1	; 0x01
    37aa:	82 81       	ldd	r24, Z+2	; 0x02
    37ac:	93 81       	ldd	r25, Z+3	; 0x03
    37ae:	20 e0       	ldi	r18, 0x00	; 0
    37b0:	30 e0       	ldi	r19, 0x00	; 0
    37b2:	40 e2       	ldi	r20, 0x20	; 32
    37b4:	51 e4       	ldi	r21, 0x41	; 65
    37b6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    37ba:	dc 01       	movw	r26, r24
    37bc:	cb 01       	movw	r24, r22
    37be:	8e 01       	movw	r16, r28
    37c0:	07 5a       	subi	r16, 0xA7	; 167
    37c2:	1f 4f       	sbci	r17, 0xFF	; 255
    37c4:	bc 01       	movw	r22, r24
    37c6:	cd 01       	movw	r24, r26
    37c8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    37cc:	dc 01       	movw	r26, r24
    37ce:	cb 01       	movw	r24, r22
    37d0:	f8 01       	movw	r30, r16
    37d2:	91 83       	std	Z+1, r25	; 0x01
    37d4:	80 83       	st	Z, r24
    37d6:	1f c0       	rjmp	.+62     	; 0x3816 <LCD_displayCharacter+0x134>
    37d8:	fe 01       	movw	r30, r28
    37da:	e9 5a       	subi	r30, 0xA9	; 169
    37dc:	ff 4f       	sbci	r31, 0xFF	; 255
    37de:	88 ec       	ldi	r24, 0xC8	; 200
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	91 83       	std	Z+1, r25	; 0x01
    37e4:	80 83       	st	Z, r24
    37e6:	fe 01       	movw	r30, r28
    37e8:	e9 5a       	subi	r30, 0xA9	; 169
    37ea:	ff 4f       	sbci	r31, 0xFF	; 255
    37ec:	80 81       	ld	r24, Z
    37ee:	91 81       	ldd	r25, Z+1	; 0x01
    37f0:	01 97       	sbiw	r24, 0x01	; 1
    37f2:	f1 f7       	brne	.-4      	; 0x37f0 <LCD_displayCharacter+0x10e>
    37f4:	fe 01       	movw	r30, r28
    37f6:	e9 5a       	subi	r30, 0xA9	; 169
    37f8:	ff 4f       	sbci	r31, 0xFF	; 255
    37fa:	91 83       	std	Z+1, r25	; 0x01
    37fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37fe:	de 01       	movw	r26, r28
    3800:	a7 5a       	subi	r26, 0xA7	; 167
    3802:	bf 4f       	sbci	r27, 0xFF	; 255
    3804:	fe 01       	movw	r30, r28
    3806:	e7 5a       	subi	r30, 0xA7	; 167
    3808:	ff 4f       	sbci	r31, 0xFF	; 255
    380a:	80 81       	ld	r24, Z
    380c:	91 81       	ldd	r25, Z+1	; 0x01
    380e:	01 97       	sbiw	r24, 0x01	; 1
    3810:	11 96       	adiw	r26, 0x01	; 1
    3812:	9c 93       	st	X, r25
    3814:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3816:	fe 01       	movw	r30, r28
    3818:	e7 5a       	subi	r30, 0xA7	; 167
    381a:	ff 4f       	sbci	r31, 0xFF	; 255
    381c:	80 81       	ld	r24, Z
    381e:	91 81       	ldd	r25, Z+1	; 0x01
    3820:	00 97       	sbiw	r24, 0x00	; 0
    3822:	d1 f6       	brne	.-76     	; 0x37d8 <LCD_displayCharacter+0xf6>
    3824:	27 c0       	rjmp	.+78     	; 0x3874 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3826:	8e 01       	movw	r16, r28
    3828:	07 5a       	subi	r16, 0xA7	; 167
    382a:	1f 4f       	sbci	r17, 0xFF	; 255
    382c:	fe 01       	movw	r30, r28
    382e:	e5 5a       	subi	r30, 0xA5	; 165
    3830:	ff 4f       	sbci	r31, 0xFF	; 255
    3832:	60 81       	ld	r22, Z
    3834:	71 81       	ldd	r23, Z+1	; 0x01
    3836:	82 81       	ldd	r24, Z+2	; 0x02
    3838:	93 81       	ldd	r25, Z+3	; 0x03
    383a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    383e:	dc 01       	movw	r26, r24
    3840:	cb 01       	movw	r24, r22
    3842:	f8 01       	movw	r30, r16
    3844:	91 83       	std	Z+1, r25	; 0x01
    3846:	80 83       	st	Z, r24
    3848:	de 01       	movw	r26, r28
    384a:	ab 5a       	subi	r26, 0xAB	; 171
    384c:	bf 4f       	sbci	r27, 0xFF	; 255
    384e:	fe 01       	movw	r30, r28
    3850:	e7 5a       	subi	r30, 0xA7	; 167
    3852:	ff 4f       	sbci	r31, 0xFF	; 255
    3854:	80 81       	ld	r24, Z
    3856:	91 81       	ldd	r25, Z+1	; 0x01
    3858:	8d 93       	st	X+, r24
    385a:	9c 93       	st	X, r25
    385c:	fe 01       	movw	r30, r28
    385e:	eb 5a       	subi	r30, 0xAB	; 171
    3860:	ff 4f       	sbci	r31, 0xFF	; 255
    3862:	80 81       	ld	r24, Z
    3864:	91 81       	ldd	r25, Z+1	; 0x01
    3866:	01 97       	sbiw	r24, 0x01	; 1
    3868:	f1 f7       	brne	.-4      	; 0x3866 <LCD_displayCharacter+0x184>
    386a:	fe 01       	movw	r30, r28
    386c:	eb 5a       	subi	r30, 0xAB	; 171
    386e:	ff 4f       	sbci	r31, 0xFF	; 255
    3870:	91 83       	std	Z+1, r25	; 0x01
    3872:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3874:	82 e0       	ldi	r24, 0x02	; 2
    3876:	62 e0       	ldi	r22, 0x02	; 2
    3878:	41 e0       	ldi	r20, 0x01	; 1
    387a:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    387e:	fe 01       	movw	r30, r28
    3880:	ef 5a       	subi	r30, 0xAF	; 175
    3882:	ff 4f       	sbci	r31, 0xFF	; 255
    3884:	80 e0       	ldi	r24, 0x00	; 0
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	a0 e8       	ldi	r26, 0x80	; 128
    388a:	bf e3       	ldi	r27, 0x3F	; 63
    388c:	80 83       	st	Z, r24
    388e:	91 83       	std	Z+1, r25	; 0x01
    3890:	a2 83       	std	Z+2, r26	; 0x02
    3892:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3894:	8e 01       	movw	r16, r28
    3896:	03 5b       	subi	r16, 0xB3	; 179
    3898:	1f 4f       	sbci	r17, 0xFF	; 255
    389a:	fe 01       	movw	r30, r28
    389c:	ef 5a       	subi	r30, 0xAF	; 175
    389e:	ff 4f       	sbci	r31, 0xFF	; 255
    38a0:	60 81       	ld	r22, Z
    38a2:	71 81       	ldd	r23, Z+1	; 0x01
    38a4:	82 81       	ldd	r24, Z+2	; 0x02
    38a6:	93 81       	ldd	r25, Z+3	; 0x03
    38a8:	20 e0       	ldi	r18, 0x00	; 0
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	4a ef       	ldi	r20, 0xFA	; 250
    38ae:	54 e4       	ldi	r21, 0x44	; 68
    38b0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    38b4:	dc 01       	movw	r26, r24
    38b6:	cb 01       	movw	r24, r22
    38b8:	f8 01       	movw	r30, r16
    38ba:	80 83       	st	Z, r24
    38bc:	91 83       	std	Z+1, r25	; 0x01
    38be:	a2 83       	std	Z+2, r26	; 0x02
    38c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38c2:	fe 01       	movw	r30, r28
    38c4:	e3 5b       	subi	r30, 0xB3	; 179
    38c6:	ff 4f       	sbci	r31, 0xFF	; 255
    38c8:	60 81       	ld	r22, Z
    38ca:	71 81       	ldd	r23, Z+1	; 0x01
    38cc:	82 81       	ldd	r24, Z+2	; 0x02
    38ce:	93 81       	ldd	r25, Z+3	; 0x03
    38d0:	20 e0       	ldi	r18, 0x00	; 0
    38d2:	30 e0       	ldi	r19, 0x00	; 0
    38d4:	40 e8       	ldi	r20, 0x80	; 128
    38d6:	5f e3       	ldi	r21, 0x3F	; 63
    38d8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    38dc:	88 23       	and	r24, r24
    38de:	44 f4       	brge	.+16     	; 0x38f0 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    38e0:	fe 01       	movw	r30, r28
    38e2:	e5 5b       	subi	r30, 0xB5	; 181
    38e4:	ff 4f       	sbci	r31, 0xFF	; 255
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	91 83       	std	Z+1, r25	; 0x01
    38ec:	80 83       	st	Z, r24
    38ee:	64 c0       	rjmp	.+200    	; 0x39b8 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    38f0:	fe 01       	movw	r30, r28
    38f2:	e3 5b       	subi	r30, 0xB3	; 179
    38f4:	ff 4f       	sbci	r31, 0xFF	; 255
    38f6:	60 81       	ld	r22, Z
    38f8:	71 81       	ldd	r23, Z+1	; 0x01
    38fa:	82 81       	ldd	r24, Z+2	; 0x02
    38fc:	93 81       	ldd	r25, Z+3	; 0x03
    38fe:	20 e0       	ldi	r18, 0x00	; 0
    3900:	3f ef       	ldi	r19, 0xFF	; 255
    3902:	4f e7       	ldi	r20, 0x7F	; 127
    3904:	57 e4       	ldi	r21, 0x47	; 71
    3906:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    390a:	18 16       	cp	r1, r24
    390c:	0c f0       	brlt	.+2      	; 0x3910 <LCD_displayCharacter+0x22e>
    390e:	43 c0       	rjmp	.+134    	; 0x3996 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3910:	fe 01       	movw	r30, r28
    3912:	ef 5a       	subi	r30, 0xAF	; 175
    3914:	ff 4f       	sbci	r31, 0xFF	; 255
    3916:	60 81       	ld	r22, Z
    3918:	71 81       	ldd	r23, Z+1	; 0x01
    391a:	82 81       	ldd	r24, Z+2	; 0x02
    391c:	93 81       	ldd	r25, Z+3	; 0x03
    391e:	20 e0       	ldi	r18, 0x00	; 0
    3920:	30 e0       	ldi	r19, 0x00	; 0
    3922:	40 e2       	ldi	r20, 0x20	; 32
    3924:	51 e4       	ldi	r21, 0x41	; 65
    3926:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    392a:	dc 01       	movw	r26, r24
    392c:	cb 01       	movw	r24, r22
    392e:	8e 01       	movw	r16, r28
    3930:	05 5b       	subi	r16, 0xB5	; 181
    3932:	1f 4f       	sbci	r17, 0xFF	; 255
    3934:	bc 01       	movw	r22, r24
    3936:	cd 01       	movw	r24, r26
    3938:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    393c:	dc 01       	movw	r26, r24
    393e:	cb 01       	movw	r24, r22
    3940:	f8 01       	movw	r30, r16
    3942:	91 83       	std	Z+1, r25	; 0x01
    3944:	80 83       	st	Z, r24
    3946:	1f c0       	rjmp	.+62     	; 0x3986 <LCD_displayCharacter+0x2a4>
    3948:	fe 01       	movw	r30, r28
    394a:	e7 5b       	subi	r30, 0xB7	; 183
    394c:	ff 4f       	sbci	r31, 0xFF	; 255
    394e:	88 ec       	ldi	r24, 0xC8	; 200
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	91 83       	std	Z+1, r25	; 0x01
    3954:	80 83       	st	Z, r24
    3956:	fe 01       	movw	r30, r28
    3958:	e7 5b       	subi	r30, 0xB7	; 183
    395a:	ff 4f       	sbci	r31, 0xFF	; 255
    395c:	80 81       	ld	r24, Z
    395e:	91 81       	ldd	r25, Z+1	; 0x01
    3960:	01 97       	sbiw	r24, 0x01	; 1
    3962:	f1 f7       	brne	.-4      	; 0x3960 <LCD_displayCharacter+0x27e>
    3964:	fe 01       	movw	r30, r28
    3966:	e7 5b       	subi	r30, 0xB7	; 183
    3968:	ff 4f       	sbci	r31, 0xFF	; 255
    396a:	91 83       	std	Z+1, r25	; 0x01
    396c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    396e:	de 01       	movw	r26, r28
    3970:	a5 5b       	subi	r26, 0xB5	; 181
    3972:	bf 4f       	sbci	r27, 0xFF	; 255
    3974:	fe 01       	movw	r30, r28
    3976:	e5 5b       	subi	r30, 0xB5	; 181
    3978:	ff 4f       	sbci	r31, 0xFF	; 255
    397a:	80 81       	ld	r24, Z
    397c:	91 81       	ldd	r25, Z+1	; 0x01
    397e:	01 97       	sbiw	r24, 0x01	; 1
    3980:	11 96       	adiw	r26, 0x01	; 1
    3982:	9c 93       	st	X, r25
    3984:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3986:	fe 01       	movw	r30, r28
    3988:	e5 5b       	subi	r30, 0xB5	; 181
    398a:	ff 4f       	sbci	r31, 0xFF	; 255
    398c:	80 81       	ld	r24, Z
    398e:	91 81       	ldd	r25, Z+1	; 0x01
    3990:	00 97       	sbiw	r24, 0x00	; 0
    3992:	d1 f6       	brne	.-76     	; 0x3948 <LCD_displayCharacter+0x266>
    3994:	27 c0       	rjmp	.+78     	; 0x39e4 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3996:	8e 01       	movw	r16, r28
    3998:	05 5b       	subi	r16, 0xB5	; 181
    399a:	1f 4f       	sbci	r17, 0xFF	; 255
    399c:	fe 01       	movw	r30, r28
    399e:	e3 5b       	subi	r30, 0xB3	; 179
    39a0:	ff 4f       	sbci	r31, 0xFF	; 255
    39a2:	60 81       	ld	r22, Z
    39a4:	71 81       	ldd	r23, Z+1	; 0x01
    39a6:	82 81       	ldd	r24, Z+2	; 0x02
    39a8:	93 81       	ldd	r25, Z+3	; 0x03
    39aa:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    39ae:	dc 01       	movw	r26, r24
    39b0:	cb 01       	movw	r24, r22
    39b2:	f8 01       	movw	r30, r16
    39b4:	91 83       	std	Z+1, r25	; 0x01
    39b6:	80 83       	st	Z, r24
    39b8:	de 01       	movw	r26, r28
    39ba:	a9 5b       	subi	r26, 0xB9	; 185
    39bc:	bf 4f       	sbci	r27, 0xFF	; 255
    39be:	fe 01       	movw	r30, r28
    39c0:	e5 5b       	subi	r30, 0xB5	; 181
    39c2:	ff 4f       	sbci	r31, 0xFF	; 255
    39c4:	80 81       	ld	r24, Z
    39c6:	91 81       	ldd	r25, Z+1	; 0x01
    39c8:	8d 93       	st	X+, r24
    39ca:	9c 93       	st	X, r25
    39cc:	fe 01       	movw	r30, r28
    39ce:	e9 5b       	subi	r30, 0xB9	; 185
    39d0:	ff 4f       	sbci	r31, 0xFF	; 255
    39d2:	80 81       	ld	r24, Z
    39d4:	91 81       	ldd	r25, Z+1	; 0x01
    39d6:	01 97       	sbiw	r24, 0x01	; 1
    39d8:	f1 f7       	brne	.-4      	; 0x39d6 <LCD_displayCharacter+0x2f4>
    39da:	fe 01       	movw	r30, r28
    39dc:	e9 5b       	subi	r30, 0xB9	; 185
    39de:	ff 4f       	sbci	r31, 0xFF	; 255
    39e0:	91 83       	std	Z+1, r25	; 0x01
    39e2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    39e4:	fe 01       	movw	r30, r28
    39e6:	ed 59       	subi	r30, 0x9D	; 157
    39e8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ea:	80 81       	ld	r24, Z
    39ec:	88 2f       	mov	r24, r24
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	80 71       	andi	r24, 0x10	; 16
    39f2:	90 70       	andi	r25, 0x00	; 0
    39f4:	95 95       	asr	r25
    39f6:	87 95       	ror	r24
    39f8:	95 95       	asr	r25
    39fa:	87 95       	ror	r24
    39fc:	95 95       	asr	r25
    39fe:	87 95       	ror	r24
    3a00:	95 95       	asr	r25
    3a02:	87 95       	ror	r24
    3a04:	98 2f       	mov	r25, r24
    3a06:	82 e0       	ldi	r24, 0x02	; 2
    3a08:	63 e0       	ldi	r22, 0x03	; 3
    3a0a:	49 2f       	mov	r20, r25
    3a0c:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    3a10:	fe 01       	movw	r30, r28
    3a12:	ed 59       	subi	r30, 0x9D	; 157
    3a14:	ff 4f       	sbci	r31, 0xFF	; 255
    3a16:	80 81       	ld	r24, Z
    3a18:	88 2f       	mov	r24, r24
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	80 72       	andi	r24, 0x20	; 32
    3a1e:	90 70       	andi	r25, 0x00	; 0
    3a20:	95 95       	asr	r25
    3a22:	87 95       	ror	r24
    3a24:	95 95       	asr	r25
    3a26:	87 95       	ror	r24
    3a28:	95 95       	asr	r25
    3a2a:	87 95       	ror	r24
    3a2c:	95 95       	asr	r25
    3a2e:	87 95       	ror	r24
    3a30:	95 95       	asr	r25
    3a32:	87 95       	ror	r24
    3a34:	98 2f       	mov	r25, r24
    3a36:	82 e0       	ldi	r24, 0x02	; 2
    3a38:	64 e0       	ldi	r22, 0x04	; 4
    3a3a:	49 2f       	mov	r20, r25
    3a3c:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    3a40:	fe 01       	movw	r30, r28
    3a42:	ed 59       	subi	r30, 0x9D	; 157
    3a44:	ff 4f       	sbci	r31, 0xFF	; 255
    3a46:	80 81       	ld	r24, Z
    3a48:	88 2f       	mov	r24, r24
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	80 74       	andi	r24, 0x40	; 64
    3a4e:	90 70       	andi	r25, 0x00	; 0
    3a50:	08 2e       	mov	r0, r24
    3a52:	89 2f       	mov	r24, r25
    3a54:	00 0c       	add	r0, r0
    3a56:	88 1f       	adc	r24, r24
    3a58:	99 0b       	sbc	r25, r25
    3a5a:	00 0c       	add	r0, r0
    3a5c:	88 1f       	adc	r24, r24
    3a5e:	99 1f       	adc	r25, r25
    3a60:	98 2f       	mov	r25, r24
    3a62:	82 e0       	ldi	r24, 0x02	; 2
    3a64:	65 e0       	ldi	r22, 0x05	; 5
    3a66:	49 2f       	mov	r20, r25
    3a68:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    3a6c:	fe 01       	movw	r30, r28
    3a6e:	ed 59       	subi	r30, 0x9D	; 157
    3a70:	ff 4f       	sbci	r31, 0xFF	; 255
    3a72:	80 81       	ld	r24, Z
    3a74:	98 2f       	mov	r25, r24
    3a76:	99 1f       	adc	r25, r25
    3a78:	99 27       	eor	r25, r25
    3a7a:	99 1f       	adc	r25, r25
    3a7c:	82 e0       	ldi	r24, 0x02	; 2
    3a7e:	66 e0       	ldi	r22, 0x06	; 6
    3a80:	49 2f       	mov	r20, r25
    3a82:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    3a86:	fe 01       	movw	r30, r28
    3a88:	ed 5b       	subi	r30, 0xBD	; 189
    3a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8c:	80 e0       	ldi	r24, 0x00	; 0
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	a0 e8       	ldi	r26, 0x80	; 128
    3a92:	bf e3       	ldi	r27, 0x3F	; 63
    3a94:	80 83       	st	Z, r24
    3a96:	91 83       	std	Z+1, r25	; 0x01
    3a98:	a2 83       	std	Z+2, r26	; 0x02
    3a9a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a9c:	8e 01       	movw	r16, r28
    3a9e:	01 5c       	subi	r16, 0xC1	; 193
    3aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    3aa2:	fe 01       	movw	r30, r28
    3aa4:	ed 5b       	subi	r30, 0xBD	; 189
    3aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa8:	60 81       	ld	r22, Z
    3aaa:	71 81       	ldd	r23, Z+1	; 0x01
    3aac:	82 81       	ldd	r24, Z+2	; 0x02
    3aae:	93 81       	ldd	r25, Z+3	; 0x03
    3ab0:	20 e0       	ldi	r18, 0x00	; 0
    3ab2:	30 e0       	ldi	r19, 0x00	; 0
    3ab4:	4a ef       	ldi	r20, 0xFA	; 250
    3ab6:	54 e4       	ldi	r21, 0x44	; 68
    3ab8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3abc:	dc 01       	movw	r26, r24
    3abe:	cb 01       	movw	r24, r22
    3ac0:	f8 01       	movw	r30, r16
    3ac2:	80 83       	st	Z, r24
    3ac4:	91 83       	std	Z+1, r25	; 0x01
    3ac6:	a2 83       	std	Z+2, r26	; 0x02
    3ac8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3aca:	fe 01       	movw	r30, r28
    3acc:	ff 96       	adiw	r30, 0x3f	; 63
    3ace:	60 81       	ld	r22, Z
    3ad0:	71 81       	ldd	r23, Z+1	; 0x01
    3ad2:	82 81       	ldd	r24, Z+2	; 0x02
    3ad4:	93 81       	ldd	r25, Z+3	; 0x03
    3ad6:	20 e0       	ldi	r18, 0x00	; 0
    3ad8:	30 e0       	ldi	r19, 0x00	; 0
    3ada:	40 e8       	ldi	r20, 0x80	; 128
    3adc:	5f e3       	ldi	r21, 0x3F	; 63
    3ade:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3ae2:	88 23       	and	r24, r24
    3ae4:	2c f4       	brge	.+10     	; 0x3af0 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    3ae6:	81 e0       	ldi	r24, 0x01	; 1
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
    3aea:	9e af       	std	Y+62, r25	; 0x3e
    3aec:	8d af       	std	Y+61, r24	; 0x3d
    3aee:	46 c0       	rjmp	.+140    	; 0x3b7c <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    3af0:	fe 01       	movw	r30, r28
    3af2:	ff 96       	adiw	r30, 0x3f	; 63
    3af4:	60 81       	ld	r22, Z
    3af6:	71 81       	ldd	r23, Z+1	; 0x01
    3af8:	82 81       	ldd	r24, Z+2	; 0x02
    3afa:	93 81       	ldd	r25, Z+3	; 0x03
    3afc:	20 e0       	ldi	r18, 0x00	; 0
    3afe:	3f ef       	ldi	r19, 0xFF	; 255
    3b00:	4f e7       	ldi	r20, 0x7F	; 127
    3b02:	57 e4       	ldi	r21, 0x47	; 71
    3b04:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3b08:	18 16       	cp	r1, r24
    3b0a:	64 f5       	brge	.+88     	; 0x3b64 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b0c:	fe 01       	movw	r30, r28
    3b0e:	ed 5b       	subi	r30, 0xBD	; 189
    3b10:	ff 4f       	sbci	r31, 0xFF	; 255
    3b12:	60 81       	ld	r22, Z
    3b14:	71 81       	ldd	r23, Z+1	; 0x01
    3b16:	82 81       	ldd	r24, Z+2	; 0x02
    3b18:	93 81       	ldd	r25, Z+3	; 0x03
    3b1a:	20 e0       	ldi	r18, 0x00	; 0
    3b1c:	30 e0       	ldi	r19, 0x00	; 0
    3b1e:	40 e2       	ldi	r20, 0x20	; 32
    3b20:	51 e4       	ldi	r21, 0x41	; 65
    3b22:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3b26:	dc 01       	movw	r26, r24
    3b28:	cb 01       	movw	r24, r22
    3b2a:	bc 01       	movw	r22, r24
    3b2c:	cd 01       	movw	r24, r26
    3b2e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3b32:	dc 01       	movw	r26, r24
    3b34:	cb 01       	movw	r24, r22
    3b36:	9e af       	std	Y+62, r25	; 0x3e
    3b38:	8d af       	std	Y+61, r24	; 0x3d
    3b3a:	0f c0       	rjmp	.+30     	; 0x3b5a <LCD_displayCharacter+0x478>
    3b3c:	88 ec       	ldi	r24, 0xC8	; 200
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	9c af       	std	Y+60, r25	; 0x3c
    3b42:	8b af       	std	Y+59, r24	; 0x3b
    3b44:	8b ad       	ldd	r24, Y+59	; 0x3b
    3b46:	9c ad       	ldd	r25, Y+60	; 0x3c
    3b48:	01 97       	sbiw	r24, 0x01	; 1
    3b4a:	f1 f7       	brne	.-4      	; 0x3b48 <LCD_displayCharacter+0x466>
    3b4c:	9c af       	std	Y+60, r25	; 0x3c
    3b4e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b50:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b52:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b54:	01 97       	sbiw	r24, 0x01	; 1
    3b56:	9e af       	std	Y+62, r25	; 0x3e
    3b58:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b5a:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b5c:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b5e:	00 97       	sbiw	r24, 0x00	; 0
    3b60:	69 f7       	brne	.-38     	; 0x3b3c <LCD_displayCharacter+0x45a>
    3b62:	16 c0       	rjmp	.+44     	; 0x3b90 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b64:	fe 01       	movw	r30, r28
    3b66:	ff 96       	adiw	r30, 0x3f	; 63
    3b68:	60 81       	ld	r22, Z
    3b6a:	71 81       	ldd	r23, Z+1	; 0x01
    3b6c:	82 81       	ldd	r24, Z+2	; 0x02
    3b6e:	93 81       	ldd	r25, Z+3	; 0x03
    3b70:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3b74:	dc 01       	movw	r26, r24
    3b76:	cb 01       	movw	r24, r22
    3b78:	9e af       	std	Y+62, r25	; 0x3e
    3b7a:	8d af       	std	Y+61, r24	; 0x3d
    3b7c:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b7e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b80:	9a af       	std	Y+58, r25	; 0x3a
    3b82:	89 af       	std	Y+57, r24	; 0x39
    3b84:	89 ad       	ldd	r24, Y+57	; 0x39
    3b86:	9a ad       	ldd	r25, Y+58	; 0x3a
    3b88:	01 97       	sbiw	r24, 0x01	; 1
    3b8a:	f1 f7       	brne	.-4      	; 0x3b88 <LCD_displayCharacter+0x4a6>
    3b8c:	9a af       	std	Y+58, r25	; 0x3a
    3b8e:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3b90:	82 e0       	ldi	r24, 0x02	; 2
    3b92:	62 e0       	ldi	r22, 0x02	; 2
    3b94:	40 e0       	ldi	r20, 0x00	; 0
    3b96:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    3b9a:	80 e0       	ldi	r24, 0x00	; 0
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	a0 e8       	ldi	r26, 0x80	; 128
    3ba0:	bf e3       	ldi	r27, 0x3F	; 63
    3ba2:	8d ab       	std	Y+53, r24	; 0x35
    3ba4:	9e ab       	std	Y+54, r25	; 0x36
    3ba6:	af ab       	std	Y+55, r26	; 0x37
    3ba8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3baa:	6d a9       	ldd	r22, Y+53	; 0x35
    3bac:	7e a9       	ldd	r23, Y+54	; 0x36
    3bae:	8f a9       	ldd	r24, Y+55	; 0x37
    3bb0:	98 ad       	ldd	r25, Y+56	; 0x38
    3bb2:	20 e0       	ldi	r18, 0x00	; 0
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	4a ef       	ldi	r20, 0xFA	; 250
    3bb8:	54 e4       	ldi	r21, 0x44	; 68
    3bba:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3bbe:	dc 01       	movw	r26, r24
    3bc0:	cb 01       	movw	r24, r22
    3bc2:	89 ab       	std	Y+49, r24	; 0x31
    3bc4:	9a ab       	std	Y+50, r25	; 0x32
    3bc6:	ab ab       	std	Y+51, r26	; 0x33
    3bc8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3bca:	69 a9       	ldd	r22, Y+49	; 0x31
    3bcc:	7a a9       	ldd	r23, Y+50	; 0x32
    3bce:	8b a9       	ldd	r24, Y+51	; 0x33
    3bd0:	9c a9       	ldd	r25, Y+52	; 0x34
    3bd2:	20 e0       	ldi	r18, 0x00	; 0
    3bd4:	30 e0       	ldi	r19, 0x00	; 0
    3bd6:	40 e8       	ldi	r20, 0x80	; 128
    3bd8:	5f e3       	ldi	r21, 0x3F	; 63
    3bda:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3bde:	88 23       	and	r24, r24
    3be0:	2c f4       	brge	.+10     	; 0x3bec <LCD_displayCharacter+0x50a>
		__ticks = 1;
    3be2:	81 e0       	ldi	r24, 0x01	; 1
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	98 ab       	std	Y+48, r25	; 0x30
    3be8:	8f a7       	std	Y+47, r24	; 0x2f
    3bea:	3f c0       	rjmp	.+126    	; 0x3c6a <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    3bec:	69 a9       	ldd	r22, Y+49	; 0x31
    3bee:	7a a9       	ldd	r23, Y+50	; 0x32
    3bf0:	8b a9       	ldd	r24, Y+51	; 0x33
    3bf2:	9c a9       	ldd	r25, Y+52	; 0x34
    3bf4:	20 e0       	ldi	r18, 0x00	; 0
    3bf6:	3f ef       	ldi	r19, 0xFF	; 255
    3bf8:	4f e7       	ldi	r20, 0x7F	; 127
    3bfa:	57 e4       	ldi	r21, 0x47	; 71
    3bfc:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3c00:	18 16       	cp	r1, r24
    3c02:	4c f5       	brge	.+82     	; 0x3c56 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c04:	6d a9       	ldd	r22, Y+53	; 0x35
    3c06:	7e a9       	ldd	r23, Y+54	; 0x36
    3c08:	8f a9       	ldd	r24, Y+55	; 0x37
    3c0a:	98 ad       	ldd	r25, Y+56	; 0x38
    3c0c:	20 e0       	ldi	r18, 0x00	; 0
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	40 e2       	ldi	r20, 0x20	; 32
    3c12:	51 e4       	ldi	r21, 0x41	; 65
    3c14:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3c18:	dc 01       	movw	r26, r24
    3c1a:	cb 01       	movw	r24, r22
    3c1c:	bc 01       	movw	r22, r24
    3c1e:	cd 01       	movw	r24, r26
    3c20:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3c24:	dc 01       	movw	r26, r24
    3c26:	cb 01       	movw	r24, r22
    3c28:	98 ab       	std	Y+48, r25	; 0x30
    3c2a:	8f a7       	std	Y+47, r24	; 0x2f
    3c2c:	0f c0       	rjmp	.+30     	; 0x3c4c <LCD_displayCharacter+0x56a>
    3c2e:	88 ec       	ldi	r24, 0xC8	; 200
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	9e a7       	std	Y+46, r25	; 0x2e
    3c34:	8d a7       	std	Y+45, r24	; 0x2d
    3c36:	8d a5       	ldd	r24, Y+45	; 0x2d
    3c38:	9e a5       	ldd	r25, Y+46	; 0x2e
    3c3a:	01 97       	sbiw	r24, 0x01	; 1
    3c3c:	f1 f7       	brne	.-4      	; 0x3c3a <LCD_displayCharacter+0x558>
    3c3e:	9e a7       	std	Y+46, r25	; 0x2e
    3c40:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c42:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c44:	98 a9       	ldd	r25, Y+48	; 0x30
    3c46:	01 97       	sbiw	r24, 0x01	; 1
    3c48:	98 ab       	std	Y+48, r25	; 0x30
    3c4a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c4e:	98 a9       	ldd	r25, Y+48	; 0x30
    3c50:	00 97       	sbiw	r24, 0x00	; 0
    3c52:	69 f7       	brne	.-38     	; 0x3c2e <LCD_displayCharacter+0x54c>
    3c54:	14 c0       	rjmp	.+40     	; 0x3c7e <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c56:	69 a9       	ldd	r22, Y+49	; 0x31
    3c58:	7a a9       	ldd	r23, Y+50	; 0x32
    3c5a:	8b a9       	ldd	r24, Y+51	; 0x33
    3c5c:	9c a9       	ldd	r25, Y+52	; 0x34
    3c5e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3c62:	dc 01       	movw	r26, r24
    3c64:	cb 01       	movw	r24, r22
    3c66:	98 ab       	std	Y+48, r25	; 0x30
    3c68:	8f a7       	std	Y+47, r24	; 0x2f
    3c6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c6c:	98 a9       	ldd	r25, Y+48	; 0x30
    3c6e:	9c a7       	std	Y+44, r25	; 0x2c
    3c70:	8b a7       	std	Y+43, r24	; 0x2b
    3c72:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c74:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c76:	01 97       	sbiw	r24, 0x01	; 1
    3c78:	f1 f7       	brne	.-4      	; 0x3c76 <LCD_displayCharacter+0x594>
    3c7a:	9c a7       	std	Y+44, r25	; 0x2c
    3c7c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3c7e:	82 e0       	ldi	r24, 0x02	; 2
    3c80:	62 e0       	ldi	r22, 0x02	; 2
    3c82:	41 e0       	ldi	r20, 0x01	; 1
    3c84:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    3c88:	80 e0       	ldi	r24, 0x00	; 0
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	a0 e8       	ldi	r26, 0x80	; 128
    3c8e:	bf e3       	ldi	r27, 0x3F	; 63
    3c90:	8f a3       	std	Y+39, r24	; 0x27
    3c92:	98 a7       	std	Y+40, r25	; 0x28
    3c94:	a9 a7       	std	Y+41, r26	; 0x29
    3c96:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c98:	6f a1       	ldd	r22, Y+39	; 0x27
    3c9a:	78 a5       	ldd	r23, Y+40	; 0x28
    3c9c:	89 a5       	ldd	r24, Y+41	; 0x29
    3c9e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ca0:	20 e0       	ldi	r18, 0x00	; 0
    3ca2:	30 e0       	ldi	r19, 0x00	; 0
    3ca4:	4a ef       	ldi	r20, 0xFA	; 250
    3ca6:	54 e4       	ldi	r21, 0x44	; 68
    3ca8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3cac:	dc 01       	movw	r26, r24
    3cae:	cb 01       	movw	r24, r22
    3cb0:	8b a3       	std	Y+35, r24	; 0x23
    3cb2:	9c a3       	std	Y+36, r25	; 0x24
    3cb4:	ad a3       	std	Y+37, r26	; 0x25
    3cb6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3cb8:	6b a1       	ldd	r22, Y+35	; 0x23
    3cba:	7c a1       	ldd	r23, Y+36	; 0x24
    3cbc:	8d a1       	ldd	r24, Y+37	; 0x25
    3cbe:	9e a1       	ldd	r25, Y+38	; 0x26
    3cc0:	20 e0       	ldi	r18, 0x00	; 0
    3cc2:	30 e0       	ldi	r19, 0x00	; 0
    3cc4:	40 e8       	ldi	r20, 0x80	; 128
    3cc6:	5f e3       	ldi	r21, 0x3F	; 63
    3cc8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3ccc:	88 23       	and	r24, r24
    3cce:	2c f4       	brge	.+10     	; 0x3cda <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    3cd0:	81 e0       	ldi	r24, 0x01	; 1
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	9a a3       	std	Y+34, r25	; 0x22
    3cd6:	89 a3       	std	Y+33, r24	; 0x21
    3cd8:	3f c0       	rjmp	.+126    	; 0x3d58 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    3cda:	6b a1       	ldd	r22, Y+35	; 0x23
    3cdc:	7c a1       	ldd	r23, Y+36	; 0x24
    3cde:	8d a1       	ldd	r24, Y+37	; 0x25
    3ce0:	9e a1       	ldd	r25, Y+38	; 0x26
    3ce2:	20 e0       	ldi	r18, 0x00	; 0
    3ce4:	3f ef       	ldi	r19, 0xFF	; 255
    3ce6:	4f e7       	ldi	r20, 0x7F	; 127
    3ce8:	57 e4       	ldi	r21, 0x47	; 71
    3cea:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3cee:	18 16       	cp	r1, r24
    3cf0:	4c f5       	brge	.+82     	; 0x3d44 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cf2:	6f a1       	ldd	r22, Y+39	; 0x27
    3cf4:	78 a5       	ldd	r23, Y+40	; 0x28
    3cf6:	89 a5       	ldd	r24, Y+41	; 0x29
    3cf8:	9a a5       	ldd	r25, Y+42	; 0x2a
    3cfa:	20 e0       	ldi	r18, 0x00	; 0
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
    3cfe:	40 e2       	ldi	r20, 0x20	; 32
    3d00:	51 e4       	ldi	r21, 0x41	; 65
    3d02:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3d06:	dc 01       	movw	r26, r24
    3d08:	cb 01       	movw	r24, r22
    3d0a:	bc 01       	movw	r22, r24
    3d0c:	cd 01       	movw	r24, r26
    3d0e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3d12:	dc 01       	movw	r26, r24
    3d14:	cb 01       	movw	r24, r22
    3d16:	9a a3       	std	Y+34, r25	; 0x22
    3d18:	89 a3       	std	Y+33, r24	; 0x21
    3d1a:	0f c0       	rjmp	.+30     	; 0x3d3a <LCD_displayCharacter+0x658>
    3d1c:	88 ec       	ldi	r24, 0xC8	; 200
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	98 a3       	std	Y+32, r25	; 0x20
    3d22:	8f 8f       	std	Y+31, r24	; 0x1f
    3d24:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3d26:	98 a1       	ldd	r25, Y+32	; 0x20
    3d28:	01 97       	sbiw	r24, 0x01	; 1
    3d2a:	f1 f7       	brne	.-4      	; 0x3d28 <LCD_displayCharacter+0x646>
    3d2c:	98 a3       	std	Y+32, r25	; 0x20
    3d2e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d30:	89 a1       	ldd	r24, Y+33	; 0x21
    3d32:	9a a1       	ldd	r25, Y+34	; 0x22
    3d34:	01 97       	sbiw	r24, 0x01	; 1
    3d36:	9a a3       	std	Y+34, r25	; 0x22
    3d38:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d3a:	89 a1       	ldd	r24, Y+33	; 0x21
    3d3c:	9a a1       	ldd	r25, Y+34	; 0x22
    3d3e:	00 97       	sbiw	r24, 0x00	; 0
    3d40:	69 f7       	brne	.-38     	; 0x3d1c <LCD_displayCharacter+0x63a>
    3d42:	14 c0       	rjmp	.+40     	; 0x3d6c <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d44:	6b a1       	ldd	r22, Y+35	; 0x23
    3d46:	7c a1       	ldd	r23, Y+36	; 0x24
    3d48:	8d a1       	ldd	r24, Y+37	; 0x25
    3d4a:	9e a1       	ldd	r25, Y+38	; 0x26
    3d4c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3d50:	dc 01       	movw	r26, r24
    3d52:	cb 01       	movw	r24, r22
    3d54:	9a a3       	std	Y+34, r25	; 0x22
    3d56:	89 a3       	std	Y+33, r24	; 0x21
    3d58:	89 a1       	ldd	r24, Y+33	; 0x21
    3d5a:	9a a1       	ldd	r25, Y+34	; 0x22
    3d5c:	9e 8f       	std	Y+30, r25	; 0x1e
    3d5e:	8d 8f       	std	Y+29, r24	; 0x1d
    3d60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d64:	01 97       	sbiw	r24, 0x01	; 1
    3d66:	f1 f7       	brne	.-4      	; 0x3d64 <LCD_displayCharacter+0x682>
    3d68:	9e 8f       	std	Y+30, r25	; 0x1e
    3d6a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    3d6c:	fe 01       	movw	r30, r28
    3d6e:	ed 59       	subi	r30, 0x9D	; 157
    3d70:	ff 4f       	sbci	r31, 0xFF	; 255
    3d72:	80 81       	ld	r24, Z
    3d74:	98 2f       	mov	r25, r24
    3d76:	91 70       	andi	r25, 0x01	; 1
    3d78:	82 e0       	ldi	r24, 0x02	; 2
    3d7a:	63 e0       	ldi	r22, 0x03	; 3
    3d7c:	49 2f       	mov	r20, r25
    3d7e:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    3d82:	fe 01       	movw	r30, r28
    3d84:	ed 59       	subi	r30, 0x9D	; 157
    3d86:	ff 4f       	sbci	r31, 0xFF	; 255
    3d88:	80 81       	ld	r24, Z
    3d8a:	88 2f       	mov	r24, r24
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	82 70       	andi	r24, 0x02	; 2
    3d90:	90 70       	andi	r25, 0x00	; 0
    3d92:	95 95       	asr	r25
    3d94:	87 95       	ror	r24
    3d96:	98 2f       	mov	r25, r24
    3d98:	82 e0       	ldi	r24, 0x02	; 2
    3d9a:	64 e0       	ldi	r22, 0x04	; 4
    3d9c:	49 2f       	mov	r20, r25
    3d9e:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    3da2:	fe 01       	movw	r30, r28
    3da4:	ed 59       	subi	r30, 0x9D	; 157
    3da6:	ff 4f       	sbci	r31, 0xFF	; 255
    3da8:	80 81       	ld	r24, Z
    3daa:	88 2f       	mov	r24, r24
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	84 70       	andi	r24, 0x04	; 4
    3db0:	90 70       	andi	r25, 0x00	; 0
    3db2:	95 95       	asr	r25
    3db4:	87 95       	ror	r24
    3db6:	95 95       	asr	r25
    3db8:	87 95       	ror	r24
    3dba:	98 2f       	mov	r25, r24
    3dbc:	82 e0       	ldi	r24, 0x02	; 2
    3dbe:	65 e0       	ldi	r22, 0x05	; 5
    3dc0:	49 2f       	mov	r20, r25
    3dc2:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    3dc6:	fe 01       	movw	r30, r28
    3dc8:	ed 59       	subi	r30, 0x9D	; 157
    3dca:	ff 4f       	sbci	r31, 0xFF	; 255
    3dcc:	80 81       	ld	r24, Z
    3dce:	88 2f       	mov	r24, r24
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	88 70       	andi	r24, 0x08	; 8
    3dd4:	90 70       	andi	r25, 0x00	; 0
    3dd6:	95 95       	asr	r25
    3dd8:	87 95       	ror	r24
    3dda:	95 95       	asr	r25
    3ddc:	87 95       	ror	r24
    3dde:	95 95       	asr	r25
    3de0:	87 95       	ror	r24
    3de2:	98 2f       	mov	r25, r24
    3de4:	82 e0       	ldi	r24, 0x02	; 2
    3de6:	66 e0       	ldi	r22, 0x06	; 6
    3de8:	49 2f       	mov	r20, r25
    3dea:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    3dee:	80 e0       	ldi	r24, 0x00	; 0
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	a0 e8       	ldi	r26, 0x80	; 128
    3df4:	bf e3       	ldi	r27, 0x3F	; 63
    3df6:	89 8f       	std	Y+25, r24	; 0x19
    3df8:	9a 8f       	std	Y+26, r25	; 0x1a
    3dfa:	ab 8f       	std	Y+27, r26	; 0x1b
    3dfc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dfe:	69 8d       	ldd	r22, Y+25	; 0x19
    3e00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e06:	20 e0       	ldi	r18, 0x00	; 0
    3e08:	30 e0       	ldi	r19, 0x00	; 0
    3e0a:	4a ef       	ldi	r20, 0xFA	; 250
    3e0c:	54 e4       	ldi	r21, 0x44	; 68
    3e0e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3e12:	dc 01       	movw	r26, r24
    3e14:	cb 01       	movw	r24, r22
    3e16:	8d 8b       	std	Y+21, r24	; 0x15
    3e18:	9e 8b       	std	Y+22, r25	; 0x16
    3e1a:	af 8b       	std	Y+23, r26	; 0x17
    3e1c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3e1e:	6d 89       	ldd	r22, Y+21	; 0x15
    3e20:	7e 89       	ldd	r23, Y+22	; 0x16
    3e22:	8f 89       	ldd	r24, Y+23	; 0x17
    3e24:	98 8d       	ldd	r25, Y+24	; 0x18
    3e26:	20 e0       	ldi	r18, 0x00	; 0
    3e28:	30 e0       	ldi	r19, 0x00	; 0
    3e2a:	40 e8       	ldi	r20, 0x80	; 128
    3e2c:	5f e3       	ldi	r21, 0x3F	; 63
    3e2e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3e32:	88 23       	and	r24, r24
    3e34:	2c f4       	brge	.+10     	; 0x3e40 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    3e36:	81 e0       	ldi	r24, 0x01	; 1
    3e38:	90 e0       	ldi	r25, 0x00	; 0
    3e3a:	9c 8b       	std	Y+20, r25	; 0x14
    3e3c:	8b 8b       	std	Y+19, r24	; 0x13
    3e3e:	3f c0       	rjmp	.+126    	; 0x3ebe <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    3e40:	6d 89       	ldd	r22, Y+21	; 0x15
    3e42:	7e 89       	ldd	r23, Y+22	; 0x16
    3e44:	8f 89       	ldd	r24, Y+23	; 0x17
    3e46:	98 8d       	ldd	r25, Y+24	; 0x18
    3e48:	20 e0       	ldi	r18, 0x00	; 0
    3e4a:	3f ef       	ldi	r19, 0xFF	; 255
    3e4c:	4f e7       	ldi	r20, 0x7F	; 127
    3e4e:	57 e4       	ldi	r21, 0x47	; 71
    3e50:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3e54:	18 16       	cp	r1, r24
    3e56:	4c f5       	brge	.+82     	; 0x3eaa <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e58:	69 8d       	ldd	r22, Y+25	; 0x19
    3e5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e60:	20 e0       	ldi	r18, 0x00	; 0
    3e62:	30 e0       	ldi	r19, 0x00	; 0
    3e64:	40 e2       	ldi	r20, 0x20	; 32
    3e66:	51 e4       	ldi	r21, 0x41	; 65
    3e68:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3e6c:	dc 01       	movw	r26, r24
    3e6e:	cb 01       	movw	r24, r22
    3e70:	bc 01       	movw	r22, r24
    3e72:	cd 01       	movw	r24, r26
    3e74:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3e78:	dc 01       	movw	r26, r24
    3e7a:	cb 01       	movw	r24, r22
    3e7c:	9c 8b       	std	Y+20, r25	; 0x14
    3e7e:	8b 8b       	std	Y+19, r24	; 0x13
    3e80:	0f c0       	rjmp	.+30     	; 0x3ea0 <LCD_displayCharacter+0x7be>
    3e82:	88 ec       	ldi	r24, 0xC8	; 200
    3e84:	90 e0       	ldi	r25, 0x00	; 0
    3e86:	9a 8b       	std	Y+18, r25	; 0x12
    3e88:	89 8b       	std	Y+17, r24	; 0x11
    3e8a:	89 89       	ldd	r24, Y+17	; 0x11
    3e8c:	9a 89       	ldd	r25, Y+18	; 0x12
    3e8e:	01 97       	sbiw	r24, 0x01	; 1
    3e90:	f1 f7       	brne	.-4      	; 0x3e8e <LCD_displayCharacter+0x7ac>
    3e92:	9a 8b       	std	Y+18, r25	; 0x12
    3e94:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e96:	8b 89       	ldd	r24, Y+19	; 0x13
    3e98:	9c 89       	ldd	r25, Y+20	; 0x14
    3e9a:	01 97       	sbiw	r24, 0x01	; 1
    3e9c:	9c 8b       	std	Y+20, r25	; 0x14
    3e9e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ea0:	8b 89       	ldd	r24, Y+19	; 0x13
    3ea2:	9c 89       	ldd	r25, Y+20	; 0x14
    3ea4:	00 97       	sbiw	r24, 0x00	; 0
    3ea6:	69 f7       	brne	.-38     	; 0x3e82 <LCD_displayCharacter+0x7a0>
    3ea8:	14 c0       	rjmp	.+40     	; 0x3ed2 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eaa:	6d 89       	ldd	r22, Y+21	; 0x15
    3eac:	7e 89       	ldd	r23, Y+22	; 0x16
    3eae:	8f 89       	ldd	r24, Y+23	; 0x17
    3eb0:	98 8d       	ldd	r25, Y+24	; 0x18
    3eb2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3eb6:	dc 01       	movw	r26, r24
    3eb8:	cb 01       	movw	r24, r22
    3eba:	9c 8b       	std	Y+20, r25	; 0x14
    3ebc:	8b 8b       	std	Y+19, r24	; 0x13
    3ebe:	8b 89       	ldd	r24, Y+19	; 0x13
    3ec0:	9c 89       	ldd	r25, Y+20	; 0x14
    3ec2:	98 8b       	std	Y+16, r25	; 0x10
    3ec4:	8f 87       	std	Y+15, r24	; 0x0f
    3ec6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ec8:	98 89       	ldd	r25, Y+16	; 0x10
    3eca:	01 97       	sbiw	r24, 0x01	; 1
    3ecc:	f1 f7       	brne	.-4      	; 0x3eca <LCD_displayCharacter+0x7e8>
    3ece:	98 8b       	std	Y+16, r25	; 0x10
    3ed0:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3ed2:	82 e0       	ldi	r24, 0x02	; 2
    3ed4:	62 e0       	ldi	r22, 0x02	; 2
    3ed6:	40 e0       	ldi	r20, 0x00	; 0
    3ed8:	0e 94 89 0a 	call	0x1512	; 0x1512 <GPIO_writePin>
    3edc:	80 e0       	ldi	r24, 0x00	; 0
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	a0 e8       	ldi	r26, 0x80	; 128
    3ee2:	bf e3       	ldi	r27, 0x3F	; 63
    3ee4:	8b 87       	std	Y+11, r24	; 0x0b
    3ee6:	9c 87       	std	Y+12, r25	; 0x0c
    3ee8:	ad 87       	std	Y+13, r26	; 0x0d
    3eea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3eec:	6b 85       	ldd	r22, Y+11	; 0x0b
    3eee:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ef0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ef2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ef4:	20 e0       	ldi	r18, 0x00	; 0
    3ef6:	30 e0       	ldi	r19, 0x00	; 0
    3ef8:	4a ef       	ldi	r20, 0xFA	; 250
    3efa:	54 e4       	ldi	r21, 0x44	; 68
    3efc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3f00:	dc 01       	movw	r26, r24
    3f02:	cb 01       	movw	r24, r22
    3f04:	8f 83       	std	Y+7, r24	; 0x07
    3f06:	98 87       	std	Y+8, r25	; 0x08
    3f08:	a9 87       	std	Y+9, r26	; 0x09
    3f0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f0c:	6f 81       	ldd	r22, Y+7	; 0x07
    3f0e:	78 85       	ldd	r23, Y+8	; 0x08
    3f10:	89 85       	ldd	r24, Y+9	; 0x09
    3f12:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f14:	20 e0       	ldi	r18, 0x00	; 0
    3f16:	30 e0       	ldi	r19, 0x00	; 0
    3f18:	40 e8       	ldi	r20, 0x80	; 128
    3f1a:	5f e3       	ldi	r21, 0x3F	; 63
    3f1c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3f20:	88 23       	and	r24, r24
    3f22:	2c f4       	brge	.+10     	; 0x3f2e <LCD_displayCharacter+0x84c>
		__ticks = 1;
    3f24:	81 e0       	ldi	r24, 0x01	; 1
    3f26:	90 e0       	ldi	r25, 0x00	; 0
    3f28:	9e 83       	std	Y+6, r25	; 0x06
    3f2a:	8d 83       	std	Y+5, r24	; 0x05
    3f2c:	3f c0       	rjmp	.+126    	; 0x3fac <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    3f2e:	6f 81       	ldd	r22, Y+7	; 0x07
    3f30:	78 85       	ldd	r23, Y+8	; 0x08
    3f32:	89 85       	ldd	r24, Y+9	; 0x09
    3f34:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f36:	20 e0       	ldi	r18, 0x00	; 0
    3f38:	3f ef       	ldi	r19, 0xFF	; 255
    3f3a:	4f e7       	ldi	r20, 0x7F	; 127
    3f3c:	57 e4       	ldi	r21, 0x47	; 71
    3f3e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3f42:	18 16       	cp	r1, r24
    3f44:	4c f5       	brge	.+82     	; 0x3f98 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f46:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f48:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f4e:	20 e0       	ldi	r18, 0x00	; 0
    3f50:	30 e0       	ldi	r19, 0x00	; 0
    3f52:	40 e2       	ldi	r20, 0x20	; 32
    3f54:	51 e4       	ldi	r21, 0x41	; 65
    3f56:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3f5a:	dc 01       	movw	r26, r24
    3f5c:	cb 01       	movw	r24, r22
    3f5e:	bc 01       	movw	r22, r24
    3f60:	cd 01       	movw	r24, r26
    3f62:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3f66:	dc 01       	movw	r26, r24
    3f68:	cb 01       	movw	r24, r22
    3f6a:	9e 83       	std	Y+6, r25	; 0x06
    3f6c:	8d 83       	std	Y+5, r24	; 0x05
    3f6e:	0f c0       	rjmp	.+30     	; 0x3f8e <LCD_displayCharacter+0x8ac>
    3f70:	88 ec       	ldi	r24, 0xC8	; 200
    3f72:	90 e0       	ldi	r25, 0x00	; 0
    3f74:	9c 83       	std	Y+4, r25	; 0x04
    3f76:	8b 83       	std	Y+3, r24	; 0x03
    3f78:	8b 81       	ldd	r24, Y+3	; 0x03
    3f7a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f7c:	01 97       	sbiw	r24, 0x01	; 1
    3f7e:	f1 f7       	brne	.-4      	; 0x3f7c <LCD_displayCharacter+0x89a>
    3f80:	9c 83       	std	Y+4, r25	; 0x04
    3f82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f84:	8d 81       	ldd	r24, Y+5	; 0x05
    3f86:	9e 81       	ldd	r25, Y+6	; 0x06
    3f88:	01 97       	sbiw	r24, 0x01	; 1
    3f8a:	9e 83       	std	Y+6, r25	; 0x06
    3f8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f90:	9e 81       	ldd	r25, Y+6	; 0x06
    3f92:	00 97       	sbiw	r24, 0x00	; 0
    3f94:	69 f7       	brne	.-38     	; 0x3f70 <LCD_displayCharacter+0x88e>
    3f96:	14 c0       	rjmp	.+40     	; 0x3fc0 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f98:	6f 81       	ldd	r22, Y+7	; 0x07
    3f9a:	78 85       	ldd	r23, Y+8	; 0x08
    3f9c:	89 85       	ldd	r24, Y+9	; 0x09
    3f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fa0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3fa4:	dc 01       	movw	r26, r24
    3fa6:	cb 01       	movw	r24, r22
    3fa8:	9e 83       	std	Y+6, r25	; 0x06
    3faa:	8d 83       	std	Y+5, r24	; 0x05
    3fac:	8d 81       	ldd	r24, Y+5	; 0x05
    3fae:	9e 81       	ldd	r25, Y+6	; 0x06
    3fb0:	9a 83       	std	Y+2, r25	; 0x02
    3fb2:	89 83       	std	Y+1, r24	; 0x01
    3fb4:	89 81       	ldd	r24, Y+1	; 0x01
    3fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb8:	01 97       	sbiw	r24, 0x01	; 1
    3fba:	f1 f7       	brne	.-4      	; 0x3fb8 <LCD_displayCharacter+0x8d6>
    3fbc:	9a 83       	std	Y+2, r25	; 0x02
    3fbe:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3fc0:	cd 59       	subi	r28, 0x9D	; 157
    3fc2:	df 4f       	sbci	r29, 0xFF	; 255
    3fc4:	0f b6       	in	r0, 0x3f	; 63
    3fc6:	f8 94       	cli
    3fc8:	de bf       	out	0x3e, r29	; 62
    3fca:	0f be       	out	0x3f, r0	; 63
    3fcc:	cd bf       	out	0x3d, r28	; 61
    3fce:	cf 91       	pop	r28
    3fd0:	df 91       	pop	r29
    3fd2:	1f 91       	pop	r17
    3fd4:	0f 91       	pop	r16
    3fd6:	08 95       	ret

00003fd8 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3fd8:	df 93       	push	r29
    3fda:	cf 93       	push	r28
    3fdc:	00 d0       	rcall	.+0      	; 0x3fde <LCD_displayString+0x6>
    3fde:	0f 92       	push	r0
    3fe0:	cd b7       	in	r28, 0x3d	; 61
    3fe2:	de b7       	in	r29, 0x3e	; 62
    3fe4:	9b 83       	std	Y+3, r25	; 0x03
    3fe6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3fe8:	19 82       	std	Y+1, r1	; 0x01
    3fea:	0e c0       	rjmp	.+28     	; 0x4008 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3fec:	89 81       	ldd	r24, Y+1	; 0x01
    3fee:	28 2f       	mov	r18, r24
    3ff0:	30 e0       	ldi	r19, 0x00	; 0
    3ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ff6:	fc 01       	movw	r30, r24
    3ff8:	e2 0f       	add	r30, r18
    3ffa:	f3 1f       	adc	r31, r19
    3ffc:	80 81       	ld	r24, Z
    3ffe:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <LCD_displayCharacter>
		i++;
    4002:	89 81       	ldd	r24, Y+1	; 0x01
    4004:	8f 5f       	subi	r24, 0xFF	; 255
    4006:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    4008:	89 81       	ldd	r24, Y+1	; 0x01
    400a:	28 2f       	mov	r18, r24
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	8a 81       	ldd	r24, Y+2	; 0x02
    4010:	9b 81       	ldd	r25, Y+3	; 0x03
    4012:	fc 01       	movw	r30, r24
    4014:	e2 0f       	add	r30, r18
    4016:	f3 1f       	adc	r31, r19
    4018:	80 81       	ld	r24, Z
    401a:	88 23       	and	r24, r24
    401c:	39 f7       	brne	.-50     	; 0x3fec <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    401e:	0f 90       	pop	r0
    4020:	0f 90       	pop	r0
    4022:	0f 90       	pop	r0
    4024:	cf 91       	pop	r28
    4026:	df 91       	pop	r29
    4028:	08 95       	ret

0000402a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    402a:	df 93       	push	r29
    402c:	cf 93       	push	r28
    402e:	00 d0       	rcall	.+0      	; 0x4030 <LCD_moveCursor+0x6>
    4030:	00 d0       	rcall	.+0      	; 0x4032 <LCD_moveCursor+0x8>
    4032:	0f 92       	push	r0
    4034:	cd b7       	in	r28, 0x3d	; 61
    4036:	de b7       	in	r29, 0x3e	; 62
    4038:	8a 83       	std	Y+2, r24	; 0x02
    403a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    403c:	8a 81       	ldd	r24, Y+2	; 0x02
    403e:	28 2f       	mov	r18, r24
    4040:	30 e0       	ldi	r19, 0x00	; 0
    4042:	3d 83       	std	Y+5, r19	; 0x05
    4044:	2c 83       	std	Y+4, r18	; 0x04
    4046:	8c 81       	ldd	r24, Y+4	; 0x04
    4048:	9d 81       	ldd	r25, Y+5	; 0x05
    404a:	81 30       	cpi	r24, 0x01	; 1
    404c:	91 05       	cpc	r25, r1
    404e:	c1 f0       	breq	.+48     	; 0x4080 <LCD_moveCursor+0x56>
    4050:	2c 81       	ldd	r18, Y+4	; 0x04
    4052:	3d 81       	ldd	r19, Y+5	; 0x05
    4054:	22 30       	cpi	r18, 0x02	; 2
    4056:	31 05       	cpc	r19, r1
    4058:	2c f4       	brge	.+10     	; 0x4064 <LCD_moveCursor+0x3a>
    405a:	8c 81       	ldd	r24, Y+4	; 0x04
    405c:	9d 81       	ldd	r25, Y+5	; 0x05
    405e:	00 97       	sbiw	r24, 0x00	; 0
    4060:	61 f0       	breq	.+24     	; 0x407a <LCD_moveCursor+0x50>
    4062:	19 c0       	rjmp	.+50     	; 0x4096 <LCD_moveCursor+0x6c>
    4064:	2c 81       	ldd	r18, Y+4	; 0x04
    4066:	3d 81       	ldd	r19, Y+5	; 0x05
    4068:	22 30       	cpi	r18, 0x02	; 2
    406a:	31 05       	cpc	r19, r1
    406c:	69 f0       	breq	.+26     	; 0x4088 <LCD_moveCursor+0x5e>
    406e:	8c 81       	ldd	r24, Y+4	; 0x04
    4070:	9d 81       	ldd	r25, Y+5	; 0x05
    4072:	83 30       	cpi	r24, 0x03	; 3
    4074:	91 05       	cpc	r25, r1
    4076:	61 f0       	breq	.+24     	; 0x4090 <LCD_moveCursor+0x66>
    4078:	0e c0       	rjmp	.+28     	; 0x4096 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    407a:	8b 81       	ldd	r24, Y+3	; 0x03
    407c:	89 83       	std	Y+1, r24	; 0x01
    407e:	0b c0       	rjmp	.+22     	; 0x4096 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    4080:	8b 81       	ldd	r24, Y+3	; 0x03
    4082:	80 5c       	subi	r24, 0xC0	; 192
    4084:	89 83       	std	Y+1, r24	; 0x01
    4086:	07 c0       	rjmp	.+14     	; 0x4096 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    4088:	8b 81       	ldd	r24, Y+3	; 0x03
    408a:	80 5f       	subi	r24, 0xF0	; 240
    408c:	89 83       	std	Y+1, r24	; 0x01
    408e:	03 c0       	rjmp	.+6      	; 0x4096 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    4090:	8b 81       	ldd	r24, Y+3	; 0x03
    4092:	80 5b       	subi	r24, 0xB0	; 176
    4094:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    4096:	89 81       	ldd	r24, Y+1	; 0x01
    4098:	80 68       	ori	r24, 0x80	; 128
    409a:	0e 94 f6 16 	call	0x2dec	; 0x2dec <LCD_sendCommand>
}
    409e:	0f 90       	pop	r0
    40a0:	0f 90       	pop	r0
    40a2:	0f 90       	pop	r0
    40a4:	0f 90       	pop	r0
    40a6:	0f 90       	pop	r0
    40a8:	cf 91       	pop	r28
    40aa:	df 91       	pop	r29
    40ac:	08 95       	ret

000040ae <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    40ae:	df 93       	push	r29
    40b0:	cf 93       	push	r28
    40b2:	00 d0       	rcall	.+0      	; 0x40b4 <LCD_displayStringRowColumn+0x6>
    40b4:	00 d0       	rcall	.+0      	; 0x40b6 <LCD_displayStringRowColumn+0x8>
    40b6:	cd b7       	in	r28, 0x3d	; 61
    40b8:	de b7       	in	r29, 0x3e	; 62
    40ba:	89 83       	std	Y+1, r24	; 0x01
    40bc:	6a 83       	std	Y+2, r22	; 0x02
    40be:	5c 83       	std	Y+4, r21	; 0x04
    40c0:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    40c2:	89 81       	ldd	r24, Y+1	; 0x01
    40c4:	6a 81       	ldd	r22, Y+2	; 0x02
    40c6:	0e 94 15 20 	call	0x402a	; 0x402a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    40ca:	8b 81       	ldd	r24, Y+3	; 0x03
    40cc:	9c 81       	ldd	r25, Y+4	; 0x04
    40ce:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCD_displayString>
}
    40d2:	0f 90       	pop	r0
    40d4:	0f 90       	pop	r0
    40d6:	0f 90       	pop	r0
    40d8:	0f 90       	pop	r0
    40da:	cf 91       	pop	r28
    40dc:	df 91       	pop	r29
    40de:	08 95       	ret

000040e0 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    40e0:	df 93       	push	r29
    40e2:	cf 93       	push	r28
    40e4:	cd b7       	in	r28, 0x3d	; 61
    40e6:	de b7       	in	r29, 0x3e	; 62
    40e8:	62 97       	sbiw	r28, 0x12	; 18
    40ea:	0f b6       	in	r0, 0x3f	; 63
    40ec:	f8 94       	cli
    40ee:	de bf       	out	0x3e, r29	; 62
    40f0:	0f be       	out	0x3f, r0	; 63
    40f2:	cd bf       	out	0x3d, r28	; 61
    40f4:	9a 8b       	std	Y+18, r25	; 0x12
    40f6:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    40f8:	89 89       	ldd	r24, Y+17	; 0x11
    40fa:	9a 89       	ldd	r25, Y+18	; 0x12
    40fc:	9e 01       	movw	r18, r28
    40fe:	2f 5f       	subi	r18, 0xFF	; 255
    4100:	3f 4f       	sbci	r19, 0xFF	; 255
    4102:	b9 01       	movw	r22, r18
    4104:	4a e0       	ldi	r20, 0x0A	; 10
    4106:	50 e0       	ldi	r21, 0x00	; 0
    4108:	0e 94 b4 21 	call	0x4368	; 0x4368 <itoa>
   LCD_displayString(buff); /* Display the string */
    410c:	ce 01       	movw	r24, r28
    410e:	01 96       	adiw	r24, 0x01	; 1
    4110:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCD_displayString>
}
    4114:	62 96       	adiw	r28, 0x12	; 18
    4116:	0f b6       	in	r0, 0x3f	; 63
    4118:	f8 94       	cli
    411a:	de bf       	out	0x3e, r29	; 62
    411c:	0f be       	out	0x3f, r0	; 63
    411e:	cd bf       	out	0x3d, r28	; 61
    4120:	cf 91       	pop	r28
    4122:	df 91       	pop	r29
    4124:	08 95       	ret

00004126 <LCD_floatToString>:
/*
 * Description :
 * Display the required float value on the screen
 */
void LCD_floatToString(float32 data)
{
    4126:	0f 93       	push	r16
    4128:	1f 93       	push	r17
    412a:	df 93       	push	r29
    412c:	cf 93       	push	r28
    412e:	cd b7       	in	r28, 0x3d	; 61
    4130:	de b7       	in	r29, 0x3e	; 62
    4132:	64 97       	sbiw	r28, 0x14	; 20
    4134:	0f b6       	in	r0, 0x3f	; 63
    4136:	f8 94       	cli
    4138:	de bf       	out	0x3e, r29	; 62
    413a:	0f be       	out	0x3f, r0	; 63
    413c:	cd bf       	out	0x3d, r28	; 61
    413e:	69 8b       	std	Y+17, r22	; 0x11
    4140:	7a 8b       	std	Y+18, r23	; 0x12
    4142:	8b 8b       	std	Y+19, r24	; 0x13
    4144:	9c 8b       	std	Y+20, r25	; 0x14
   sint8 buff[16]; /* String to hold the ascii result */
   dtostrf(data,5,3,buff);
    4146:	89 89       	ldd	r24, Y+17	; 0x11
    4148:	9a 89       	ldd	r25, Y+18	; 0x12
    414a:	ab 89       	ldd	r26, Y+19	; 0x13
    414c:	bc 89       	ldd	r27, Y+20	; 0x14
    414e:	bc 01       	movw	r22, r24
    4150:	cd 01       	movw	r24, r26
    4152:	45 e0       	ldi	r20, 0x05	; 5
    4154:	50 e0       	ldi	r21, 0x00	; 0
    4156:	23 e0       	ldi	r18, 0x03	; 3
    4158:	30 e0       	ldi	r19, 0x00	; 0
    415a:	fe 01       	movw	r30, r28
    415c:	31 96       	adiw	r30, 0x01	; 1
    415e:	8f 01       	movw	r16, r30
    4160:	0e 94 32 21 	call	0x4264	; 0x4264 <dtostrf>
   LCD_displayString(buff); /* Display the string */
    4164:	ce 01       	movw	r24, r28
    4166:	01 96       	adiw	r24, 0x01	; 1
    4168:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCD_displayString>
}
    416c:	64 96       	adiw	r28, 0x14	; 20
    416e:	0f b6       	in	r0, 0x3f	; 63
    4170:	f8 94       	cli
    4172:	de bf       	out	0x3e, r29	; 62
    4174:	0f be       	out	0x3f, r0	; 63
    4176:	cd bf       	out	0x3d, r28	; 61
    4178:	cf 91       	pop	r28
    417a:	df 91       	pop	r29
    417c:	1f 91       	pop	r17
    417e:	0f 91       	pop	r16
    4180:	08 95       	ret

00004182 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    4182:	df 93       	push	r29
    4184:	cf 93       	push	r28
    4186:	cd b7       	in	r28, 0x3d	; 61
    4188:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    418a:	81 e0       	ldi	r24, 0x01	; 1
    418c:	0e 94 f6 16 	call	0x2dec	; 0x2dec <LCD_sendCommand>
}
    4190:	cf 91       	pop	r28
    4192:	df 91       	pop	r29
    4194:	08 95       	ret

00004196 <main>:
 ============================================================================
 */

#include "../HAL/calc.h"
int main(void)
{
    4196:	df 93       	push	r29
    4198:	cf 93       	push	r28
    419a:	cd b7       	in	r28, 0x3d	; 61
    419c:	de b7       	in	r29, 0x3e	; 62


	start(); //Start interface
    419e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <start>

	while(1)
	{
		Do_Caclulations();//Start program (Calculations)
    41a2:	0e 94 27 14 	call	0x284e	; 0x284e <Do_Caclulations>
    41a6:	fd cf       	rjmp	.-6      	; 0x41a2 <main+0xc>

000041a8 <__divmodhi4>:
    41a8:	97 fb       	bst	r25, 7
    41aa:	09 2e       	mov	r0, r25
    41ac:	07 26       	eor	r0, r23
    41ae:	0a d0       	rcall	.+20     	; 0x41c4 <__divmodhi4_neg1>
    41b0:	77 fd       	sbrc	r23, 7
    41b2:	04 d0       	rcall	.+8      	; 0x41bc <__divmodhi4_neg2>
    41b4:	0c d0       	rcall	.+24     	; 0x41ce <__udivmodhi4>
    41b6:	06 d0       	rcall	.+12     	; 0x41c4 <__divmodhi4_neg1>
    41b8:	00 20       	and	r0, r0
    41ba:	1a f4       	brpl	.+6      	; 0x41c2 <__divmodhi4_exit>

000041bc <__divmodhi4_neg2>:
    41bc:	70 95       	com	r23
    41be:	61 95       	neg	r22
    41c0:	7f 4f       	sbci	r23, 0xFF	; 255

000041c2 <__divmodhi4_exit>:
    41c2:	08 95       	ret

000041c4 <__divmodhi4_neg1>:
    41c4:	f6 f7       	brtc	.-4      	; 0x41c2 <__divmodhi4_exit>
    41c6:	90 95       	com	r25
    41c8:	81 95       	neg	r24
    41ca:	9f 4f       	sbci	r25, 0xFF	; 255
    41cc:	08 95       	ret

000041ce <__udivmodhi4>:
    41ce:	aa 1b       	sub	r26, r26
    41d0:	bb 1b       	sub	r27, r27
    41d2:	51 e1       	ldi	r21, 0x11	; 17
    41d4:	07 c0       	rjmp	.+14     	; 0x41e4 <__udivmodhi4_ep>

000041d6 <__udivmodhi4_loop>:
    41d6:	aa 1f       	adc	r26, r26
    41d8:	bb 1f       	adc	r27, r27
    41da:	a6 17       	cp	r26, r22
    41dc:	b7 07       	cpc	r27, r23
    41de:	10 f0       	brcs	.+4      	; 0x41e4 <__udivmodhi4_ep>
    41e0:	a6 1b       	sub	r26, r22
    41e2:	b7 0b       	sbc	r27, r23

000041e4 <__udivmodhi4_ep>:
    41e4:	88 1f       	adc	r24, r24
    41e6:	99 1f       	adc	r25, r25
    41e8:	5a 95       	dec	r21
    41ea:	a9 f7       	brne	.-22     	; 0x41d6 <__udivmodhi4_loop>
    41ec:	80 95       	com	r24
    41ee:	90 95       	com	r25
    41f0:	bc 01       	movw	r22, r24
    41f2:	cd 01       	movw	r24, r26
    41f4:	08 95       	ret

000041f6 <__prologue_saves__>:
    41f6:	2f 92       	push	r2
    41f8:	3f 92       	push	r3
    41fa:	4f 92       	push	r4
    41fc:	5f 92       	push	r5
    41fe:	6f 92       	push	r6
    4200:	7f 92       	push	r7
    4202:	8f 92       	push	r8
    4204:	9f 92       	push	r9
    4206:	af 92       	push	r10
    4208:	bf 92       	push	r11
    420a:	cf 92       	push	r12
    420c:	df 92       	push	r13
    420e:	ef 92       	push	r14
    4210:	ff 92       	push	r15
    4212:	0f 93       	push	r16
    4214:	1f 93       	push	r17
    4216:	cf 93       	push	r28
    4218:	df 93       	push	r29
    421a:	cd b7       	in	r28, 0x3d	; 61
    421c:	de b7       	in	r29, 0x3e	; 62
    421e:	ca 1b       	sub	r28, r26
    4220:	db 0b       	sbc	r29, r27
    4222:	0f b6       	in	r0, 0x3f	; 63
    4224:	f8 94       	cli
    4226:	de bf       	out	0x3e, r29	; 62
    4228:	0f be       	out	0x3f, r0	; 63
    422a:	cd bf       	out	0x3d, r28	; 61
    422c:	09 94       	ijmp

0000422e <__epilogue_restores__>:
    422e:	2a 88       	ldd	r2, Y+18	; 0x12
    4230:	39 88       	ldd	r3, Y+17	; 0x11
    4232:	48 88       	ldd	r4, Y+16	; 0x10
    4234:	5f 84       	ldd	r5, Y+15	; 0x0f
    4236:	6e 84       	ldd	r6, Y+14	; 0x0e
    4238:	7d 84       	ldd	r7, Y+13	; 0x0d
    423a:	8c 84       	ldd	r8, Y+12	; 0x0c
    423c:	9b 84       	ldd	r9, Y+11	; 0x0b
    423e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4240:	b9 84       	ldd	r11, Y+9	; 0x09
    4242:	c8 84       	ldd	r12, Y+8	; 0x08
    4244:	df 80       	ldd	r13, Y+7	; 0x07
    4246:	ee 80       	ldd	r14, Y+6	; 0x06
    4248:	fd 80       	ldd	r15, Y+5	; 0x05
    424a:	0c 81       	ldd	r16, Y+4	; 0x04
    424c:	1b 81       	ldd	r17, Y+3	; 0x03
    424e:	aa 81       	ldd	r26, Y+2	; 0x02
    4250:	b9 81       	ldd	r27, Y+1	; 0x01
    4252:	ce 0f       	add	r28, r30
    4254:	d1 1d       	adc	r29, r1
    4256:	0f b6       	in	r0, 0x3f	; 63
    4258:	f8 94       	cli
    425a:	de bf       	out	0x3e, r29	; 62
    425c:	0f be       	out	0x3f, r0	; 63
    425e:	cd bf       	out	0x3d, r28	; 61
    4260:	ed 01       	movw	r28, r26
    4262:	08 95       	ret

00004264 <dtostrf>:
    4264:	ef 92       	push	r14
    4266:	ff 92       	push	r15
    4268:	0f 93       	push	r16
    426a:	1f 93       	push	r17
    426c:	f2 2f       	mov	r31, r18
    426e:	f0 2e       	mov	r15, r16
    4270:	47 fd       	sbrc	r20, 7
    4272:	02 c0       	rjmp	.+4      	; 0x4278 <dtostrf+0x14>
    4274:	e4 e0       	ldi	r30, 0x04	; 4
    4276:	01 c0       	rjmp	.+2      	; 0x427a <dtostrf+0x16>
    4278:	e4 e1       	ldi	r30, 0x14	; 20
    427a:	24 2f       	mov	r18, r20
    427c:	33 27       	eor	r19, r19
    427e:	27 fd       	sbrc	r18, 7
    4280:	30 95       	com	r19
    4282:	37 ff       	sbrs	r19, 7
    4284:	03 c0       	rjmp	.+6      	; 0x428c <dtostrf+0x28>
    4286:	30 95       	com	r19
    4288:	21 95       	neg	r18
    428a:	3f 4f       	sbci	r19, 0xFF	; 255
    428c:	4f 2d       	mov	r20, r15
    428e:	51 2f       	mov	r21, r17
    4290:	0f 2f       	mov	r16, r31
    4292:	ee 2e       	mov	r14, r30
    4294:	0e 94 d5 21 	call	0x43aa	; 0x43aa <dtoa_prf>
    4298:	8f 2d       	mov	r24, r15
    429a:	91 2f       	mov	r25, r17
    429c:	1f 91       	pop	r17
    429e:	0f 91       	pop	r16
    42a0:	ff 90       	pop	r15
    42a2:	ef 90       	pop	r14
    42a4:	08 95       	ret

000042a6 <do_rand>:
    42a6:	a0 e0       	ldi	r26, 0x00	; 0
    42a8:	b0 e0       	ldi	r27, 0x00	; 0
    42aa:	e9 e5       	ldi	r30, 0x59	; 89
    42ac:	f1 e2       	ldi	r31, 0x21	; 33
    42ae:	0c 94 03 21 	jmp	0x4206	; 0x4206 <__prologue_saves__+0x10>
    42b2:	ec 01       	movw	r28, r24
    42b4:	a8 80       	ld	r10, Y
    42b6:	b9 80       	ldd	r11, Y+1	; 0x01
    42b8:	ca 80       	ldd	r12, Y+2	; 0x02
    42ba:	db 80       	ldd	r13, Y+3	; 0x03
    42bc:	a1 14       	cp	r10, r1
    42be:	b1 04       	cpc	r11, r1
    42c0:	c1 04       	cpc	r12, r1
    42c2:	d1 04       	cpc	r13, r1
    42c4:	41 f4       	brne	.+16     	; 0x42d6 <do_rand+0x30>
    42c6:	84 e2       	ldi	r24, 0x24	; 36
    42c8:	a8 2e       	mov	r10, r24
    42ca:	89 ed       	ldi	r24, 0xD9	; 217
    42cc:	b8 2e       	mov	r11, r24
    42ce:	8b e5       	ldi	r24, 0x5B	; 91
    42d0:	c8 2e       	mov	r12, r24
    42d2:	87 e0       	ldi	r24, 0x07	; 7
    42d4:	d8 2e       	mov	r13, r24
    42d6:	c6 01       	movw	r24, r12
    42d8:	b5 01       	movw	r22, r10
    42da:	2d e1       	ldi	r18, 0x1D	; 29
    42dc:	33 ef       	ldi	r19, 0xF3	; 243
    42de:	41 e0       	ldi	r20, 0x01	; 1
    42e0:	50 e0       	ldi	r21, 0x00	; 0
    42e2:	0e 94 3e 24 	call	0x487c	; 0x487c <__divmodsi4>
    42e6:	27 ea       	ldi	r18, 0xA7	; 167
    42e8:	31 e4       	ldi	r19, 0x41	; 65
    42ea:	40 e0       	ldi	r20, 0x00	; 0
    42ec:	50 e0       	ldi	r21, 0x00	; 0
    42ee:	0e 94 1f 24 	call	0x483e	; 0x483e <__mulsi3>
    42f2:	7b 01       	movw	r14, r22
    42f4:	8c 01       	movw	r16, r24
    42f6:	c6 01       	movw	r24, r12
    42f8:	b5 01       	movw	r22, r10
    42fa:	2d e1       	ldi	r18, 0x1D	; 29
    42fc:	33 ef       	ldi	r19, 0xF3	; 243
    42fe:	41 e0       	ldi	r20, 0x01	; 1
    4300:	50 e0       	ldi	r21, 0x00	; 0
    4302:	0e 94 3e 24 	call	0x487c	; 0x487c <__divmodsi4>
    4306:	ca 01       	movw	r24, r20
    4308:	b9 01       	movw	r22, r18
    430a:	2c ee       	ldi	r18, 0xEC	; 236
    430c:	34 ef       	ldi	r19, 0xF4	; 244
    430e:	4f ef       	ldi	r20, 0xFF	; 255
    4310:	5f ef       	ldi	r21, 0xFF	; 255
    4312:	0e 94 1f 24 	call	0x483e	; 0x483e <__mulsi3>
    4316:	6e 0d       	add	r22, r14
    4318:	7f 1d       	adc	r23, r15
    431a:	80 1f       	adc	r24, r16
    431c:	91 1f       	adc	r25, r17
    431e:	97 ff       	sbrs	r25, 7
    4320:	04 c0       	rjmp	.+8      	; 0x432a <do_rand+0x84>
    4322:	61 50       	subi	r22, 0x01	; 1
    4324:	70 40       	sbci	r23, 0x00	; 0
    4326:	80 40       	sbci	r24, 0x00	; 0
    4328:	90 48       	sbci	r25, 0x80	; 128
    432a:	68 83       	st	Y, r22
    432c:	79 83       	std	Y+1, r23	; 0x01
    432e:	8a 83       	std	Y+2, r24	; 0x02
    4330:	9b 83       	std	Y+3, r25	; 0x03
    4332:	9b 01       	movw	r18, r22
    4334:	3f 77       	andi	r19, 0x7F	; 127
    4336:	c9 01       	movw	r24, r18
    4338:	cd b7       	in	r28, 0x3d	; 61
    433a:	de b7       	in	r29, 0x3e	; 62
    433c:	ea e0       	ldi	r30, 0x0A	; 10
    433e:	0c 94 1f 21 	jmp	0x423e	; 0x423e <__epilogue_restores__+0x10>

00004342 <rand_r>:
    4342:	0e 94 53 21 	call	0x42a6	; 0x42a6 <do_rand>
    4346:	08 95       	ret

00004348 <rand>:
    4348:	82 e7       	ldi	r24, 0x72	; 114
    434a:	91 e0       	ldi	r25, 0x01	; 1
    434c:	0e 94 53 21 	call	0x42a6	; 0x42a6 <do_rand>
    4350:	08 95       	ret

00004352 <srand>:
    4352:	a0 e0       	ldi	r26, 0x00	; 0
    4354:	b0 e0       	ldi	r27, 0x00	; 0
    4356:	80 93 72 01 	sts	0x0172, r24
    435a:	90 93 73 01 	sts	0x0173, r25
    435e:	a0 93 74 01 	sts	0x0174, r26
    4362:	b0 93 75 01 	sts	0x0175, r27
    4366:	08 95       	ret

00004368 <itoa>:
    4368:	fb 01       	movw	r30, r22
    436a:	9f 01       	movw	r18, r30
    436c:	e8 94       	clt
    436e:	42 30       	cpi	r20, 0x02	; 2
    4370:	c4 f0       	brlt	.+48     	; 0x43a2 <itoa+0x3a>
    4372:	45 32       	cpi	r20, 0x25	; 37
    4374:	b4 f4       	brge	.+44     	; 0x43a2 <itoa+0x3a>
    4376:	4a 30       	cpi	r20, 0x0A	; 10
    4378:	29 f4       	brne	.+10     	; 0x4384 <itoa+0x1c>
    437a:	97 fb       	bst	r25, 7
    437c:	1e f4       	brtc	.+6      	; 0x4384 <itoa+0x1c>
    437e:	90 95       	com	r25
    4380:	81 95       	neg	r24
    4382:	9f 4f       	sbci	r25, 0xFF	; 255
    4384:	64 2f       	mov	r22, r20
    4386:	77 27       	eor	r23, r23
    4388:	0e 94 e7 20 	call	0x41ce	; 0x41ce <__udivmodhi4>
    438c:	80 5d       	subi	r24, 0xD0	; 208
    438e:	8a 33       	cpi	r24, 0x3A	; 58
    4390:	0c f0       	brlt	.+2      	; 0x4394 <itoa+0x2c>
    4392:	89 5d       	subi	r24, 0xD9	; 217
    4394:	81 93       	st	Z+, r24
    4396:	cb 01       	movw	r24, r22
    4398:	00 97       	sbiw	r24, 0x00	; 0
    439a:	a1 f7       	brne	.-24     	; 0x4384 <itoa+0x1c>
    439c:	16 f4       	brtc	.+4      	; 0x43a2 <itoa+0x3a>
    439e:	5d e2       	ldi	r21, 0x2D	; 45
    43a0:	51 93       	st	Z+, r21
    43a2:	10 82       	st	Z, r1
    43a4:	c9 01       	movw	r24, r18
    43a6:	0c 94 0f 24 	jmp	0x481e	; 0x481e <strrev>

000043aa <dtoa_prf>:
    43aa:	a9 e0       	ldi	r26, 0x09	; 9
    43ac:	b0 e0       	ldi	r27, 0x00	; 0
    43ae:	eb ed       	ldi	r30, 0xDB	; 219
    43b0:	f1 e2       	ldi	r31, 0x21	; 33
    43b2:	0c 94 ff 20 	jmp	0x41fe	; 0x41fe <__prologue_saves__+0x8>
    43b6:	6a 01       	movw	r12, r20
    43b8:	12 2f       	mov	r17, r18
    43ba:	a0 2e       	mov	r10, r16
    43bc:	be 2c       	mov	r11, r14
    43be:	2b e3       	ldi	r18, 0x3B	; 59
    43c0:	20 17       	cp	r18, r16
    43c2:	18 f4       	brcc	.+6      	; 0x43ca <dtoa_prf+0x20>
    43c4:	2c e3       	ldi	r18, 0x3C	; 60
    43c6:	92 2e       	mov	r9, r18
    43c8:	02 c0       	rjmp	.+4      	; 0x43ce <dtoa_prf+0x24>
    43ca:	90 2e       	mov	r9, r16
    43cc:	93 94       	inc	r9
    43ce:	ae 01       	movw	r20, r28
    43d0:	4f 5f       	subi	r20, 0xFF	; 255
    43d2:	5f 4f       	sbci	r21, 0xFF	; 255
    43d4:	27 e0       	ldi	r18, 0x07	; 7
    43d6:	09 2d       	mov	r16, r9
    43d8:	0e 94 37 23 	call	0x466e	; 0x466e <__ftoa_engine>
    43dc:	bc 01       	movw	r22, r24
    43de:	89 81       	ldd	r24, Y+1	; 0x01
    43e0:	e8 2e       	mov	r14, r24
    43e2:	ff 24       	eor	r15, r15
    43e4:	c7 01       	movw	r24, r14
    43e6:	89 70       	andi	r24, 0x09	; 9
    43e8:	90 70       	andi	r25, 0x00	; 0
    43ea:	01 97       	sbiw	r24, 0x01	; 1
    43ec:	11 f4       	brne	.+4      	; 0x43f2 <dtoa_prf+0x48>
    43ee:	ad e2       	ldi	r26, 0x2D	; 45
    43f0:	09 c0       	rjmp	.+18     	; 0x4404 <dtoa_prf+0x5a>
    43f2:	b1 fe       	sbrs	r11, 1
    43f4:	02 c0       	rjmp	.+4      	; 0x43fa <dtoa_prf+0x50>
    43f6:	ab e2       	ldi	r26, 0x2B	; 43
    43f8:	05 c0       	rjmp	.+10     	; 0x4404 <dtoa_prf+0x5a>
    43fa:	b0 fc       	sbrc	r11, 0
    43fc:	02 c0       	rjmp	.+4      	; 0x4402 <dtoa_prf+0x58>
    43fe:	a0 e0       	ldi	r26, 0x00	; 0
    4400:	01 c0       	rjmp	.+2      	; 0x4404 <dtoa_prf+0x5a>
    4402:	a0 e2       	ldi	r26, 0x20	; 32
    4404:	e3 fe       	sbrs	r14, 3
    4406:	3b c0       	rjmp	.+118    	; 0x447e <dtoa_prf+0xd4>
    4408:	aa 23       	and	r26, r26
    440a:	11 f4       	brne	.+4      	; 0x4410 <dtoa_prf+0x66>
    440c:	23 e0       	ldi	r18, 0x03	; 3
    440e:	01 c0       	rjmp	.+2      	; 0x4412 <dtoa_prf+0x68>
    4410:	24 e0       	ldi	r18, 0x04	; 4
    4412:	21 17       	cp	r18, r17
    4414:	10 f0       	brcs	.+4      	; 0x441a <dtoa_prf+0x70>
    4416:	20 e0       	ldi	r18, 0x00	; 0
    4418:	02 c0       	rjmp	.+4      	; 0x441e <dtoa_prf+0x74>
    441a:	12 1b       	sub	r17, r18
    441c:	21 2f       	mov	r18, r17
    441e:	eb 2c       	mov	r14, r11
    4420:	b4 fe       	sbrs	r11, 4
    4422:	02 c0       	rjmp	.+4      	; 0x4428 <dtoa_prf+0x7e>
    4424:	32 2f       	mov	r19, r18
    4426:	0a c0       	rjmp	.+20     	; 0x443c <dtoa_prf+0x92>
    4428:	f6 01       	movw	r30, r12
    442a:	32 2f       	mov	r19, r18
    442c:	80 e2       	ldi	r24, 0x20	; 32
    442e:	02 c0       	rjmp	.+4      	; 0x4434 <dtoa_prf+0x8a>
    4430:	81 93       	st	Z+, r24
    4432:	31 50       	subi	r19, 0x01	; 1
    4434:	33 23       	and	r19, r19
    4436:	e1 f7       	brne	.-8      	; 0x4430 <dtoa_prf+0x86>
    4438:	c2 0e       	add	r12, r18
    443a:	d1 1c       	adc	r13, r1
    443c:	aa 23       	and	r26, r26
    443e:	19 f0       	breq	.+6      	; 0x4446 <dtoa_prf+0x9c>
    4440:	f6 01       	movw	r30, r12
    4442:	a1 93       	st	Z+, r26
    4444:	6f 01       	movw	r12, r30
    4446:	f6 01       	movw	r30, r12
    4448:	31 96       	adiw	r30, 0x01	; 1
    444a:	e2 fe       	sbrs	r14, 2
    444c:	05 c0       	rjmp	.+10     	; 0x4458 <dtoa_prf+0xae>
    444e:	9e e4       	ldi	r25, 0x4E	; 78
    4450:	d6 01       	movw	r26, r12
    4452:	9c 93       	st	X, r25
    4454:	81 e4       	ldi	r24, 0x41	; 65
    4456:	04 c0       	rjmp	.+8      	; 0x4460 <dtoa_prf+0xb6>
    4458:	9e e6       	ldi	r25, 0x6E	; 110
    445a:	d6 01       	movw	r26, r12
    445c:	9c 93       	st	X, r25
    445e:	81 e6       	ldi	r24, 0x61	; 97
    4460:	11 96       	adiw	r26, 0x01	; 1
    4462:	8c 93       	st	X, r24
    4464:	91 83       	std	Z+1, r25	; 0x01
    4466:	32 96       	adiw	r30, 0x02	; 2
    4468:	df 01       	movw	r26, r30
    446a:	83 2f       	mov	r24, r19
    446c:	90 e2       	ldi	r25, 0x20	; 32
    446e:	02 c0       	rjmp	.+4      	; 0x4474 <dtoa_prf+0xca>
    4470:	9d 93       	st	X+, r25
    4472:	81 50       	subi	r24, 0x01	; 1
    4474:	88 23       	and	r24, r24
    4476:	e1 f7       	brne	.-8      	; 0x4470 <dtoa_prf+0xc6>
    4478:	e3 0f       	add	r30, r19
    447a:	f1 1d       	adc	r31, r1
    447c:	40 c0       	rjmp	.+128    	; 0x44fe <dtoa_prf+0x154>
    447e:	e2 fe       	sbrs	r14, 2
    4480:	42 c0       	rjmp	.+132    	; 0x4506 <dtoa_prf+0x15c>
    4482:	aa 23       	and	r26, r26
    4484:	11 f4       	brne	.+4      	; 0x448a <dtoa_prf+0xe0>
    4486:	23 e0       	ldi	r18, 0x03	; 3
    4488:	01 c0       	rjmp	.+2      	; 0x448c <dtoa_prf+0xe2>
    448a:	24 e0       	ldi	r18, 0x04	; 4
    448c:	21 17       	cp	r18, r17
    448e:	10 f0       	brcs	.+4      	; 0x4494 <dtoa_prf+0xea>
    4490:	20 e0       	ldi	r18, 0x00	; 0
    4492:	02 c0       	rjmp	.+4      	; 0x4498 <dtoa_prf+0xee>
    4494:	12 1b       	sub	r17, r18
    4496:	21 2f       	mov	r18, r17
    4498:	eb 2c       	mov	r14, r11
    449a:	b4 fe       	sbrs	r11, 4
    449c:	02 c0       	rjmp	.+4      	; 0x44a2 <dtoa_prf+0xf8>
    449e:	92 2f       	mov	r25, r18
    44a0:	0a c0       	rjmp	.+20     	; 0x44b6 <dtoa_prf+0x10c>
    44a2:	f6 01       	movw	r30, r12
    44a4:	92 2f       	mov	r25, r18
    44a6:	80 e2       	ldi	r24, 0x20	; 32
    44a8:	02 c0       	rjmp	.+4      	; 0x44ae <dtoa_prf+0x104>
    44aa:	81 93       	st	Z+, r24
    44ac:	91 50       	subi	r25, 0x01	; 1
    44ae:	99 23       	and	r25, r25
    44b0:	e1 f7       	brne	.-8      	; 0x44aa <dtoa_prf+0x100>
    44b2:	c2 0e       	add	r12, r18
    44b4:	d1 1c       	adc	r13, r1
    44b6:	aa 23       	and	r26, r26
    44b8:	19 f0       	breq	.+6      	; 0x44c0 <dtoa_prf+0x116>
    44ba:	f6 01       	movw	r30, r12
    44bc:	a1 93       	st	Z+, r26
    44be:	6f 01       	movw	r12, r30
    44c0:	f6 01       	movw	r30, r12
    44c2:	31 96       	adiw	r30, 0x01	; 1
    44c4:	e2 fe       	sbrs	r14, 2
    44c6:	08 c0       	rjmp	.+16     	; 0x44d8 <dtoa_prf+0x12e>
    44c8:	89 e4       	ldi	r24, 0x49	; 73
    44ca:	d6 01       	movw	r26, r12
    44cc:	8c 93       	st	X, r24
    44ce:	8e e4       	ldi	r24, 0x4E	; 78
    44d0:	11 96       	adiw	r26, 0x01	; 1
    44d2:	8c 93       	st	X, r24
    44d4:	86 e4       	ldi	r24, 0x46	; 70
    44d6:	07 c0       	rjmp	.+14     	; 0x44e6 <dtoa_prf+0x13c>
    44d8:	89 e6       	ldi	r24, 0x69	; 105
    44da:	d6 01       	movw	r26, r12
    44dc:	8c 93       	st	X, r24
    44de:	8e e6       	ldi	r24, 0x6E	; 110
    44e0:	11 96       	adiw	r26, 0x01	; 1
    44e2:	8c 93       	st	X, r24
    44e4:	86 e6       	ldi	r24, 0x66	; 102
    44e6:	81 83       	std	Z+1, r24	; 0x01
    44e8:	32 96       	adiw	r30, 0x02	; 2
    44ea:	df 01       	movw	r26, r30
    44ec:	89 2f       	mov	r24, r25
    44ee:	20 e2       	ldi	r18, 0x20	; 32
    44f0:	02 c0       	rjmp	.+4      	; 0x44f6 <dtoa_prf+0x14c>
    44f2:	2d 93       	st	X+, r18
    44f4:	81 50       	subi	r24, 0x01	; 1
    44f6:	88 23       	and	r24, r24
    44f8:	e1 f7       	brne	.-8      	; 0x44f2 <dtoa_prf+0x148>
    44fa:	e9 0f       	add	r30, r25
    44fc:	f1 1d       	adc	r31, r1
    44fe:	10 82       	st	Z, r1
    4500:	2e ef       	ldi	r18, 0xFE	; 254
    4502:	3f ef       	ldi	r19, 0xFF	; 255
    4504:	af c0       	rjmp	.+350    	; 0x4664 <dtoa_prf+0x2ba>
    4506:	16 16       	cp	r1, r22
    4508:	17 06       	cpc	r1, r23
    450a:	1c f0       	brlt	.+6      	; 0x4512 <dtoa_prf+0x168>
    450c:	41 e0       	ldi	r20, 0x01	; 1
    450e:	50 e0       	ldi	r21, 0x00	; 0
    4510:	03 c0       	rjmp	.+6      	; 0x4518 <dtoa_prf+0x16e>
    4512:	ab 01       	movw	r20, r22
    4514:	4f 5f       	subi	r20, 0xFF	; 255
    4516:	5f 4f       	sbci	r21, 0xFF	; 255
    4518:	aa 20       	and	r10, r10
    451a:	19 f4       	brne	.+6      	; 0x4522 <dtoa_prf+0x178>
    451c:	80 e0       	ldi	r24, 0x00	; 0
    451e:	90 e0       	ldi	r25, 0x00	; 0
    4520:	03 c0       	rjmp	.+6      	; 0x4528 <dtoa_prf+0x17e>
    4522:	8a 2d       	mov	r24, r10
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	01 96       	adiw	r24, 0x01	; 1
    4528:	20 e0       	ldi	r18, 0x00	; 0
    452a:	30 e0       	ldi	r19, 0x00	; 0
    452c:	aa 23       	and	r26, r26
    452e:	11 f0       	breq	.+4      	; 0x4534 <dtoa_prf+0x18a>
    4530:	21 e0       	ldi	r18, 0x01	; 1
    4532:	30 e0       	ldi	r19, 0x00	; 0
    4534:	24 0f       	add	r18, r20
    4536:	35 1f       	adc	r19, r21
    4538:	28 0f       	add	r18, r24
    453a:	39 1f       	adc	r19, r25
    453c:	81 2f       	mov	r24, r17
    453e:	90 e0       	ldi	r25, 0x00	; 0
    4540:	28 17       	cp	r18, r24
    4542:	39 07       	cpc	r19, r25
    4544:	14 f0       	brlt	.+4      	; 0x454a <dtoa_prf+0x1a0>
    4546:	20 e0       	ldi	r18, 0x00	; 0
    4548:	02 c0       	rjmp	.+4      	; 0x454e <dtoa_prf+0x1a4>
    454a:	12 1b       	sub	r17, r18
    454c:	21 2f       	mov	r18, r17
    454e:	4b 2d       	mov	r20, r11
    4550:	50 e0       	ldi	r21, 0x00	; 0
    4552:	ca 01       	movw	r24, r20
    4554:	80 71       	andi	r24, 0x10	; 16
    4556:	90 70       	andi	r25, 0x00	; 0
    4558:	b4 fc       	sbrc	r11, 4
    455a:	0d c0       	rjmp	.+26     	; 0x4576 <dtoa_prf+0x1cc>
    455c:	b3 fc       	sbrc	r11, 3
    455e:	0b c0       	rjmp	.+22     	; 0x4576 <dtoa_prf+0x1cc>
    4560:	f6 01       	movw	r30, r12
    4562:	32 2f       	mov	r19, r18
    4564:	40 e2       	ldi	r20, 0x20	; 32
    4566:	02 c0       	rjmp	.+4      	; 0x456c <dtoa_prf+0x1c2>
    4568:	41 93       	st	Z+, r20
    456a:	31 50       	subi	r19, 0x01	; 1
    456c:	33 23       	and	r19, r19
    456e:	e1 f7       	brne	.-8      	; 0x4568 <dtoa_prf+0x1be>
    4570:	c2 0e       	add	r12, r18
    4572:	d1 1c       	adc	r13, r1
    4574:	01 c0       	rjmp	.+2      	; 0x4578 <dtoa_prf+0x1ce>
    4576:	32 2f       	mov	r19, r18
    4578:	aa 23       	and	r26, r26
    457a:	19 f0       	breq	.+6      	; 0x4582 <dtoa_prf+0x1d8>
    457c:	f6 01       	movw	r30, r12
    457e:	a1 93       	st	Z+, r26
    4580:	6f 01       	movw	r12, r30
    4582:	89 2b       	or	r24, r25
    4584:	11 f0       	breq	.+4      	; 0x458a <dtoa_prf+0x1e0>
    4586:	13 2f       	mov	r17, r19
    4588:	0a c0       	rjmp	.+20     	; 0x459e <dtoa_prf+0x1f4>
    458a:	f6 01       	movw	r30, r12
    458c:	13 2f       	mov	r17, r19
    458e:	80 e3       	ldi	r24, 0x30	; 48
    4590:	02 c0       	rjmp	.+4      	; 0x4596 <dtoa_prf+0x1ec>
    4592:	81 93       	st	Z+, r24
    4594:	11 50       	subi	r17, 0x01	; 1
    4596:	11 23       	and	r17, r17
    4598:	e1 f7       	brne	.-8      	; 0x4592 <dtoa_prf+0x1e8>
    459a:	c3 0e       	add	r12, r19
    459c:	d1 1c       	adc	r13, r1
    459e:	09 2d       	mov	r16, r9
    45a0:	06 0f       	add	r16, r22
    45a2:	ba 80       	ldd	r11, Y+2	; 0x02
    45a4:	90 e1       	ldi	r25, 0x10	; 16
    45a6:	89 2e       	mov	r8, r25
    45a8:	91 2c       	mov	r9, r1
    45aa:	8e 20       	and	r8, r14
    45ac:	9f 20       	and	r9, r15
    45ae:	e4 fe       	sbrs	r14, 4
    45b0:	04 c0       	rjmp	.+8      	; 0x45ba <dtoa_prf+0x210>
    45b2:	f1 e3       	ldi	r31, 0x31	; 49
    45b4:	bf 16       	cp	r11, r31
    45b6:	09 f4       	brne	.+2      	; 0x45ba <dtoa_prf+0x210>
    45b8:	01 50       	subi	r16, 0x01	; 1
    45ba:	10 16       	cp	r1, r16
    45bc:	14 f0       	brlt	.+4      	; 0x45c2 <dtoa_prf+0x218>
    45be:	01 e0       	ldi	r16, 0x01	; 1
    45c0:	03 c0       	rjmp	.+6      	; 0x45c8 <dtoa_prf+0x21e>
    45c2:	09 30       	cpi	r16, 0x09	; 9
    45c4:	08 f0       	brcs	.+2      	; 0x45c8 <dtoa_prf+0x21e>
    45c6:	08 e0       	ldi	r16, 0x08	; 8
    45c8:	9b 01       	movw	r18, r22
    45ca:	77 ff       	sbrs	r23, 7
    45cc:	02 c0       	rjmp	.+4      	; 0x45d2 <dtoa_prf+0x228>
    45ce:	20 e0       	ldi	r18, 0x00	; 0
    45d0:	30 e0       	ldi	r19, 0x00	; 0
    45d2:	cb 01       	movw	r24, r22
    45d4:	01 96       	adiw	r24, 0x01	; 1
    45d6:	82 1b       	sub	r24, r18
    45d8:	93 0b       	sbc	r25, r19
    45da:	fe 01       	movw	r30, r28
    45dc:	31 96       	adiw	r30, 0x01	; 1
    45de:	e8 0f       	add	r30, r24
    45e0:	f9 1f       	adc	r31, r25
    45e2:	8e e2       	ldi	r24, 0x2E	; 46
    45e4:	f8 2e       	mov	r15, r24
    45e6:	3b 01       	movw	r6, r22
    45e8:	60 1a       	sub	r6, r16
    45ea:	71 08       	sbc	r7, r1
    45ec:	8a 2d       	mov	r24, r10
    45ee:	90 e0       	ldi	r25, 0x00	; 0
    45f0:	44 27       	eor	r20, r20
    45f2:	55 27       	eor	r21, r21
    45f4:	48 1b       	sub	r20, r24
    45f6:	59 0b       	sbc	r21, r25
    45f8:	8f ef       	ldi	r24, 0xFF	; 255
    45fa:	2f 3f       	cpi	r18, 0xFF	; 255
    45fc:	38 07       	cpc	r19, r24
    45fe:	19 f4       	brne	.+6      	; 0x4606 <dtoa_prf+0x25c>
    4600:	d6 01       	movw	r26, r12
    4602:	fd 92       	st	X+, r15
    4604:	6d 01       	movw	r12, r26
    4606:	62 17       	cp	r22, r18
    4608:	73 07       	cpc	r23, r19
    460a:	2c f0       	brlt	.+10     	; 0x4616 <dtoa_prf+0x26c>
    460c:	62 16       	cp	r6, r18
    460e:	73 06       	cpc	r7, r19
    4610:	14 f4       	brge	.+4      	; 0x4616 <dtoa_prf+0x26c>
    4612:	80 81       	ld	r24, Z
    4614:	01 c0       	rjmp	.+2      	; 0x4618 <dtoa_prf+0x26e>
    4616:	80 e3       	ldi	r24, 0x30	; 48
    4618:	21 50       	subi	r18, 0x01	; 1
    461a:	30 40       	sbci	r19, 0x00	; 0
    461c:	31 96       	adiw	r30, 0x01	; 1
    461e:	24 17       	cp	r18, r20
    4620:	35 07       	cpc	r19, r21
    4622:	24 f0       	brlt	.+8      	; 0x462c <dtoa_prf+0x282>
    4624:	d6 01       	movw	r26, r12
    4626:	8d 93       	st	X+, r24
    4628:	6d 01       	movw	r12, r26
    462a:	e6 cf       	rjmp	.-52     	; 0x45f8 <dtoa_prf+0x24e>
    462c:	26 17       	cp	r18, r22
    462e:	37 07       	cpc	r19, r23
    4630:	49 f4       	brne	.+18     	; 0x4644 <dtoa_prf+0x29a>
    4632:	b5 e3       	ldi	r27, 0x35	; 53
    4634:	bb 15       	cp	r27, r11
    4636:	28 f0       	brcs	.+10     	; 0x4642 <dtoa_prf+0x298>
    4638:	bb 16       	cp	r11, r27
    463a:	21 f4       	brne	.+8      	; 0x4644 <dtoa_prf+0x29a>
    463c:	81 14       	cp	r8, r1
    463e:	91 04       	cpc	r9, r1
    4640:	09 f4       	brne	.+2      	; 0x4644 <dtoa_prf+0x29a>
    4642:	81 e3       	ldi	r24, 0x31	; 49
    4644:	f6 01       	movw	r30, r12
    4646:	81 93       	st	Z+, r24
    4648:	d6 01       	movw	r26, r12
    464a:	81 2f       	mov	r24, r17
    464c:	90 e2       	ldi	r25, 0x20	; 32
    464e:	02 c0       	rjmp	.+4      	; 0x4654 <dtoa_prf+0x2aa>
    4650:	9c 93       	st	X, r25
    4652:	81 50       	subi	r24, 0x01	; 1
    4654:	11 96       	adiw	r26, 0x01	; 1
    4656:	88 23       	and	r24, r24
    4658:	d9 f7       	brne	.-10     	; 0x4650 <dtoa_prf+0x2a6>
    465a:	e1 0f       	add	r30, r17
    465c:	f1 1d       	adc	r31, r1
    465e:	10 82       	st	Z, r1
    4660:	20 e0       	ldi	r18, 0x00	; 0
    4662:	30 e0       	ldi	r19, 0x00	; 0
    4664:	c9 01       	movw	r24, r18
    4666:	29 96       	adiw	r28, 0x09	; 9
    4668:	ee e0       	ldi	r30, 0x0E	; 14
    466a:	0c 94 1b 21 	jmp	0x4236	; 0x4236 <__epilogue_restores__+0x8>

0000466e <__ftoa_engine>:
    466e:	28 30       	cpi	r18, 0x08	; 8
    4670:	08 f0       	brcs	.+2      	; 0x4674 <__ftoa_engine+0x6>
    4672:	27 e0       	ldi	r18, 0x07	; 7
    4674:	33 27       	eor	r19, r19
    4676:	da 01       	movw	r26, r20
    4678:	99 0f       	add	r25, r25
    467a:	31 1d       	adc	r19, r1
    467c:	87 fd       	sbrc	r24, 7
    467e:	91 60       	ori	r25, 0x01	; 1
    4680:	00 96       	adiw	r24, 0x00	; 0
    4682:	61 05       	cpc	r22, r1
    4684:	71 05       	cpc	r23, r1
    4686:	39 f4       	brne	.+14     	; 0x4696 <__ftoa_engine+0x28>
    4688:	32 60       	ori	r19, 0x02	; 2
    468a:	2e 5f       	subi	r18, 0xFE	; 254
    468c:	3d 93       	st	X+, r19
    468e:	30 e3       	ldi	r19, 0x30	; 48
    4690:	2a 95       	dec	r18
    4692:	e1 f7       	brne	.-8      	; 0x468c <__ftoa_engine+0x1e>
    4694:	08 95       	ret
    4696:	9f 3f       	cpi	r25, 0xFF	; 255
    4698:	30 f0       	brcs	.+12     	; 0x46a6 <__ftoa_engine+0x38>
    469a:	80 38       	cpi	r24, 0x80	; 128
    469c:	71 05       	cpc	r23, r1
    469e:	61 05       	cpc	r22, r1
    46a0:	09 f0       	breq	.+2      	; 0x46a4 <__ftoa_engine+0x36>
    46a2:	3c 5f       	subi	r19, 0xFC	; 252
    46a4:	3c 5f       	subi	r19, 0xFC	; 252
    46a6:	3d 93       	st	X+, r19
    46a8:	91 30       	cpi	r25, 0x01	; 1
    46aa:	08 f0       	brcs	.+2      	; 0x46ae <__ftoa_engine+0x40>
    46ac:	80 68       	ori	r24, 0x80	; 128
    46ae:	91 1d       	adc	r25, r1
    46b0:	df 93       	push	r29
    46b2:	cf 93       	push	r28
    46b4:	1f 93       	push	r17
    46b6:	0f 93       	push	r16
    46b8:	ff 92       	push	r15
    46ba:	ef 92       	push	r14
    46bc:	19 2f       	mov	r17, r25
    46be:	98 7f       	andi	r25, 0xF8	; 248
    46c0:	96 95       	lsr	r25
    46c2:	e9 2f       	mov	r30, r25
    46c4:	96 95       	lsr	r25
    46c6:	96 95       	lsr	r25
    46c8:	e9 0f       	add	r30, r25
    46ca:	ff 27       	eor	r31, r31
    46cc:	e2 55       	subi	r30, 0x52	; 82
    46ce:	ff 4f       	sbci	r31, 0xFF	; 255
    46d0:	99 27       	eor	r25, r25
    46d2:	33 27       	eor	r19, r19
    46d4:	ee 24       	eor	r14, r14
    46d6:	ff 24       	eor	r15, r15
    46d8:	a7 01       	movw	r20, r14
    46da:	e7 01       	movw	r28, r14
    46dc:	05 90       	lpm	r0, Z+
    46de:	08 94       	sec
    46e0:	07 94       	ror	r0
    46e2:	28 f4       	brcc	.+10     	; 0x46ee <__ftoa_engine+0x80>
    46e4:	36 0f       	add	r19, r22
    46e6:	e7 1e       	adc	r14, r23
    46e8:	f8 1e       	adc	r15, r24
    46ea:	49 1f       	adc	r20, r25
    46ec:	51 1d       	adc	r21, r1
    46ee:	66 0f       	add	r22, r22
    46f0:	77 1f       	adc	r23, r23
    46f2:	88 1f       	adc	r24, r24
    46f4:	99 1f       	adc	r25, r25
    46f6:	06 94       	lsr	r0
    46f8:	a1 f7       	brne	.-24     	; 0x46e2 <__ftoa_engine+0x74>
    46fa:	05 90       	lpm	r0, Z+
    46fc:	07 94       	ror	r0
    46fe:	28 f4       	brcc	.+10     	; 0x470a <__ftoa_engine+0x9c>
    4700:	e7 0e       	add	r14, r23
    4702:	f8 1e       	adc	r15, r24
    4704:	49 1f       	adc	r20, r25
    4706:	56 1f       	adc	r21, r22
    4708:	c1 1d       	adc	r28, r1
    470a:	77 0f       	add	r23, r23
    470c:	88 1f       	adc	r24, r24
    470e:	99 1f       	adc	r25, r25
    4710:	66 1f       	adc	r22, r22
    4712:	06 94       	lsr	r0
    4714:	a1 f7       	brne	.-24     	; 0x46fe <__ftoa_engine+0x90>
    4716:	05 90       	lpm	r0, Z+
    4718:	07 94       	ror	r0
    471a:	28 f4       	brcc	.+10     	; 0x4726 <__ftoa_engine+0xb8>
    471c:	f8 0e       	add	r15, r24
    471e:	49 1f       	adc	r20, r25
    4720:	56 1f       	adc	r21, r22
    4722:	c7 1f       	adc	r28, r23
    4724:	d1 1d       	adc	r29, r1
    4726:	88 0f       	add	r24, r24
    4728:	99 1f       	adc	r25, r25
    472a:	66 1f       	adc	r22, r22
    472c:	77 1f       	adc	r23, r23
    472e:	06 94       	lsr	r0
    4730:	a1 f7       	brne	.-24     	; 0x471a <__ftoa_engine+0xac>
    4732:	05 90       	lpm	r0, Z+
    4734:	07 94       	ror	r0
    4736:	20 f4       	brcc	.+8      	; 0x4740 <__ftoa_engine+0xd2>
    4738:	49 0f       	add	r20, r25
    473a:	56 1f       	adc	r21, r22
    473c:	c7 1f       	adc	r28, r23
    473e:	d8 1f       	adc	r29, r24
    4740:	99 0f       	add	r25, r25
    4742:	66 1f       	adc	r22, r22
    4744:	77 1f       	adc	r23, r23
    4746:	88 1f       	adc	r24, r24
    4748:	06 94       	lsr	r0
    474a:	a9 f7       	brne	.-22     	; 0x4736 <__ftoa_engine+0xc8>
    474c:	84 91       	lpm	r24, Z+
    474e:	10 95       	com	r17
    4750:	17 70       	andi	r17, 0x07	; 7
    4752:	41 f0       	breq	.+16     	; 0x4764 <__ftoa_engine+0xf6>
    4754:	d6 95       	lsr	r29
    4756:	c7 95       	ror	r28
    4758:	57 95       	ror	r21
    475a:	47 95       	ror	r20
    475c:	f7 94       	ror	r15
    475e:	e7 94       	ror	r14
    4760:	1a 95       	dec	r17
    4762:	c1 f7       	brne	.-16     	; 0x4754 <__ftoa_engine+0xe6>
    4764:	e4 e5       	ldi	r30, 0x54	; 84
    4766:	f0 e0       	ldi	r31, 0x00	; 0
    4768:	68 94       	set
    476a:	15 90       	lpm	r1, Z+
    476c:	15 91       	lpm	r17, Z+
    476e:	35 91       	lpm	r19, Z+
    4770:	65 91       	lpm	r22, Z+
    4772:	95 91       	lpm	r25, Z+
    4774:	05 90       	lpm	r0, Z+
    4776:	7f e2       	ldi	r23, 0x2F	; 47
    4778:	73 95       	inc	r23
    477a:	e1 18       	sub	r14, r1
    477c:	f1 0a       	sbc	r15, r17
    477e:	43 0b       	sbc	r20, r19
    4780:	56 0b       	sbc	r21, r22
    4782:	c9 0b       	sbc	r28, r25
    4784:	d0 09       	sbc	r29, r0
    4786:	c0 f7       	brcc	.-16     	; 0x4778 <__ftoa_engine+0x10a>
    4788:	e1 0c       	add	r14, r1
    478a:	f1 1e       	adc	r15, r17
    478c:	43 1f       	adc	r20, r19
    478e:	56 1f       	adc	r21, r22
    4790:	c9 1f       	adc	r28, r25
    4792:	d0 1d       	adc	r29, r0
    4794:	7e f4       	brtc	.+30     	; 0x47b4 <__ftoa_engine+0x146>
    4796:	70 33       	cpi	r23, 0x30	; 48
    4798:	11 f4       	brne	.+4      	; 0x479e <__ftoa_engine+0x130>
    479a:	8a 95       	dec	r24
    479c:	e6 cf       	rjmp	.-52     	; 0x476a <__ftoa_engine+0xfc>
    479e:	e8 94       	clt
    47a0:	01 50       	subi	r16, 0x01	; 1
    47a2:	30 f0       	brcs	.+12     	; 0x47b0 <__ftoa_engine+0x142>
    47a4:	08 0f       	add	r16, r24
    47a6:	0a f4       	brpl	.+2      	; 0x47aa <__ftoa_engine+0x13c>
    47a8:	00 27       	eor	r16, r16
    47aa:	02 17       	cp	r16, r18
    47ac:	08 f4       	brcc	.+2      	; 0x47b0 <__ftoa_engine+0x142>
    47ae:	20 2f       	mov	r18, r16
    47b0:	23 95       	inc	r18
    47b2:	02 2f       	mov	r16, r18
    47b4:	7a 33       	cpi	r23, 0x3A	; 58
    47b6:	28 f0       	brcs	.+10     	; 0x47c2 <__ftoa_engine+0x154>
    47b8:	79 e3       	ldi	r23, 0x39	; 57
    47ba:	7d 93       	st	X+, r23
    47bc:	2a 95       	dec	r18
    47be:	e9 f7       	brne	.-6      	; 0x47ba <__ftoa_engine+0x14c>
    47c0:	10 c0       	rjmp	.+32     	; 0x47e2 <__ftoa_engine+0x174>
    47c2:	7d 93       	st	X+, r23
    47c4:	2a 95       	dec	r18
    47c6:	89 f6       	brne	.-94     	; 0x476a <__ftoa_engine+0xfc>
    47c8:	06 94       	lsr	r0
    47ca:	97 95       	ror	r25
    47cc:	67 95       	ror	r22
    47ce:	37 95       	ror	r19
    47d0:	17 95       	ror	r17
    47d2:	17 94       	ror	r1
    47d4:	e1 18       	sub	r14, r1
    47d6:	f1 0a       	sbc	r15, r17
    47d8:	43 0b       	sbc	r20, r19
    47da:	56 0b       	sbc	r21, r22
    47dc:	c9 0b       	sbc	r28, r25
    47de:	d0 09       	sbc	r29, r0
    47e0:	98 f0       	brcs	.+38     	; 0x4808 <__ftoa_engine+0x19a>
    47e2:	23 95       	inc	r18
    47e4:	7e 91       	ld	r23, -X
    47e6:	73 95       	inc	r23
    47e8:	7a 33       	cpi	r23, 0x3A	; 58
    47ea:	08 f0       	brcs	.+2      	; 0x47ee <__ftoa_engine+0x180>
    47ec:	70 e3       	ldi	r23, 0x30	; 48
    47ee:	7c 93       	st	X, r23
    47f0:	20 13       	cpse	r18, r16
    47f2:	b8 f7       	brcc	.-18     	; 0x47e2 <__ftoa_engine+0x174>
    47f4:	7e 91       	ld	r23, -X
    47f6:	70 61       	ori	r23, 0x10	; 16
    47f8:	7d 93       	st	X+, r23
    47fa:	30 f0       	brcs	.+12     	; 0x4808 <__ftoa_engine+0x19a>
    47fc:	83 95       	inc	r24
    47fe:	71 e3       	ldi	r23, 0x31	; 49
    4800:	7d 93       	st	X+, r23
    4802:	70 e3       	ldi	r23, 0x30	; 48
    4804:	2a 95       	dec	r18
    4806:	e1 f7       	brne	.-8      	; 0x4800 <__ftoa_engine+0x192>
    4808:	11 24       	eor	r1, r1
    480a:	ef 90       	pop	r14
    480c:	ff 90       	pop	r15
    480e:	0f 91       	pop	r16
    4810:	1f 91       	pop	r17
    4812:	cf 91       	pop	r28
    4814:	df 91       	pop	r29
    4816:	99 27       	eor	r25, r25
    4818:	87 fd       	sbrc	r24, 7
    481a:	90 95       	com	r25
    481c:	08 95       	ret

0000481e <strrev>:
    481e:	dc 01       	movw	r26, r24
    4820:	fc 01       	movw	r30, r24
    4822:	67 2f       	mov	r22, r23
    4824:	71 91       	ld	r23, Z+
    4826:	77 23       	and	r23, r23
    4828:	e1 f7       	brne	.-8      	; 0x4822 <strrev+0x4>
    482a:	32 97       	sbiw	r30, 0x02	; 2
    482c:	04 c0       	rjmp	.+8      	; 0x4836 <strrev+0x18>
    482e:	7c 91       	ld	r23, X
    4830:	6d 93       	st	X+, r22
    4832:	70 83       	st	Z, r23
    4834:	62 91       	ld	r22, -Z
    4836:	ae 17       	cp	r26, r30
    4838:	bf 07       	cpc	r27, r31
    483a:	c8 f3       	brcs	.-14     	; 0x482e <strrev+0x10>
    483c:	08 95       	ret

0000483e <__mulsi3>:
    483e:	62 9f       	mul	r22, r18
    4840:	d0 01       	movw	r26, r0
    4842:	73 9f       	mul	r23, r19
    4844:	f0 01       	movw	r30, r0
    4846:	82 9f       	mul	r24, r18
    4848:	e0 0d       	add	r30, r0
    484a:	f1 1d       	adc	r31, r1
    484c:	64 9f       	mul	r22, r20
    484e:	e0 0d       	add	r30, r0
    4850:	f1 1d       	adc	r31, r1
    4852:	92 9f       	mul	r25, r18
    4854:	f0 0d       	add	r31, r0
    4856:	83 9f       	mul	r24, r19
    4858:	f0 0d       	add	r31, r0
    485a:	74 9f       	mul	r23, r20
    485c:	f0 0d       	add	r31, r0
    485e:	65 9f       	mul	r22, r21
    4860:	f0 0d       	add	r31, r0
    4862:	99 27       	eor	r25, r25
    4864:	72 9f       	mul	r23, r18
    4866:	b0 0d       	add	r27, r0
    4868:	e1 1d       	adc	r30, r1
    486a:	f9 1f       	adc	r31, r25
    486c:	63 9f       	mul	r22, r19
    486e:	b0 0d       	add	r27, r0
    4870:	e1 1d       	adc	r30, r1
    4872:	f9 1f       	adc	r31, r25
    4874:	bd 01       	movw	r22, r26
    4876:	cf 01       	movw	r24, r30
    4878:	11 24       	eor	r1, r1
    487a:	08 95       	ret

0000487c <__divmodsi4>:
    487c:	97 fb       	bst	r25, 7
    487e:	09 2e       	mov	r0, r25
    4880:	05 26       	eor	r0, r21
    4882:	0e d0       	rcall	.+28     	; 0x48a0 <__divmodsi4_neg1>
    4884:	57 fd       	sbrc	r21, 7
    4886:	04 d0       	rcall	.+8      	; 0x4890 <__divmodsi4_neg2>
    4888:	14 d0       	rcall	.+40     	; 0x48b2 <__udivmodsi4>
    488a:	0a d0       	rcall	.+20     	; 0x48a0 <__divmodsi4_neg1>
    488c:	00 1c       	adc	r0, r0
    488e:	38 f4       	brcc	.+14     	; 0x489e <__divmodsi4_exit>

00004890 <__divmodsi4_neg2>:
    4890:	50 95       	com	r21
    4892:	40 95       	com	r20
    4894:	30 95       	com	r19
    4896:	21 95       	neg	r18
    4898:	3f 4f       	sbci	r19, 0xFF	; 255
    489a:	4f 4f       	sbci	r20, 0xFF	; 255
    489c:	5f 4f       	sbci	r21, 0xFF	; 255

0000489e <__divmodsi4_exit>:
    489e:	08 95       	ret

000048a0 <__divmodsi4_neg1>:
    48a0:	f6 f7       	brtc	.-4      	; 0x489e <__divmodsi4_exit>
    48a2:	90 95       	com	r25
    48a4:	80 95       	com	r24
    48a6:	70 95       	com	r23
    48a8:	61 95       	neg	r22
    48aa:	7f 4f       	sbci	r23, 0xFF	; 255
    48ac:	8f 4f       	sbci	r24, 0xFF	; 255
    48ae:	9f 4f       	sbci	r25, 0xFF	; 255
    48b0:	08 95       	ret

000048b2 <__udivmodsi4>:
    48b2:	a1 e2       	ldi	r26, 0x21	; 33
    48b4:	1a 2e       	mov	r1, r26
    48b6:	aa 1b       	sub	r26, r26
    48b8:	bb 1b       	sub	r27, r27
    48ba:	fd 01       	movw	r30, r26
    48bc:	0d c0       	rjmp	.+26     	; 0x48d8 <__udivmodsi4_ep>

000048be <__udivmodsi4_loop>:
    48be:	aa 1f       	adc	r26, r26
    48c0:	bb 1f       	adc	r27, r27
    48c2:	ee 1f       	adc	r30, r30
    48c4:	ff 1f       	adc	r31, r31
    48c6:	a2 17       	cp	r26, r18
    48c8:	b3 07       	cpc	r27, r19
    48ca:	e4 07       	cpc	r30, r20
    48cc:	f5 07       	cpc	r31, r21
    48ce:	20 f0       	brcs	.+8      	; 0x48d8 <__udivmodsi4_ep>
    48d0:	a2 1b       	sub	r26, r18
    48d2:	b3 0b       	sbc	r27, r19
    48d4:	e4 0b       	sbc	r30, r20
    48d6:	f5 0b       	sbc	r31, r21

000048d8 <__udivmodsi4_ep>:
    48d8:	66 1f       	adc	r22, r22
    48da:	77 1f       	adc	r23, r23
    48dc:	88 1f       	adc	r24, r24
    48de:	99 1f       	adc	r25, r25
    48e0:	1a 94       	dec	r1
    48e2:	69 f7       	brne	.-38     	; 0x48be <__udivmodsi4_loop>
    48e4:	60 95       	com	r22
    48e6:	70 95       	com	r23
    48e8:	80 95       	com	r24
    48ea:	90 95       	com	r25
    48ec:	9b 01       	movw	r18, r22
    48ee:	ac 01       	movw	r20, r24
    48f0:	bd 01       	movw	r22, r26
    48f2:	cf 01       	movw	r24, r30
    48f4:	08 95       	ret

000048f6 <_exit>:
    48f6:	f8 94       	cli

000048f8 <__stop_program>:
    48f8:	ff cf       	rjmp	.-2      	; 0x48f8 <__stop_program>
